{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/Fileupload.jsx\",\n  _s = $RefreshSig$();\n// FileUpload.jsx - Component for uploading data files\nimport React, { useState } from 'react';\nimport './FileUpload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onUploadSuccess,\n  uploadSuccess,\n  setUploadSuccess\n}) => {\n  _s();\n  const [files, setFiles] = useState({\n    csv: null,\n    geojson: null,\n    shapefile: []\n  });\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const [datasetName, setDatasetName] = useState('');\n  const handleFileChange = e => {\n    const {\n      name,\n      files: selectedFiles\n    } = e.target;\n    if (name === 'shapefile') {\n      // Handle multiple shapefile components (.shp, .dbf, .shx)\n      const fileArray = Array.from(selectedFiles);\n      setFiles(prev => ({\n        ...prev,\n        [name]: fileArray\n      }));\n    } else {\n      // Handle single file types (CSV, GeoJSON)\n      setFiles(prev => ({\n        ...prev,\n        [name]: selectedFiles[0] || null\n      }));\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(null);\n    setUploading(true);\n    setUploadSuccess(false);\n\n    // Validate that at least one file is selected\n    if (!files.csv && !files.geojson && files.shapefile.length === 0) {\n      setError('Please select at least one file to upload');\n      setUploading(false);\n      return;\n    }\n\n    // Create form data\n    const formData = new FormData();\n    if (files.csv) {\n      formData.append('csv', files.csv);\n    }\n    if (files.geojson) {\n      formData.append('geojson', files.geojson);\n    }\n\n    // Add all shapefile components\n    files.shapefile.forEach(file => {\n      formData.append('shapefile', file);\n    });\n\n    // Add dataset name if provided\n    if (datasetName) {\n      formData.append('name', datasetName);\n    }\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to upload files');\n      }\n\n      // Handle success\n      onUploadSuccess(data.datasetId);\n\n      // Reset form\n      setFiles({\n        csv: null,\n        geojson: null,\n        shapefile: []\n      });\n      setDatasetName('');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n  const renderFileList = fileType => {\n    if (fileType === 'shapefile' && files.shapefile.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"file-list\",\n        children: files.shapefile.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"file-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-icon\",\n            children: \"\\uD83D\\uDCC1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-name\",\n            children: file.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-size\",\n            children: [\"(\", formatFileSize(file.size), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this);\n    } else if (fileType !== 'shapefile' && files[fileType]) {\n      const file = files[fileType];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-icon\",\n          children: \"\\uD83D\\uDCC1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-name\",\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-size\",\n          children: [\"(\", formatFileSize(file.size), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  const formatFileSize = bytes => {\n    if (bytes < 1024) return bytes + ' B';else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';else return (bytes / 1048576).toFixed(1) + ' MB';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Data Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), uploadSuccess ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"success-icon\",\n        children: \"\\u2713\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Files uploaded successfully! Redirecting to dashboard...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"upload-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataset-name\",\n          children: \"Dataset Name (optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"dataset-name\",\n          value: datasetName,\n          onChange: e => setDatasetName(e.target.value),\n          placeholder: \"Enter a name for this dataset\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-sections\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Tabular Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"file-description\",\n            children: \"Upload a CSV file with data to be visualized in charts and tables. Make sure it has header rows and consistent data formats.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-upload-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"csv-upload\",\n              className: \"file-upload-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"upload-icon\",\n                children: \"\\uD83D\\uDCCA\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Select CSV File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"csv-upload\",\n                name: \"csv\",\n                accept: \".csv\",\n                onChange: handleFileChange,\n                className: \"file-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this), renderFileList('csv')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Geographic Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"file-description\",\n            children: \"Upload GeoJSON or Shapefile with geographic boundaries and properties. For Shapefiles, upload .shp, .dbf, and .shx files together.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-upload-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"geojson-upload\",\n              className: \"file-upload-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"upload-icon\",\n                children: \"\\uD83C\\uDF0D\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Select GeoJSON File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"geojson-upload\",\n                name: \"geojson\",\n                accept: \".json,.geojson\",\n                onChange: handleFileChange,\n                className: \"file-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 17\n            }, this), renderFileList('geojson')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-upload-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"shapefile-upload\",\n              className: \"file-upload-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"upload-icon\",\n                children: \"\\uD83D\\uDDFA\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Select Shapefile Components\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"shapefile-upload\",\n                name: \"shapefile\",\n                accept: \".shp,.dbf,.shx,.prj\",\n                onChange: handleFileChange,\n                className: \"file-input\",\n                multiple: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this), renderFileList('shapefile')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: uploading,\n          children: uploading ? 'Uploading...' : 'Upload Files'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-instructions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File Requirements\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"CSV files:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), \" Must have headers in the first row. Numeric columns will be used for calculations.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"GeoJSON files:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), \" Must follow the GeoJSON specification with valid features.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Shapefiles:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), \" Upload the .shp, .dbf, and .shx files together.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Note:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), \" For best results, ensure that your CSV data and geographic data share common identifier columns for proper joining of the datasets.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"mXe3WK4jR7n7T/HNcYxCDYoXciU=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FileUpload","onUploadSuccess","uploadSuccess","setUploadSuccess","_s","files","setFiles","csv","geojson","shapefile","uploading","setUploading","error","setError","datasetName","setDatasetName","handleFileChange","e","name","selectedFiles","target","fileArray","Array","from","prev","handleSubmit","preventDefault","length","formData","FormData","append","forEach","file","response","fetch","method","body","data","json","ok","Error","datasetId","err","message","renderFileList","fileType","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","formatFileSize","size","bytes","toFixed","onSubmit","htmlFor","type","id","value","onChange","placeholder","accept","multiple","disabled","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/Fileupload.jsx"],"sourcesContent":["// FileUpload.jsx - Component for uploading data files\nimport React, { useState } from 'react';\nimport './FileUpload.css';\n\nconst FileUpload = ({ onUploadSuccess, uploadSuccess, setUploadSuccess }) => {\n  const [files, setFiles] = useState({\n    csv: null,\n    geojson: null,\n    shapefile: []\n  });\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const [datasetName, setDatasetName] = useState('');\n\n  const handleFileChange = (e) => {\n    const { name, files: selectedFiles } = e.target;\n    \n    if (name === 'shapefile') {\n      // Handle multiple shapefile components (.shp, .dbf, .shx)\n      const fileArray = Array.from(selectedFiles);\n      setFiles(prev => ({\n        ...prev,\n        [name]: fileArray\n      }));\n    } else {\n      // Handle single file types (CSV, GeoJSON)\n      setFiles(prev => ({\n        ...prev,\n        [name]: selectedFiles[0] || null\n      }));\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(null);\n    setUploading(true);\n    setUploadSuccess(false);\n\n    // Validate that at least one file is selected\n    if (!files.csv && !files.geojson && files.shapefile.length === 0) {\n      setError('Please select at least one file to upload');\n      setUploading(false);\n      return;\n    }\n\n    // Create form data\n    const formData = new FormData();\n    \n    if (files.csv) {\n      formData.append('csv', files.csv);\n    }\n    \n    if (files.geojson) {\n      formData.append('geojson', files.geojson);\n    }\n    \n    // Add all shapefile components\n    files.shapefile.forEach(file => {\n      formData.append('shapefile', file);\n    });\n    \n    // Add dataset name if provided\n    if (datasetName) {\n      formData.append('name', datasetName);\n    }\n\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to upload files');\n      }\n\n      // Handle success\n      onUploadSuccess(data.datasetId);\n      \n      // Reset form\n      setFiles({\n        csv: null,\n        geojson: null,\n        shapefile: []\n      });\n      setDatasetName('');\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const renderFileList = (fileType) => {\n    if (fileType === 'shapefile' && files.shapefile.length > 0) {\n      return (\n        <ul className=\"file-list\">\n          {files.shapefile.map((file, index) => (\n            <li key={index} className=\"file-item\">\n              <span className=\"file-icon\">📁</span>\n              <span className=\"file-name\">{file.name}</span>\n              <span className=\"file-size\">({formatFileSize(file.size)})</span>\n            </li>\n          ))}\n        </ul>\n      );\n    } else if (fileType !== 'shapefile' && files[fileType]) {\n      const file = files[fileType];\n      return (\n        <div className=\"file-item\">\n          <span className=\"file-icon\">📁</span>\n          <span className=\"file-name\">{file.name}</span>\n          <span className=\"file-size\">({formatFileSize(file.size)})</span>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes < 1024) return bytes + ' B';\n    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';\n    else return (bytes / 1048576).toFixed(1) + ' MB';\n  };\n\n  return (\n    <div className=\"upload-container\">\n      <h1>Upload Data Files</h1>\n      \n      {uploadSuccess ? (\n        <div className=\"success-message\">\n          <span className=\"success-icon\">✓</span>\n          <p>Files uploaded successfully! Redirecting to dashboard...</p>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"upload-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"dataset-name\">Dataset Name (optional)</label>\n            <input\n              type=\"text\"\n              id=\"dataset-name\"\n              value={datasetName}\n              onChange={(e) => setDatasetName(e.target.value)}\n              placeholder=\"Enter a name for this dataset\"\n              className=\"form-control\"\n            />\n          </div>\n          \n          <div className=\"upload-sections\">\n            <div className=\"upload-section\">\n              <h2>Tabular Data</h2>\n              <p className=\"file-description\">\n                Upload a CSV file with data to be visualized in charts and tables.\n                Make sure it has header rows and consistent data formats.\n              </p>\n              \n              <div className=\"file-upload-area\">\n                <label htmlFor=\"csv-upload\" className=\"file-upload-label\">\n                  <div className=\"upload-icon\">📊</div>\n                  <div>Select CSV File</div>\n                  <input\n                    type=\"file\"\n                    id=\"csv-upload\"\n                    name=\"csv\"\n                    accept=\".csv\"\n                    onChange={handleFileChange}\n                    className=\"file-input\"\n                  />\n                </label>\n                \n                {renderFileList('csv')}\n              </div>\n            </div>\n            \n            <div className=\"upload-section\">\n              <h2>Geographic Data</h2>\n              <p className=\"file-description\">\n                Upload GeoJSON or Shapefile with geographic boundaries and properties.\n                For Shapefiles, upload .shp, .dbf, and .shx files together.\n              </p>\n              \n              <div className=\"file-upload-area\">\n                <label htmlFor=\"geojson-upload\" className=\"file-upload-label\">\n                  <div className=\"upload-icon\">🌍</div>\n                  <div>Select GeoJSON File</div>\n                  <input\n                    type=\"file\"\n                    id=\"geojson-upload\"\n                    name=\"geojson\"\n                    accept=\".json,.geojson\"\n                    onChange={handleFileChange}\n                    className=\"file-input\"\n                  />\n                </label>\n                \n                {renderFileList('geojson')}\n              </div>\n              \n              <div className=\"file-upload-area\">\n                <label htmlFor=\"shapefile-upload\" className=\"file-upload-label\">\n                  <div className=\"upload-icon\">🗺️</div>\n                  <div>Select Shapefile Components</div>\n                  <input\n                    type=\"file\"\n                    id=\"shapefile-upload\"\n                    name=\"shapefile\"\n                    accept=\".shp,.dbf,.shx,.prj\"\n                    onChange={handleFileChange}\n                    className=\"file-input\"\n                    multiple\n                  />\n                </label>\n                \n                {renderFileList('shapefile')}\n              </div>\n            </div>\n          </div>\n          \n          {error && <div className=\"error-message\">{error}</div>}\n          \n          <div className=\"form-actions\">\n            <button\n              type=\"submit\"\n              className=\"submit-button\"\n              disabled={uploading}\n            >\n              {uploading ? 'Uploading...' : 'Upload Files'}\n            </button>\n          </div>\n        </form>\n      )}\n      \n      <div className=\"upload-instructions\">\n        <h3>File Requirements</h3>\n        <ul>\n          <li>\n            <strong>CSV files:</strong> Must have headers in the first row. Numeric columns will be used for calculations.\n          </li>\n          <li>\n            <strong>GeoJSON files:</strong> Must follow the GeoJSON specification with valid features.\n          </li>\n          <li>\n            <strong>Shapefiles:</strong> Upload the .shp, .dbf, and .shx files together.\n          </li>\n        </ul>\n        <p>\n          <strong>Note:</strong> For best results, ensure that your CSV data and geographic data \n          share common identifier columns for proper joining of the datasets.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default FileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}