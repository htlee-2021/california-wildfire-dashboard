{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/Dashboard.jsx\",\n  _s = $RefreshSig$();\n// Dashboard.jsx - Enhanced with base layer and overlay support\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport LayerControls from './LayerControls';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  var _baseData$metrics, _baseData$metrics$tot, _baseData$metrics2, _baseData$metrics2$av, _baseData$metrics3, _baseData$metrics3$ma, _baseData$metrics4, _baseData$metrics4$mi;\n  // Base dataset state\n  const [baseData, setBaseData] = useState(null);\n  const [selectedBaseDataset, setSelectedBaseDataset] = useState('default');\n\n  // Overlay datasets state\n  const [overlays, setOverlays] = useState([]);\n  const [availableOverlays, setAvailableOverlays] = useState([]);\n\n  // UI state\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [availableDatasets, setAvailableDatasets] = useState([{\n    id: 'default',\n    name: 'Default Dataset'\n  }]);\n  const [renderMethod, setRenderMethod] = useState('standard'); // 'standard' or 'simplified'\n\n  // Refs for visualization containers\n  const mapRef = useRef(null);\n  const chartRef = useRef(null);\n  const backendBaseUrl = 'http://localhost:8000';\n\n  // Fetch available datasets on component mount\n  useEffect(() => {\n    const fetchDatasets = async () => {\n      try {\n        const response = await fetch(`${backendBaseUrl}/api/datasets`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const datasets = await response.json();\n        setAvailableDatasets(datasets);\n\n        // Set available overlays (all datasets except the currently selected base)\n        updateAvailableOverlays(datasets, selectedBaseDataset);\n      } catch (err) {\n        console.error('Error fetching datasets:', err);\n      }\n    };\n    fetchDatasets();\n  }, []);\n\n  // Update available overlays when base dataset changes\n  const updateAvailableOverlays = (datasets, baseId) => {\n    const filteredOverlays = datasets.filter(dataset => dataset.id !== baseId);\n    setAvailableOverlays(filteredOverlays);\n  };\n\n  // Fetch base dataset when selection changes\n  useEffect(() => {\n    fetchBaseData(selectedBaseDataset);\n\n    // Update available overlays when base dataset changes\n    updateAvailableOverlays(availableDatasets, selectedBaseDataset);\n\n    // Clear current overlays when base dataset changes\n    setOverlays([]);\n  }, [selectedBaseDataset]);\n\n  // Fetch base dataset data\n  const fetchBaseData = async datasetId => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${backendBaseUrl}/api/data/${datasetId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const result = await response.json();\n      setBaseData(result);\n      setLoading(false);\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n\n  // Toggle an overlay dataset\n  const toggleOverlay = async datasetId => {\n    // Check if the overlay is already added\n    const existingOverlayIndex = overlays.findIndex(o => o.id === datasetId);\n    if (existingOverlayIndex >= 0) {\n      // Remove the overlay if it's already added\n      setOverlays(overlays.filter(o => o.id !== datasetId));\n    } else {\n      // Add the overlay\n      try {\n        setLoading(true);\n        const response = await fetch(`${backendBaseUrl}/api/data/${datasetId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n\n        // Add to overlays with default settings\n        setOverlays([...overlays, {\n          id: datasetId,\n          data: result,\n          visible: true,\n          opacity: 0.7,\n          colorScale: 'viridis',\n          // Default color scale\n          zIndex: overlays.length // Set z-index based on current overlay count\n        }]);\n        setLoading(false);\n      } catch (err) {\n        setError(`Error loading overlay: ${err.message}`);\n        setLoading(false);\n      }\n    }\n  };\n\n  // Analyze layers (spatial operations between base and overlay)\n  const analyzeLayer = async (overlayId, operation) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${backendBaseUrl}/api/layers/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          baseLayerId: selectedBaseDataset,\n          overlayLayerId: overlayId,\n          operation\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.success) {\n        // Fetch the new dataset\n        await fetchBaseData(result.datasetId);\n        // Update the available datasets list\n        const datasetsResponse = await fetch(`${backendBaseUrl}/api/datasets`);\n        if (datasetsResponse.ok) {\n          const datasets = await datasetsResponse.json();\n          setAvailableDatasets(datasets);\n\n          // Set the new analysis dataset as the base dataset\n          setSelectedBaseDataset(result.datasetId);\n        }\n        setLoading(false);\n      } else {\n        throw new Error(result.error || 'Analysis operation failed');\n      }\n    } catch (err) {\n      setError(`Error performing analysis: ${err.message}`);\n      setLoading(false);\n    }\n  };\n\n  // Update overlay settings\n  const updateOverlay = (datasetId, updates) => {\n    setOverlays(overlays.map(overlay => overlay.id === datasetId ? {\n      ...overlay,\n      ...updates\n    } : overlay));\n  };\n\n  // Draw the base map and overlays\n  const drawMap = () => {\n    if (!baseData || !baseData.geoData || !mapRef.current) return;\n    const mapContainer = d3.select(mapRef.current);\n    mapContainer.selectAll(\"*\").remove();\n\n    // Check if we have valid GeoJSON data\n    if (!baseData.geoData.features || baseData.geoData.features.length === 0) {\n      mapContainer.append(\"div\").attr(\"class\", \"no-data-message\").text(\"No geographic data available to display\");\n      return;\n    }\n    const width = mapContainer.node().getBoundingClientRect().width;\n    const height = 500;\n    const svg = mapContainer.append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\n    // Add a base group for the base layer\n    const baseGroup = svg.append(\"g\").attr(\"class\", \"base-layer\");\n\n    // Add a tooltip div\n    const tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n    try {\n      // Clean the features to ensure valid coordinates\n      const validFeatures = baseData.geoData.features.filter(feature => {\n        if (!feature.geometry || !feature.geometry.coordinates) return false;\n\n        // Complex check for valid coordinates omitted for brevity (same as in original)\n        return true;\n      });\n      if (validFeatures.length === 0) {\n        svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", height / 2).attr(\"text-anchor\", \"middle\").text(\"No valid geographic features found in the data\");\n        return;\n      }\n      const cleanedGeoData = {\n        type: 'FeatureCollection',\n        features: validFeatures\n      };\n\n      // Create a projection that works with the data\n      const projection = d3.geoMercator().fitSize([width, height], cleanedGeoData);\n      const path = d3.geoPath().projection(projection);\n\n      // Find a numeric property to use for coloring\n      let valueProperty = null;\n      if (cleanedGeoData.features.length > 0) {\n        const properties = cleanedGeoData.features[0].properties;\n        const numericProps = Object.keys(properties).filter(key => typeof properties[key] === 'number' || typeof properties[key] === 'string' && !isNaN(parseFloat(properties[key])));\n        if (numericProps.length > 0) {\n          valueProperty = numericProps[0];\n        }\n      }\n\n      // Create a color scale for the base layer\n      let colorScale = d3.scaleOrdinal(d3.schemeCategory10); // Default categorical scale\n\n      if (valueProperty) {\n        // Get min/max values for color scale\n        const values = cleanedGeoData.features.map(f => {\n          const val = f.properties[valueProperty];\n          return typeof val === 'number' ? val : parseFloat(val);\n        }).filter(val => !isNaN(val));\n        const minValue = values.length > 0 ? Math.min(...values) : 0;\n        const maxValue = values.length > 0 ? Math.max(...values) : 1;\n\n        // Create a sequential color scale for numeric data\n        colorScale = d3.scaleSequential().domain([minValue, maxValue]).interpolator(d3.interpolateViridis);\n      }\n\n      // Draw base layer\n      baseGroup.selectAll(\"path\").data(cleanedGeoData.features).enter().append(\"path\").attr(\"d\", feature => {\n        try {\n          return path(feature);\n        } catch (e) {\n          console.warn(\"Error rendering feature:\", e, feature);\n          return \"\";\n        }\n      }).attr(\"fill\", d => {\n        if (valueProperty) {\n          const val = d.properties[valueProperty];\n          const numericVal = typeof val === 'number' ? val : parseFloat(val);\n          return !isNaN(numericVal) ? colorScale(numericVal) : \"#ccc\";\n        }\n        return \"#4682b4\"; // Default color if no value property\n      }).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 0.5).on(\"mouseover\", function (event, d) {\n        d3.select(this).attr(\"stroke-width\", 1.5).attr(\"stroke\", \"#000\");\n\n        // Show tooltip with properties\n        let tooltipHTML = `<div style=\"font-weight:bold;border-bottom:1px solid #ccc;padding-bottom:3px;margin-bottom:3px\">\n            ${d.properties.name || d.properties.NAME || valueProperty + ': ' + d.properties[valueProperty] || 'Feature'}</div>`;\n\n        // Add all properties to tooltip\n        Object.entries(d.properties).forEach(([key, value]) => {\n          if (key !== 'name' && key !== 'NAME') {\n            tooltipHTML += `<div><strong>${key}:</strong> ${value}</div>`;\n          }\n        });\n        tooltip.style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 20 + \"px\").style(\"opacity\", 1).html(tooltipHTML);\n      }).on(\"mouseout\", function () {\n        d3.select(this).attr(\"stroke-width\", 0.5).attr(\"stroke\", \"#fff\");\n\n        // Hide tooltip\n        tooltip.style(\"opacity\", 0);\n      });\n\n      // Add base layer legend if we have a value property\n      if (valueProperty) {\n        addLegend(svg, colorScale, valueProperty, width, height, 'base');\n      }\n\n      // Sort overlays by z-index before drawing\n      const sortedOverlays = [...overlays].sort((a, b) => (a.zIndex || 0) - (b.zIndex || 0));\n\n      // Draw each overlay\n      sortedOverlays.forEach((overlay, index) => {\n        if (!overlay.visible || !overlay.data || !overlay.data.geoData) return;\n\n        // Add a group for this overlay\n        const overlayGroup = svg.append(\"g\").attr(\"class\", `overlay-layer-${overlay.id}`).style(\"opacity\", overlay.opacity);\n\n        // Process overlay features\n        const overlayFeatures = overlay.data.geoData.features.filter(feature => {\n          return feature.geometry && feature.geometry.coordinates;\n        });\n        if (overlayFeatures.length === 0) return;\n        const overlayGeoData = {\n          type: 'FeatureCollection',\n          features: overlayFeatures\n        };\n\n        // Find a value property for this overlay\n        let overlayValueProperty = null;\n        if (overlayFeatures.length > 0) {\n          const properties = overlayFeatures[0].properties;\n          const numericProps = Object.keys(properties).filter(key => typeof properties[key] === 'number' || typeof properties[key] === 'string' && !isNaN(parseFloat(properties[key])));\n          if (numericProps.length > 0) {\n            overlayValueProperty = numericProps[0];\n          }\n        }\n\n        // Create a color scale for this overlay\n        let overlayColorScale;\n        if (overlayValueProperty) {\n          // Get min/max values for color scale\n          const values = overlayFeatures.map(f => {\n            const val = f.properties[overlayValueProperty];\n            return typeof val === 'number' ? val : parseFloat(val);\n          }).filter(val => !isNaN(val));\n          const minValue = values.length > 0 ? Math.min(...values) : 0;\n          const maxValue = values.length > 0 ? Math.max(...values) : 1;\n\n          // Check the color scale type\n          const colorScheme = overlay.colorScale || 'viridis';\n          if (colorScheme === 'category10' || colorScheme === 'paired' || colorScheme === 'set3') {\n            // Categorical scales\n            if (colorScheme === 'category10') {\n              overlayColorScale = d3.scaleOrdinal(d3.schemeCategory10);\n            } else if (colorScheme === 'paired') {\n              overlayColorScale = d3.scaleOrdinal(d3.schemePaired);\n            } else {\n              overlayColorScale = d3.scaleOrdinal(d3.schemeSet3);\n            }\n          } else if (colorScheme === 'spectral' || colorScheme === 'rdylbu') {\n            // Diverging scales\n            overlayColorScale = d3.scaleSequential().domain([minValue, maxValue]).interpolator(colorScheme === 'spectral' ? d3.interpolateSpectral : d3.interpolateRdYlBu);\n          } else {\n            // Sequential scales\n            const colorInterpolator = getColorInterpolator(colorScheme);\n            overlayColorScale = d3.scaleSequential().domain([minValue, maxValue]).interpolator(colorInterpolator);\n          }\n        } else {\n          // Default categorical scale if no numeric property\n          overlayColorScale = d3.scaleOrdinal(d3.schemeSet2);\n        }\n\n        // Draw overlay features\n        overlayGroup.selectAll(\"path\").data(overlayFeatures).enter().append(\"path\").attr(\"d\", feature => {\n          try {\n            return path(feature);\n          } catch (e) {\n            console.warn(\"Error rendering overlay feature:\", e, feature);\n            return \"\";\n          }\n        }).attr(\"fill\", d => {\n          if (overlayValueProperty) {\n            const val = d.properties[overlayValueProperty];\n            const numericVal = typeof val === 'number' ? val : parseFloat(val);\n            return !isNaN(numericVal) ? overlayColorScale(numericVal) : \"#ccc\";\n          }\n          return \"#ff7f0e\"; // Default overlay color\n        }).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 0.5).on(\"mouseover\", function (event, d) {\n          d3.select(this).attr(\"stroke-width\", 1.5).attr(\"stroke\", \"#000\");\n\n          // Show tooltip with properties\n          let tooltipHTML = `<div style=\"font-weight:bold;border-bottom:1px solid #ccc;padding-bottom:3px;margin-bottom:3px\">\n              Overlay: ${d.properties.name || d.properties.NAME || overlayValueProperty + ': ' + d.properties[overlayValueProperty] || 'Feature'}</div>`;\n\n          // Add all properties to tooltip\n          Object.entries(d.properties).forEach(([key, value]) => {\n            if (key !== 'name' && key !== 'NAME') {\n              tooltipHTML += `<div><strong>${key}:</strong> ${value}</div>`;\n            }\n          });\n          tooltip.style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 20 + \"px\").style(\"opacity\", 1).html(tooltipHTML);\n        }).on(\"mouseout\", function () {\n          d3.select(this).attr(\"stroke-width\", 0.5).attr(\"stroke\", \"#fff\");\n\n          // Hide tooltip\n          tooltip.style(\"opacity\", 0);\n        });\n\n        // Add legend for this overlay if it has a value property\n        if (overlayValueProperty) {\n          addLegend(svg, overlayColorScale, overlayValueProperty, width, height, `overlay-${index}`, index + 1); // Position legends with offset\n        }\n      });\n    } catch (err) {\n      console.error('Error rendering map:', err);\n      svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", height / 2).attr(\"text-anchor\", \"middle\").text(\"Error rendering map. See console for details.\");\n    }\n  };\n\n  // Helper to get a color interpolator based on name\n  const getColorInterpolator = name => {\n    const interpolators = {\n      'viridis': d3.interpolateViridis,\n      'inferno': d3.interpolateInferno,\n      'plasma': d3.interpolatePlasma,\n      'magma': d3.interpolateMagma,\n      'blues': d3.interpolateBlues,\n      'greens': d3.interpolateGreens,\n      'reds': d3.interpolateReds,\n      'greys': d3.interpolateGreys,\n      'purples': d3.interpolatePurples,\n      'oranges': d3.interpolateOranges\n    };\n    return interpolators[name] || d3.interpolateViridis;\n  };\n\n  // Helper to add a legend to the map\n  const addLegend = (svg, colorScale, propertyName, width, height, id, offsetMultiplier = 0) => {\n    const legendWidth = 20;\n    const legendHeight = 150;\n    const legendMargin = 30;\n    const legendX = width - legendWidth - 20 - offsetMultiplier * (legendWidth + 20);\n    const legendY = (height - legendHeight) / 2;\n    const legend = svg.append(\"g\").attr(\"class\", `legend-${id}`).attr(\"transform\", `translate(${legendX}, ${legendY})`);\n\n    // Only add continuous legend for sequential scales\n    if (typeof colorScale.interpolator === 'function') {\n      const legendScale = d3.scaleLinear().domain(colorScale.domain()).range([legendHeight, 0]);\n      const legendAxis = d3.axisRight(legendScale).tickSize(legendWidth).ticks(5);\n      legend.append(\"g\").call(legendAxis);\n      const defs = svg.append(\"defs\");\n      const linearGradient = defs.append(\"linearGradient\").attr(\"id\", `linear-gradient-${id}`).attr(\"x1\", \"0%\").attr(\"y1\", \"100%\").attr(\"x2\", \"0%\").attr(\"y2\", \"0%\");\n      const stops = [0, 0.2, 0.4, 0.6, 0.8, 1];\n      stops.forEach(stop => {\n        linearGradient.append(\"stop\").attr(\"offset\", `${stop * 100}%`).attr(\"stop-color\", colorScale(colorScale.domain()[0] + stop * (colorScale.domain()[1] - colorScale.domain()[0])));\n      });\n      legend.append(\"rect\").attr(\"width\", legendWidth).attr(\"height\", legendHeight).style(\"fill\", `url(#linear-gradient-${id})`);\n    }\n\n    // Add legend title\n    legend.append(\"text\").attr(\"x\", legendWidth / 2).attr(\"y\", -10).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"12px\").text(propertyName);\n\n    // Add label to indicate which dataset this is\n    legend.append(\"text\").attr(\"x\", legendWidth / 2).attr(\"y\", legendHeight + 20).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"10px\").style(\"font-style\", \"italic\").text(id === 'base' ? 'Base layer' : `Overlay ${offsetMultiplier}`);\n  };\n\n  // Use effect to redraw map when base data or overlays change\n  useEffect(() => {\n    if (baseData && !loading) {\n      try {\n        drawMap();\n      } catch (e) {\n        console.error(\"Error rendering map:\", e);\n        setError(\"Error rendering map\");\n      }\n    }\n  }, [baseData, overlays, loading, renderMethod]);\n\n  // Draw chart based on base data\n  const drawChart = () => {\n    if (!baseData || !baseData.csvData || !chartRef.current) return;\n\n    // Chart drawing code (similar to original)\n    const chartContainer = d3.select(chartRef.current);\n    chartContainer.selectAll(\"*\").remove();\n    if (!baseData.csvData || baseData.csvData.length === 0) {\n      chartContainer.append(\"div\").attr(\"class\", \"no-data-message\").text(\"No chart data available to display\");\n      return;\n    }\n\n    // Find a numeric property to visualize\n    const firstRow = baseData.csvData[0];\n    const numericColumns = Object.keys(firstRow).filter(key => {\n      const val = firstRow[key];\n      return typeof val === 'number' || typeof val === 'string' && !isNaN(parseFloat(val));\n    });\n    if (numericColumns.length === 0) {\n      chartContainer.append(\"div\").attr(\"class\", \"no-data-message\").text(\"No numeric data available for charting\");\n      return;\n    }\n    const valueColumn = numericColumns[0];\n    const categoryColumn = Object.keys(firstRow).find(key => key !== valueColumn) || 'index';\n\n    // Prepare chart data\n    const chartData = baseData.csvData.map((row, index) => ({\n      category: categoryColumn === 'index' ? `Item ${index + 1}` : row[categoryColumn],\n      value: typeof row[valueColumn] === 'number' ? row[valueColumn] : parseFloat(row[valueColumn])\n    })).filter(d => !isNaN(d.value));\n\n    // Sort data by value for better visualization\n    chartData.sort((a, b) => b.value - a.value);\n\n    // Limit to top 10 for clarity\n    const limitedData = chartData.slice(0, 10);\n\n    // Set up chart dimensions\n    const width = chartContainer.node().getBoundingClientRect().width;\n    const height = 300;\n    const margin = {\n      top: 30,\n      right: 30,\n      bottom: 90,\n      left: 60\n    };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = chartContainer.append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n    const g = svg.append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n    // Create scales\n    const xScale = d3.scaleBand().domain(limitedData.map(d => d.category)).range([0, innerWidth]).padding(0.3);\n    const yScale = d3.scaleLinear().domain([0, d3.max(limitedData, d => d.value) * 1.1]).range([innerHeight, 0]);\n\n    // Create and style bars\n    g.selectAll(\".bar\").data(limitedData).enter().append(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => xScale(d.category)).attr(\"y\", d => yScale(d.value)).attr(\"width\", xScale.bandwidth()).attr(\"height\", d => innerHeight - yScale(d.value)).attr(\"fill\", \"#4299e1\").on(\"mouseover\", function (event, d) {\n      d3.select(this).attr(\"fill\", \"#3182ce\");\n\n      // Show tooltip\n      d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 1).style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 20 + \"px\").html(`<strong>${d.category}</strong>: ${d.value.toLocaleString()}`);\n    }).on(\"mouseout\", function () {\n      d3.select(this).attr(\"fill\", \"#4299e1\");\n      d3.selectAll(\".tooltip\").remove();\n    });\n\n    // Add axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n    g.append(\"g\").attr(\"transform\", `translate(0, ${innerHeight})`).call(xAxis).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\").attr(\"dx\", \"-.8em\").attr(\"dy\", \".15em\");\n    g.append(\"g\").call(yAxis);\n\n    // Add chart title\n    svg.append(\"text\").attr(\"x\", width / 2).attr(\"y\", 15).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"16px\").text(`${valueColumn} by ${categoryColumn === 'index' ? 'Item' : categoryColumn}`);\n  };\n\n  // Use effect to redraw chart when base data changes\n  useEffect(() => {\n    if (baseData && !loading) {\n      try {\n        drawChart();\n      } catch (e) {\n        console.error(\"Error rendering chart:\", e);\n      }\n    }\n  }, [baseData, loading]);\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Data Visualization Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataset-select\",\n          children: \"Base Dataset:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"dataset-select\",\n          value: selectedBaseDataset,\n          onChange: e => setSelectedBaseDataset(e.target.value),\n          children: availableDatasets.map(dataset => {\n            var _dataset$originalFile, _dataset$originalFile2, _dataset$originalFile3;\n            // Get a display name with original filename if available\n            let displayName = dataset.name || (dataset.id === 'default' ? 'Default Dataset' : dataset.id);\n\n            // Add original filename if available\n            const originalFile = ((_dataset$originalFile = dataset.originalFilenames) === null || _dataset$originalFile === void 0 ? void 0 : _dataset$originalFile.csv) || ((_dataset$originalFile2 = dataset.originalFilenames) === null || _dataset$originalFile2 === void 0 ? void 0 : _dataset$originalFile2.geojson) || ((_dataset$originalFile3 = dataset.originalFilenames) === null || _dataset$originalFile3 === void 0 ? void 0 : _dataset$originalFile3.shapefile);\n            if (originalFile) {\n              displayName += ` (${originalFile})`;\n            }\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: dataset.id,\n              children: displayName\n            }, dataset.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 9\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 17\n    }, this), baseData && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(LayerControls, {\n        availableOverlays: availableOverlays,\n        activeOverlays: overlays,\n        onToggleOverlay: toggleOverlay,\n        onUpdateOverlay: updateOverlay,\n        onAnalyzeLayer: analyzeLayer,\n        baseDatasetId: selectedBaseDataset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widget full-width\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Geographic Data Visualization\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 753,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"map-container\",\n          ref: mapRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 754,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 752,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widget-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"widget\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Base Data Trends\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            ref: chartRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"widget\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Base Data Metrics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 764,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metrics-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 767,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"metric-value\",\n                children: ((_baseData$metrics = baseData.metrics) === null || _baseData$metrics === void 0 ? void 0 : (_baseData$metrics$tot = _baseData$metrics.total) === null || _baseData$metrics$tot === void 0 ? void 0 : _baseData$metrics$tot.toLocaleString()) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 768,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Average\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 771,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"metric-value\",\n                children: ((_baseData$metrics2 = baseData.metrics) === null || _baseData$metrics2 === void 0 ? void 0 : (_baseData$metrics2$av = _baseData$metrics2.average) === null || _baseData$metrics2$av === void 0 ? void 0 : _baseData$metrics2$av.toFixed(2)) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 772,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Maximum\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 775,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"metric-value\",\n                children: ((_baseData$metrics3 = baseData.metrics) === null || _baseData$metrics3 === void 0 ? void 0 : (_baseData$metrics3$ma = _baseData$metrics3.maximum) === null || _baseData$metrics3$ma === void 0 ? void 0 : _baseData$metrics3$ma.toLocaleString()) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 776,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 774,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Minimum\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 779,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"metric-value\",\n                children: ((_baseData$metrics4 = baseData.metrics) === null || _baseData$metrics4 === void 0 ? void 0 : (_baseData$metrics4$mi = _baseData$metrics4.minimum) === null || _baseData$metrics4$mi === void 0 ? void 0 : _baseData$metrics4$mi.toLocaleString()) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 778,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 703,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"Y1xKR1lKJsqpdOpOprrBjotNs5w=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","d3","LayerControls","jsxDEV","_jsxDEV","Dashboard","_s","_baseData$metrics","_baseData$metrics$tot","_baseData$metrics2","_baseData$metrics2$av","_baseData$metrics3","_baseData$metrics3$ma","_baseData$metrics4","_baseData$metrics4$mi","baseData","setBaseData","selectedBaseDataset","setSelectedBaseDataset","overlays","setOverlays","availableOverlays","setAvailableOverlays","loading","setLoading","error","setError","availableDatasets","setAvailableDatasets","id","name","renderMethod","setRenderMethod","mapRef","chartRef","backendBaseUrl","fetchDatasets","response","fetch","ok","Error","status","datasets","json","updateAvailableOverlays","err","console","baseId","filteredOverlays","filter","dataset","fetchBaseData","datasetId","result","message","toggleOverlay","existingOverlayIndex","findIndex","o","data","visible","opacity","colorScale","zIndex","length","analyzeLayer","overlayId","operation","method","headers","body","JSON","stringify","baseLayerId","overlayLayerId","success","datasetsResponse","updateOverlay","updates","map","overlay","drawMap","geoData","current","mapContainer","select","selectAll","remove","features","append","attr","text","width","node","getBoundingClientRect","height","svg","baseGroup","tooltip","style","validFeatures","feature","geometry","coordinates","cleanedGeoData","type","projection","geoMercator","fitSize","path","geoPath","valueProperty","properties","numericProps","Object","keys","key","isNaN","parseFloat","scaleOrdinal","schemeCategory10","values","f","val","minValue","Math","min","maxValue","max","scaleSequential","domain","interpolator","interpolateViridis","enter","e","warn","d","numericVal","on","event","tooltipHTML","NAME","entries","forEach","value","pageX","pageY","html","addLegend","sortedOverlays","sort","a","b","index","overlayGroup","overlayFeatures","overlayGeoData","overlayValueProperty","overlayColorScale","colorScheme","schemePaired","schemeSet3","interpolateSpectral","interpolateRdYlBu","colorInterpolator","getColorInterpolator","schemeSet2","interpolators","interpolateInferno","interpolatePlasma","interpolateMagma","interpolateBlues","interpolateGreens","interpolateReds","interpolateGreys","interpolatePurples","interpolateOranges","propertyName","offsetMultiplier","legendWidth","legendHeight","legendMargin","legendX","legendY","legend","legendScale","scaleLinear","range","legendAxis","axisRight","tickSize","ticks","call","defs","linearGradient","stops","stop","drawChart","csvData","chartContainer","firstRow","numericColumns","valueColumn","categoryColumn","find","chartData","row","category","limitedData","slice","margin","top","right","bottom","left","innerWidth","innerHeight","g","xScale","scaleBand","padding","yScale","bandwidth","toLocaleString","xAxis","axisBottom","yAxis","axisLeft","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","onChange","target","_dataset$originalFile","_dataset$originalFile2","_dataset$originalFile3","displayName","originalFile","originalFilenames","csv","geojson","shapefile","activeOverlays","onToggleOverlay","onUpdateOverlay","onAnalyzeLayer","baseDatasetId","ref","metrics","total","average","toFixed","maximum","minimum","display","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/Dashboard.jsx"],"sourcesContent":["// Dashboard.jsx - Enhanced with base layer and overlay support\nimport React, { useState, useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport LayerControls from './LayerControls';\nimport './Dashboard.css';\n\nconst Dashboard = () => {\n  // Base dataset state\n  const [baseData, setBaseData] = useState(null);\n  const [selectedBaseDataset, setSelectedBaseDataset] = useState('default');\n\n  // Overlay datasets state\n  const [overlays, setOverlays] = useState([]);\n  const [availableOverlays, setAvailableOverlays] = useState([]);\n\n  // UI state\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [availableDatasets, setAvailableDatasets] = useState([\n    { id: 'default', name: 'Default Dataset' }\n  ]);\n  const [renderMethod, setRenderMethod] = useState('standard'); // 'standard' or 'simplified'\n\n  // Refs for visualization containers\n  const mapRef = useRef(null);\n  const chartRef = useRef(null);\n  const backendBaseUrl = 'http://localhost:8000';\n\n  // Fetch available datasets on component mount\n  useEffect(() => {\n    const fetchDatasets = async () => {\n      try {\n        const response = await fetch(`${backendBaseUrl}/api/datasets`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const datasets = await response.json();\n        setAvailableDatasets(datasets);\n\n        // Set available overlays (all datasets except the currently selected base)\n        updateAvailableOverlays(datasets, selectedBaseDataset);\n      } catch (err) {\n        console.error('Error fetching datasets:', err);\n      }\n    };\n\n    fetchDatasets();\n  }, []);\n\n  // Update available overlays when base dataset changes\n  const updateAvailableOverlays = (datasets, baseId) => {\n    const filteredOverlays = datasets.filter(dataset => dataset.id !== baseId);\n    setAvailableOverlays(filteredOverlays);\n  };\n\n  // Fetch base dataset when selection changes\n  useEffect(() => {\n    fetchBaseData(selectedBaseDataset);\n\n    // Update available overlays when base dataset changes\n    updateAvailableOverlays(availableDatasets, selectedBaseDataset);\n\n    // Clear current overlays when base dataset changes\n    setOverlays([]);\n  }, [selectedBaseDataset]);\n\n  // Fetch base dataset data\n  const fetchBaseData = async (datasetId) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${backendBaseUrl}/api/data/${datasetId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const result = await response.json();\n      setBaseData(result);\n      setLoading(false);\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n    }\n  };\n\n  // Toggle an overlay dataset\n  const toggleOverlay = async (datasetId) => {\n    // Check if the overlay is already added\n    const existingOverlayIndex = overlays.findIndex(o => o.id === datasetId);\n\n    if (existingOverlayIndex >= 0) {\n      // Remove the overlay if it's already added\n      setOverlays(overlays.filter(o => o.id !== datasetId));\n    } else {\n      // Add the overlay\n      try {\n        setLoading(true);\n        const response = await fetch(`${backendBaseUrl}/api/data/${datasetId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n\n        // Add to overlays with default settings\n        setOverlays([...overlays, {\n          id: datasetId,\n          data: result,\n          visible: true,\n          opacity: 0.7,\n          colorScale: 'viridis', // Default color scale\n          zIndex: overlays.length // Set z-index based on current overlay count\n        }]);\n        setLoading(false);\n      } catch (err) {\n        setError(`Error loading overlay: ${err.message}`);\n        setLoading(false);\n      }\n    }\n  };\n\n  // Analyze layers (spatial operations between base and overlay)\n  const analyzeLayer = async (overlayId, operation) => {\n    try {\n      setLoading(true);\n\n      const response = await fetch(`${backendBaseUrl}/api/layers/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          baseLayerId: selectedBaseDataset,\n          overlayLayerId: overlayId,\n          operation\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        // Fetch the new dataset\n        await fetchBaseData(result.datasetId);\n        // Update the available datasets list\n        const datasetsResponse = await fetch(`${backendBaseUrl}/api/datasets`);\n        if (datasetsResponse.ok) {\n          const datasets = await datasetsResponse.json();\n          setAvailableDatasets(datasets);\n\n          // Set the new analysis dataset as the base dataset\n          setSelectedBaseDataset(result.datasetId);\n        }\n        setLoading(false);\n      } else {\n        throw new Error(result.error || 'Analysis operation failed');\n      }\n    } catch (err) {\n      setError(`Error performing analysis: ${err.message}`);\n      setLoading(false);\n    }\n  };\n\n  // Update overlay settings\n  const updateOverlay = (datasetId, updates) => {\n    setOverlays(overlays.map(overlay =>\n      overlay.id === datasetId ? { ...overlay, ...updates } : overlay\n    ));\n  };\n\n  // Draw the base map and overlays\n  const drawMap = () => {\n    if (!baseData || !baseData.geoData || !mapRef.current) return;\n\n    const mapContainer = d3.select(mapRef.current);\n    mapContainer.selectAll(\"*\").remove();\n\n    // Check if we have valid GeoJSON data\n    if (!baseData.geoData.features || baseData.geoData.features.length === 0) {\n      mapContainer.append(\"div\")\n        .attr(\"class\", \"no-data-message\")\n        .text(\"No geographic data available to display\");\n      return;\n    }\n\n    const width = mapContainer.node().getBoundingClientRect().width;\n    const height = 500;\n\n    const svg = mapContainer\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    // Add a base group for the base layer\n    const baseGroup = svg.append(\"g\").attr(\"class\", \"base-layer\");\n\n    // Add a tooltip div\n    const tooltip = d3.select(\"body\").append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n    try {\n      // Clean the features to ensure valid coordinates\n      const validFeatures = baseData.geoData.features.filter(feature => {\n        if (!feature.geometry || !feature.geometry.coordinates) return false;\n\n        // Complex check for valid coordinates omitted for brevity (same as in original)\n        return true;\n      });\n\n      if (validFeatures.length === 0) {\n        svg.append(\"text\")\n          .attr(\"x\", width / 2)\n          .attr(\"y\", height / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .text(\"No valid geographic features found in the data\");\n        return;\n      }\n\n      const cleanedGeoData = {\n        type: 'FeatureCollection',\n        features: validFeatures\n      };\n\n      // Create a projection that works with the data\n      const projection = d3.geoMercator()\n        .fitSize([width, height], cleanedGeoData);\n\n      const path = d3.geoPath().projection(projection);\n\n      // Find a numeric property to use for coloring\n      let valueProperty = null;\n      if (cleanedGeoData.features.length > 0) {\n        const properties = cleanedGeoData.features[0].properties;\n        const numericProps = Object.keys(properties).filter(key =>\n          typeof properties[key] === 'number' ||\n          (typeof properties[key] === 'string' && !isNaN(parseFloat(properties[key])))\n        );\n\n        if (numericProps.length > 0) {\n          valueProperty = numericProps[0];\n        }\n      }\n\n      // Create a color scale for the base layer\n      let colorScale = d3.scaleOrdinal(d3.schemeCategory10); // Default categorical scale\n\n      if (valueProperty) {\n        // Get min/max values for color scale\n        const values = cleanedGeoData.features.map(f => {\n          const val = f.properties[valueProperty];\n          return typeof val === 'number' ? val : parseFloat(val);\n        }).filter(val => !isNaN(val));\n\n        const minValue = values.length > 0 ? Math.min(...values) : 0;\n        const maxValue = values.length > 0 ? Math.max(...values) : 1;\n\n        // Create a sequential color scale for numeric data\n        colorScale = d3.scaleSequential()\n          .domain([minValue, maxValue])\n          .interpolator(d3.interpolateViridis);\n      }\n\n      // Draw base layer\n      baseGroup.selectAll(\"path\")\n        .data(cleanedGeoData.features)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", feature => {\n          try {\n            return path(feature);\n          } catch (e) {\n            console.warn(\"Error rendering feature:\", e, feature);\n            return \"\";\n          }\n        })\n        .attr(\"fill\", d => {\n          if (valueProperty) {\n            const val = d.properties[valueProperty];\n            const numericVal = typeof val === 'number' ? val : parseFloat(val);\n            return !isNaN(numericVal) ? colorScale(numericVal) : \"#ccc\";\n          }\n          return \"#4682b4\"; // Default color if no value property\n        })\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"stroke-width\", 0.5)\n        .on(\"mouseover\", function (event, d) {\n          d3.select(this)\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke\", \"#000\");\n\n          // Show tooltip with properties\n          let tooltipHTML = `<div style=\"font-weight:bold;border-bottom:1px solid #ccc;padding-bottom:3px;margin-bottom:3px\">\n            ${d.properties.name || d.properties.NAME || valueProperty + ': ' + d.properties[valueProperty] || 'Feature'}</div>`;\n\n          // Add all properties to tooltip\n          Object.entries(d.properties).forEach(([key, value]) => {\n            if (key !== 'name' && key !== 'NAME') {\n              tooltipHTML += `<div><strong>${key}:</strong> ${value}</div>`;\n            }\n          });\n\n          tooltip\n            .style(\"left\", (event.pageX + 10) + \"px\")\n            .style(\"top\", (event.pageY - 20) + \"px\")\n            .style(\"opacity\", 1)\n            .html(tooltipHTML);\n        })\n        .on(\"mouseout\", function () {\n          d3.select(this)\n            .attr(\"stroke-width\", 0.5)\n            .attr(\"stroke\", \"#fff\");\n\n          // Hide tooltip\n          tooltip.style(\"opacity\", 0);\n        });\n\n      // Add base layer legend if we have a value property\n      if (valueProperty) {\n        addLegend(svg, colorScale, valueProperty, width, height, 'base');\n      }\n\n      // Sort overlays by z-index before drawing\n      const sortedOverlays = [...overlays].sort((a, b) => (a.zIndex || 0) - (b.zIndex || 0));\n\n      // Draw each overlay\n      sortedOverlays.forEach((overlay, index) => {\n        if (!overlay.visible || !overlay.data || !overlay.data.geoData) return;\n\n        // Add a group for this overlay\n        const overlayGroup = svg.append(\"g\")\n          .attr(\"class\", `overlay-layer-${overlay.id}`)\n          .style(\"opacity\", overlay.opacity);\n\n        // Process overlay features\n        const overlayFeatures = overlay.data.geoData.features.filter(feature => {\n          return feature.geometry && feature.geometry.coordinates;\n        });\n\n        if (overlayFeatures.length === 0) return;\n\n        const overlayGeoData = {\n          type: 'FeatureCollection',\n          features: overlayFeatures\n        };\n\n        // Find a value property for this overlay\n        let overlayValueProperty = null;\n        if (overlayFeatures.length > 0) {\n          const properties = overlayFeatures[0].properties;\n          const numericProps = Object.keys(properties).filter(key =>\n            typeof properties[key] === 'number' ||\n            (typeof properties[key] === 'string' && !isNaN(parseFloat(properties[key])))\n          );\n\n          if (numericProps.length > 0) {\n            overlayValueProperty = numericProps[0];\n          }\n        }\n\n        // Create a color scale for this overlay\n        let overlayColorScale;\n\n        if (overlayValueProperty) {\n          // Get min/max values for color scale\n          const values = overlayFeatures.map(f => {\n            const val = f.properties[overlayValueProperty];\n            return typeof val === 'number' ? val : parseFloat(val);\n          }).filter(val => !isNaN(val));\n\n          const minValue = values.length > 0 ? Math.min(...values) : 0;\n          const maxValue = values.length > 0 ? Math.max(...values) : 1;\n\n          // Check the color scale type\n          const colorScheme = overlay.colorScale || 'viridis';\n\n          if (colorScheme === 'category10' || colorScheme === 'paired' || colorScheme === 'set3') {\n            // Categorical scales\n            if (colorScheme === 'category10') {\n              overlayColorScale = d3.scaleOrdinal(d3.schemeCategory10);\n            } else if (colorScheme === 'paired') {\n              overlayColorScale = d3.scaleOrdinal(d3.schemePaired);\n            } else {\n              overlayColorScale = d3.scaleOrdinal(d3.schemeSet3);\n            }\n          } else if (colorScheme === 'spectral' || colorScheme === 'rdylbu') {\n            // Diverging scales\n            overlayColorScale = d3.scaleSequential()\n              .domain([minValue, maxValue])\n              .interpolator(colorScheme === 'spectral' ? d3.interpolateSpectral : d3.interpolateRdYlBu);\n          } else {\n            // Sequential scales\n            const colorInterpolator = getColorInterpolator(colorScheme);\n            overlayColorScale = d3.scaleSequential()\n              .domain([minValue, maxValue])\n              .interpolator(colorInterpolator);\n          }\n        } else {\n          // Default categorical scale if no numeric property\n          overlayColorScale = d3.scaleOrdinal(d3.schemeSet2);\n        }\n\n        // Draw overlay features\n        overlayGroup.selectAll(\"path\")\n          .data(overlayFeatures)\n          .enter()\n          .append(\"path\")\n          .attr(\"d\", feature => {\n            try {\n              return path(feature);\n            } catch (e) {\n              console.warn(\"Error rendering overlay feature:\", e, feature);\n              return \"\";\n            }\n          })\n          .attr(\"fill\", d => {\n            if (overlayValueProperty) {\n              const val = d.properties[overlayValueProperty];\n              const numericVal = typeof val === 'number' ? val : parseFloat(val);\n              return !isNaN(numericVal) ? overlayColorScale(numericVal) : \"#ccc\";\n            }\n            return \"#ff7f0e\"; // Default overlay color\n          })\n          .attr(\"stroke\", \"#fff\")\n          .attr(\"stroke-width\", 0.5)\n          .on(\"mouseover\", function (event, d) {\n            d3.select(this)\n              .attr(\"stroke-width\", 1.5)\n              .attr(\"stroke\", \"#000\");\n\n            // Show tooltip with properties\n            let tooltipHTML = `<div style=\"font-weight:bold;border-bottom:1px solid #ccc;padding-bottom:3px;margin-bottom:3px\">\n              Overlay: ${d.properties.name || d.properties.NAME || overlayValueProperty + ': ' + d.properties[overlayValueProperty] || 'Feature'}</div>`;\n\n            // Add all properties to tooltip\n            Object.entries(d.properties).forEach(([key, value]) => {\n              if (key !== 'name' && key !== 'NAME') {\n                tooltipHTML += `<div><strong>${key}:</strong> ${value}</div>`;\n              }\n            });\n\n            tooltip\n              .style(\"left\", (event.pageX + 10) + \"px\")\n              .style(\"top\", (event.pageY - 20) + \"px\")\n              .style(\"opacity\", 1)\n              .html(tooltipHTML);\n          })\n          .on(\"mouseout\", function () {\n            d3.select(this)\n              .attr(\"stroke-width\", 0.5)\n              .attr(\"stroke\", \"#fff\");\n\n            // Hide tooltip\n            tooltip.style(\"opacity\", 0);\n          });\n\n        // Add legend for this overlay if it has a value property\n        if (overlayValueProperty) {\n          addLegend(svg, overlayColorScale, overlayValueProperty, width, height, `overlay-${index}`,\n            index + 1); // Position legends with offset\n        }\n      });\n    } catch (err) {\n      console.error('Error rendering map:', err);\n      svg.append(\"text\")\n        .attr(\"x\", width / 2)\n        .attr(\"y\", height / 2)\n        .attr(\"text-anchor\", \"middle\")\n        .text(\"Error rendering map. See console for details.\");\n    }\n  };\n\n  // Helper to get a color interpolator based on name\n  const getColorInterpolator = (name) => {\n    const interpolators = {\n      'viridis': d3.interpolateViridis,\n      'inferno': d3.interpolateInferno,\n      'plasma': d3.interpolatePlasma,\n      'magma': d3.interpolateMagma,\n      'blues': d3.interpolateBlues,\n      'greens': d3.interpolateGreens,\n      'reds': d3.interpolateReds,\n      'greys': d3.interpolateGreys,\n      'purples': d3.interpolatePurples,\n      'oranges': d3.interpolateOranges\n    };\n\n    return interpolators[name] || d3.interpolateViridis;\n  };\n\n  // Helper to add a legend to the map\n  const addLegend = (svg, colorScale, propertyName, width, height, id, offsetMultiplier = 0) => {\n    const legendWidth = 20;\n    const legendHeight = 150;\n    const legendMargin = 30;\n    const legendX = width - legendWidth - 20 - (offsetMultiplier * (legendWidth + 20));\n    const legendY = (height - legendHeight) / 2;\n\n    const legend = svg.append(\"g\")\n      .attr(\"class\", `legend-${id}`)\n      .attr(\"transform\", `translate(${legendX}, ${legendY})`);\n\n    // Only add continuous legend for sequential scales\n    if (typeof colorScale.interpolator === 'function') {\n      const legendScale = d3.scaleLinear()\n        .domain(colorScale.domain())\n        .range([legendHeight, 0]);\n\n      const legendAxis = d3.axisRight(legendScale)\n        .tickSize(legendWidth)\n        .ticks(5);\n\n      legend.append(\"g\")\n        .call(legendAxis);\n\n      const defs = svg.append(\"defs\");\n      const linearGradient = defs.append(\"linearGradient\")\n        .attr(\"id\", `linear-gradient-${id}`)\n        .attr(\"x1\", \"0%\")\n        .attr(\"y1\", \"100%\")\n        .attr(\"x2\", \"0%\")\n        .attr(\"y2\", \"0%\");\n\n      const stops = [0, 0.2, 0.4, 0.6, 0.8, 1];\n      stops.forEach(stop => {\n        linearGradient.append(\"stop\")\n          .attr(\"offset\", `${stop * 100}%`)\n          .attr(\"stop-color\", colorScale(colorScale.domain()[0] + stop * (colorScale.domain()[1] - colorScale.domain()[0])));\n      });\n\n      legend.append(\"rect\")\n        .attr(\"width\", legendWidth)\n        .attr(\"height\", legendHeight)\n        .style(\"fill\", `url(#linear-gradient-${id})`);\n    }\n\n    // Add legend title\n    legend.append(\"text\")\n      .attr(\"x\", legendWidth / 2)\n      .attr(\"y\", -10)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"12px\")\n      .text(propertyName);\n\n    // Add label to indicate which dataset this is\n    legend.append(\"text\")\n      .attr(\"x\", legendWidth / 2)\n      .attr(\"y\", legendHeight + 20)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"10px\")\n      .style(\"font-style\", \"italic\")\n      .text(id === 'base' ? 'Base layer' : `Overlay ${offsetMultiplier}`);\n  };\n\n  // Use effect to redraw map when base data or overlays change\n  useEffect(() => {\n    if (baseData && !loading) {\n      try {\n        drawMap();\n      } catch (e) {\n        console.error(\"Error rendering map:\", e);\n        setError(\"Error rendering map\");\n      }\n    }\n  }, [baseData, overlays, loading, renderMethod]);\n\n  // Draw chart based on base data\n  const drawChart = () => {\n    if (!baseData || !baseData.csvData || !chartRef.current) return;\n\n    // Chart drawing code (similar to original)\n    const chartContainer = d3.select(chartRef.current);\n    chartContainer.selectAll(\"*\").remove();\n\n    if (!baseData.csvData || baseData.csvData.length === 0) {\n      chartContainer.append(\"div\")\n        .attr(\"class\", \"no-data-message\")\n        .text(\"No chart data available to display\");\n      return;\n    }\n\n    // Find a numeric property to visualize\n    const firstRow = baseData.csvData[0];\n    const numericColumns = Object.keys(firstRow).filter(key => {\n      const val = firstRow[key];\n      return typeof val === 'number' || (typeof val === 'string' && !isNaN(parseFloat(val)));\n    });\n\n    if (numericColumns.length === 0) {\n      chartContainer.append(\"div\")\n        .attr(\"class\", \"no-data-message\")\n        .text(\"No numeric data available for charting\");\n      return;\n    }\n\n    const valueColumn = numericColumns[0];\n    const categoryColumn = Object.keys(firstRow).find(key => key !== valueColumn) || 'index';\n\n    // Prepare chart data\n    const chartData = baseData.csvData.map((row, index) => ({\n      category: categoryColumn === 'index' ? `Item ${index + 1}` : row[categoryColumn],\n      value: typeof row[valueColumn] === 'number' ? row[valueColumn] : parseFloat(row[valueColumn])\n    })).filter(d => !isNaN(d.value));\n\n    // Sort data by value for better visualization\n    chartData.sort((a, b) => b.value - a.value);\n\n    // Limit to top 10 for clarity\n    const limitedData = chartData.slice(0, 10);\n\n    // Set up chart dimensions\n    const width = chartContainer.node().getBoundingClientRect().width;\n    const height = 300;\n    const margin = { top: 30, right: 30, bottom: 90, left: 60 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = chartContainer\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    const g = svg.append(\"g\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n    // Create scales\n    const xScale = d3.scaleBand()\n      .domain(limitedData.map(d => d.category))\n      .range([0, innerWidth])\n      .padding(0.3);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(limitedData, d => d.value) * 1.1])\n      .range([innerHeight, 0]);\n\n    // Create and style bars\n    g.selectAll(\".bar\")\n      .data(limitedData)\n      .enter()\n      .append(\"rect\")\n      .attr(\"class\", \"bar\")\n      .attr(\"x\", d => xScale(d.category))\n      .attr(\"y\", d => yScale(d.value))\n      .attr(\"width\", xScale.bandwidth())\n      .attr(\"height\", d => innerHeight - yScale(d.value))\n      .attr(\"fill\", \"#4299e1\")\n      .on(\"mouseover\", function (event, d) {\n        d3.select(this).attr(\"fill\", \"#3182ce\");\n\n        // Show tooltip\n        d3.select(\"body\").append(\"div\")\n          .attr(\"class\", \"tooltip\")\n          .style(\"opacity\", 1)\n          .style(\"left\", (event.pageX + 10) + \"px\")\n          .style(\"top\", (event.pageY - 20) + \"px\")\n          .html(`<strong>${d.category}</strong>: ${d.value.toLocaleString()}`);\n      })\n      .on(\"mouseout\", function () {\n        d3.select(this).attr(\"fill\", \"#4299e1\");\n        d3.selectAll(\".tooltip\").remove();\n      });\n\n    // Add axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    g.append(\"g\")\n      .attr(\"transform\", `translate(0, ${innerHeight})`)\n      .call(xAxis)\n      .selectAll(\"text\")\n      .attr(\"transform\", \"rotate(-45)\")\n      .style(\"text-anchor\", \"end\")\n      .attr(\"dx\", \"-.8em\")\n      .attr(\"dy\", \".15em\");\n\n    g.append(\"g\")\n      .call(yAxis);\n\n    // Add chart title\n    svg.append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", 15)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"16px\")\n      .text(`${valueColumn} by ${categoryColumn === 'index' ? 'Item' : categoryColumn}`);\n  };\n\n  // Use effect to redraw chart when base data changes\n  useEffect(() => {\n    if (baseData && !loading) {\n      try {\n        drawChart();\n      } catch (e) {\n        console.error(\"Error rendering chart:\", e);\n      }\n    }\n  }, [baseData, loading]);\n\n  // Render the component\n  return (\n    <div className=\"dashboard-container\">\n      <header className=\"dashboard-header\">\n        <h1>Data Visualization Dashboard</h1>\n        <div className=\"controls\">\n  <label htmlFor=\"dataset-select\">Base Dataset:</label>\n  <select \n    id=\"dataset-select\" \n    value={selectedBaseDataset}\n    onChange={(e) => setSelectedBaseDataset(e.target.value)}\n  >\n    {availableDatasets.map(dataset => {\n      // Get a display name with original filename if available\n      let displayName = dataset.name || (dataset.id === 'default' ? 'Default Dataset' : dataset.id);\n      \n      // Add original filename if available\n      const originalFile = \n        dataset.originalFilenames?.csv || \n        dataset.originalFilenames?.geojson || \n        dataset.originalFilenames?.shapefile;\n        \n      if (originalFile) {\n        displayName += ` (${originalFile})`;\n      }\n      \n      return (\n        <option key={dataset.id} value={dataset.id}>\n          {displayName}\n        </option>\n      );\n    })}\n  </select>\n</div>\n      </header>\n\n      {loading && <div className=\"loading\">Loading data...</div>}\n      {error && <div className=\"error\">Error: {error}</div>}\n\n      {baseData && !loading && (\n        <div className=\"dashboard-content\">\n          {/* Use the LayerControls component instead of inline controls */}\n          <LayerControls\n            availableOverlays={availableOverlays}\n            activeOverlays={overlays}\n            onToggleOverlay={toggleOverlay}\n            onUpdateOverlay={updateOverlay}\n            onAnalyzeLayer={analyzeLayer}\n            baseDatasetId={selectedBaseDataset}\n          />\n\n          <div className=\"widget full-width\">\n            <h2>Geographic Data Visualization</h2>\n            <div className=\"map-container\" ref={mapRef}></div>\n          </div>\n\n          <div className=\"widget-row\">\n            <div className=\"widget\">\n              <h2>Base Data Trends</h2>\n              <div className=\"chart-container\" ref={chartRef}></div>\n            </div>\n\n            <div className=\"widget\">\n              <h2>Base Data Metrics</h2>\n              <div className=\"metrics-container\">\n                <div className=\"metric-card\">\n                  <h3>Total</h3>\n                  <p className=\"metric-value\">{baseData.metrics?.total?.toLocaleString() || 'N/A'}</p>\n                </div>\n                <div className=\"metric-card\">\n                  <h3>Average</h3>\n                  <p className=\"metric-value\">{baseData.metrics?.average?.toFixed(2) || 'N/A'}</p>\n                </div>\n                <div className=\"metric-card\">\n                  <h3>Maximum</h3>\n                  <p className=\"metric-value\">{baseData.metrics?.maximum?.toLocaleString() || 'N/A'}</p>\n                </div>\n                <div className=\"metric-card\">\n                  <h3>Minimum</h3>\n                  <p className=\"metric-value\">{baseData.metrics?.minimum?.toLocaleString() || 'N/A'}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"tooltip\" style={{ display: 'none' }}></div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,iBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA;EACtB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACmB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpB,QAAQ,CAAC,SAAS,CAAC;;EAEzE;EACA,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACuB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAE9D;EACA,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC2B,KAAK,EAAEC,QAAQ,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC6B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG9B,QAAQ,CAAC,CACzD;IAAE+B,EAAE,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAkB,CAAC,CAC3C,CAAC;EACF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;;EAE9D;EACA,MAAMmC,MAAM,GAAGjC,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMkC,QAAQ,GAAGlC,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMmC,cAAc,GAAG,uBAAuB;;EAE9C;EACApC,SAAS,CAAC,MAAM;IACd,MAAMqC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,cAAc,eAAe,CAAC;QAC9D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC3D;QACA,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACtCf,oBAAoB,CAACc,QAAQ,CAAC;;QAE9B;QACAE,uBAAuB,CAACF,QAAQ,EAAEzB,mBAAmB,CAAC;MACxD,CAAC,CAAC,OAAO4B,GAAG,EAAE;QACZC,OAAO,CAACrB,KAAK,CAAC,0BAA0B,EAAEoB,GAAG,CAAC;MAChD;IACF,CAAC;IAEDT,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,uBAAuB,GAAGA,CAACF,QAAQ,EAAEK,MAAM,KAAK;IACpD,MAAMC,gBAAgB,GAAGN,QAAQ,CAACO,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACrB,EAAE,KAAKkB,MAAM,CAAC;IAC1EzB,oBAAoB,CAAC0B,gBAAgB,CAAC;EACxC,CAAC;;EAED;EACAjD,SAAS,CAAC,MAAM;IACdoD,aAAa,CAAClC,mBAAmB,CAAC;;IAElC;IACA2B,uBAAuB,CAACjB,iBAAiB,EAAEV,mBAAmB,CAAC;;IAE/D;IACAG,WAAW,CAAC,EAAE,CAAC;EACjB,CAAC,EAAE,CAACH,mBAAmB,CAAC,CAAC;;EAEzB;EACA,MAAMkC,aAAa,GAAG,MAAOC,SAAS,IAAK;IACzC5B,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,cAAc,aAAaiB,SAAS,EAAE,CAAC;MACvE,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,MAAMY,MAAM,GAAG,MAAMhB,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpC3B,WAAW,CAACqC,MAAM,CAAC;MACnB7B,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOqB,GAAG,EAAE;MACZnB,QAAQ,CAACmB,GAAG,CAACS,OAAO,CAAC;MACrB9B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAM+B,aAAa,GAAG,MAAOH,SAAS,IAAK;IACzC;IACA,MAAMI,oBAAoB,GAAGrC,QAAQ,CAACsC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAKuB,SAAS,CAAC;IAExE,IAAII,oBAAoB,IAAI,CAAC,EAAE;MAC7B;MACApC,WAAW,CAACD,QAAQ,CAAC8B,MAAM,CAACS,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAKuB,SAAS,CAAC,CAAC;IACvD,CAAC,MAAM;MACL;MACA,IAAI;QACF5B,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,cAAc,aAAaiB,SAAS,EAAE,CAAC;QACvE,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC3D;QACA,MAAMY,MAAM,GAAG,MAAMhB,QAAQ,CAACM,IAAI,CAAC,CAAC;;QAEpC;QACAvB,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;UACxBU,EAAE,EAAEuB,SAAS;UACbO,IAAI,EAAEN,MAAM;UACZO,OAAO,EAAE,IAAI;UACbC,OAAO,EAAE,GAAG;UACZC,UAAU,EAAE,SAAS;UAAE;UACvBC,MAAM,EAAE5C,QAAQ,CAAC6C,MAAM,CAAC;QAC1B,CAAC,CAAC,CAAC;QACHxC,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOqB,GAAG,EAAE;QACZnB,QAAQ,CAAC,0BAA0BmB,GAAG,CAACS,OAAO,EAAE,CAAC;QACjD9B,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;EACF,CAAC;;EAED;EACA,MAAMyC,YAAY,GAAG,MAAAA,CAAOC,SAAS,EAAEC,SAAS,KAAK;IACnD,IAAI;MACF3C,UAAU,CAAC,IAAI,CAAC;MAEhB,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,cAAc,qBAAqB,EAAE;QACnEiC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,WAAW,EAAExD,mBAAmB;UAChCyD,cAAc,EAAER,SAAS;UACzBC;QACF,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAAC9B,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMY,MAAM,GAAG,MAAMhB,QAAQ,CAACM,IAAI,CAAC,CAAC;MAEpC,IAAIU,MAAM,CAACsB,OAAO,EAAE;QAClB;QACA,MAAMxB,aAAa,CAACE,MAAM,CAACD,SAAS,CAAC;QACrC;QACA,MAAMwB,gBAAgB,GAAG,MAAMtC,KAAK,CAAC,GAAGH,cAAc,eAAe,CAAC;QACtE,IAAIyC,gBAAgB,CAACrC,EAAE,EAAE;UACvB,MAAMG,QAAQ,GAAG,MAAMkC,gBAAgB,CAACjC,IAAI,CAAC,CAAC;UAC9Cf,oBAAoB,CAACc,QAAQ,CAAC;;UAE9B;UACAxB,sBAAsB,CAACmC,MAAM,CAACD,SAAS,CAAC;QAC1C;QACA5B,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,MAAM;QACL,MAAM,IAAIgB,KAAK,CAACa,MAAM,CAAC5B,KAAK,IAAI,2BAA2B,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOoB,GAAG,EAAE;MACZnB,QAAQ,CAAC,8BAA8BmB,GAAG,CAACS,OAAO,EAAE,CAAC;MACrD9B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMqD,aAAa,GAAGA,CAACzB,SAAS,EAAE0B,OAAO,KAAK;IAC5C1D,WAAW,CAACD,QAAQ,CAAC4D,GAAG,CAACC,OAAO,IAC9BA,OAAO,CAACnD,EAAE,KAAKuB,SAAS,GAAG;MAAE,GAAG4B,OAAO;MAAE,GAAGF;IAAQ,CAAC,GAAGE,OAC1D,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAI,CAAClE,QAAQ,IAAI,CAACA,QAAQ,CAACmE,OAAO,IAAI,CAACjD,MAAM,CAACkD,OAAO,EAAE;IAEvD,MAAMC,YAAY,GAAGnF,EAAE,CAACoF,MAAM,CAACpD,MAAM,CAACkD,OAAO,CAAC;IAC9CC,YAAY,CAACE,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;;IAEpC;IACA,IAAI,CAACxE,QAAQ,CAACmE,OAAO,CAACM,QAAQ,IAAIzE,QAAQ,CAACmE,OAAO,CAACM,QAAQ,CAACxB,MAAM,KAAK,CAAC,EAAE;MACxEoB,YAAY,CAACK,MAAM,CAAC,KAAK,CAAC,CACvBC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAChCC,IAAI,CAAC,yCAAyC,CAAC;MAClD;IACF;IAEA,MAAMC,KAAK,GAAGR,YAAY,CAACS,IAAI,CAAC,CAAC,CAACC,qBAAqB,CAAC,CAAC,CAACF,KAAK;IAC/D,MAAMG,MAAM,GAAG,GAAG;IAElB,MAAMC,GAAG,GAAGZ,YAAY,CACrBK,MAAM,CAAC,KAAK,CAAC,CACbC,IAAI,CAAC,OAAO,EAAEE,KAAK,CAAC,CACpBF,IAAI,CAAC,QAAQ,EAAEK,MAAM,CAAC;;IAEzB;IACA,MAAME,SAAS,GAAGD,GAAG,CAACP,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC;;IAE7D;IACA,MAAMQ,OAAO,GAAGjG,EAAE,CAACoF,MAAM,CAAC,MAAM,CAAC,CAACI,MAAM,CAAC,KAAK,CAAC,CAC5CC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBS,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;IAEtB,IAAI;MACF;MACA,MAAMC,aAAa,GAAGrF,QAAQ,CAACmE,OAAO,CAACM,QAAQ,CAACvC,MAAM,CAACoD,OAAO,IAAI;QAChE,IAAI,CAACA,OAAO,CAACC,QAAQ,IAAI,CAACD,OAAO,CAACC,QAAQ,CAACC,WAAW,EAAE,OAAO,KAAK;;QAEpE;QACA,OAAO,IAAI;MACb,CAAC,CAAC;MAEF,IAAIH,aAAa,CAACpC,MAAM,KAAK,CAAC,EAAE;QAC9BgC,GAAG,CAACP,MAAM,CAAC,MAAM,CAAC,CACfC,IAAI,CAAC,GAAG,EAAEE,KAAK,GAAG,CAAC,CAAC,CACpBF,IAAI,CAAC,GAAG,EAAEK,MAAM,GAAG,CAAC,CAAC,CACrBL,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BC,IAAI,CAAC,gDAAgD,CAAC;QACzD;MACF;MAEA,MAAMa,cAAc,GAAG;QACrBC,IAAI,EAAE,mBAAmB;QACzBjB,QAAQ,EAAEY;MACZ,CAAC;;MAED;MACA,MAAMM,UAAU,GAAGzG,EAAE,CAAC0G,WAAW,CAAC,CAAC,CAChCC,OAAO,CAAC,CAAChB,KAAK,EAAEG,MAAM,CAAC,EAAES,cAAc,CAAC;MAE3C,MAAMK,IAAI,GAAG5G,EAAE,CAAC6G,OAAO,CAAC,CAAC,CAACJ,UAAU,CAACA,UAAU,CAAC;;MAEhD;MACA,IAAIK,aAAa,GAAG,IAAI;MACxB,IAAIP,cAAc,CAAChB,QAAQ,CAACxB,MAAM,GAAG,CAAC,EAAE;QACtC,MAAMgD,UAAU,GAAGR,cAAc,CAAChB,QAAQ,CAAC,CAAC,CAAC,CAACwB,UAAU;QACxD,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC,CAAC/D,MAAM,CAACmE,GAAG,IACrD,OAAOJ,UAAU,CAACI,GAAG,CAAC,KAAK,QAAQ,IAClC,OAAOJ,UAAU,CAACI,GAAG,CAAC,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACC,UAAU,CAACN,UAAU,CAACI,GAAG,CAAC,CAAC,CAC5E,CAAC;QAED,IAAIH,YAAY,CAACjD,MAAM,GAAG,CAAC,EAAE;UAC3B+C,aAAa,GAAGE,YAAY,CAAC,CAAC,CAAC;QACjC;MACF;;MAEA;MACA,IAAInD,UAAU,GAAG7D,EAAE,CAACsH,YAAY,CAACtH,EAAE,CAACuH,gBAAgB,CAAC,CAAC,CAAC;;MAEvD,IAAIT,aAAa,EAAE;QACjB;QACA,MAAMU,MAAM,GAAGjB,cAAc,CAAChB,QAAQ,CAACT,GAAG,CAAC2C,CAAC,IAAI;UAC9C,MAAMC,GAAG,GAAGD,CAAC,CAACV,UAAU,CAACD,aAAa,CAAC;UACvC,OAAO,OAAOY,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGL,UAAU,CAACK,GAAG,CAAC;QACxD,CAAC,CAAC,CAAC1E,MAAM,CAAC0E,GAAG,IAAI,CAACN,KAAK,CAACM,GAAG,CAAC,CAAC;QAE7B,MAAMC,QAAQ,GAAGH,MAAM,CAACzD,MAAM,GAAG,CAAC,GAAG6D,IAAI,CAACC,GAAG,CAAC,GAAGL,MAAM,CAAC,GAAG,CAAC;QAC5D,MAAMM,QAAQ,GAAGN,MAAM,CAACzD,MAAM,GAAG,CAAC,GAAG6D,IAAI,CAACG,GAAG,CAAC,GAAGP,MAAM,CAAC,GAAG,CAAC;;QAE5D;QACA3D,UAAU,GAAG7D,EAAE,CAACgI,eAAe,CAAC,CAAC,CAC9BC,MAAM,CAAC,CAACN,QAAQ,EAAEG,QAAQ,CAAC,CAAC,CAC5BI,YAAY,CAAClI,EAAE,CAACmI,kBAAkB,CAAC;MACxC;;MAEA;MACAnC,SAAS,CAACX,SAAS,CAAC,MAAM,CAAC,CACxB3B,IAAI,CAAC6C,cAAc,CAAChB,QAAQ,CAAC,CAC7B6C,KAAK,CAAC,CAAC,CACP5C,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,GAAG,EAAEW,OAAO,IAAI;QACpB,IAAI;UACF,OAAOQ,IAAI,CAACR,OAAO,CAAC;QACtB,CAAC,CAAC,OAAOiC,CAAC,EAAE;UACVxF,OAAO,CAACyF,IAAI,CAAC,0BAA0B,EAAED,CAAC,EAAEjC,OAAO,CAAC;UACpD,OAAO,EAAE;QACX;MACF,CAAC,CAAC,CACDX,IAAI,CAAC,MAAM,EAAE8C,CAAC,IAAI;QACjB,IAAIzB,aAAa,EAAE;UACjB,MAAMY,GAAG,GAAGa,CAAC,CAACxB,UAAU,CAACD,aAAa,CAAC;UACvC,MAAM0B,UAAU,GAAG,OAAOd,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGL,UAAU,CAACK,GAAG,CAAC;UAClE,OAAO,CAACN,KAAK,CAACoB,UAAU,CAAC,GAAG3E,UAAU,CAAC2E,UAAU,CAAC,GAAG,MAAM;QAC7D;QACA,OAAO,SAAS,CAAC,CAAC;MACpB,CAAC,CAAC,CACD/C,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBgD,EAAE,CAAC,WAAW,EAAE,UAAUC,KAAK,EAAEH,CAAC,EAAE;QACnCvI,EAAE,CAACoF,MAAM,CAAC,IAAI,CAAC,CACZK,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;;QAEzB;QACA,IAAIkD,WAAW,GAAG;AAC5B,cAAcJ,CAAC,CAACxB,UAAU,CAAClF,IAAI,IAAI0G,CAAC,CAACxB,UAAU,CAAC6B,IAAI,IAAI9B,aAAa,GAAG,IAAI,GAAGyB,CAAC,CAACxB,UAAU,CAACD,aAAa,CAAC,IAAI,SAAS,QAAQ;;QAErH;QACAG,MAAM,CAAC4B,OAAO,CAACN,CAAC,CAACxB,UAAU,CAAC,CAAC+B,OAAO,CAAC,CAAC,CAAC3B,GAAG,EAAE4B,KAAK,CAAC,KAAK;UACrD,IAAI5B,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,MAAM,EAAE;YACpCwB,WAAW,IAAI,gBAAgBxB,GAAG,cAAc4B,KAAK,QAAQ;UAC/D;QACF,CAAC,CAAC;QAEF9C,OAAO,CACJC,KAAK,CAAC,MAAM,EAAGwC,KAAK,CAACM,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC,CACxC9C,KAAK,CAAC,KAAK,EAAGwC,KAAK,CAACO,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC,CACvC/C,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBgD,IAAI,CAACP,WAAW,CAAC;MACtB,CAAC,CAAC,CACDF,EAAE,CAAC,UAAU,EAAE,YAAY;QAC1BzI,EAAE,CAACoF,MAAM,CAAC,IAAI,CAAC,CACZK,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;;QAEzB;QACAQ,OAAO,CAACC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;MAC7B,CAAC,CAAC;;MAEJ;MACA,IAAIY,aAAa,EAAE;QACjBqC,SAAS,CAACpD,GAAG,EAAElC,UAAU,EAAEiD,aAAa,EAAEnB,KAAK,EAAEG,MAAM,EAAE,MAAM,CAAC;MAClE;;MAEA;MACA,MAAMsD,cAAc,GAAG,CAAC,GAAGlI,QAAQ,CAAC,CAACmI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,CAACD,CAAC,CAACxF,MAAM,IAAI,CAAC,KAAKyF,CAAC,CAACzF,MAAM,IAAI,CAAC,CAAC,CAAC;;MAEtF;MACAsF,cAAc,CAACN,OAAO,CAAC,CAAC/D,OAAO,EAAEyE,KAAK,KAAK;QACzC,IAAI,CAACzE,OAAO,CAACpB,OAAO,IAAI,CAACoB,OAAO,CAACrB,IAAI,IAAI,CAACqB,OAAO,CAACrB,IAAI,CAACuB,OAAO,EAAE;;QAEhE;QACA,MAAMwE,YAAY,GAAG1D,GAAG,CAACP,MAAM,CAAC,GAAG,CAAC,CACjCC,IAAI,CAAC,OAAO,EAAE,iBAAiBV,OAAO,CAACnD,EAAE,EAAE,CAAC,CAC5CsE,KAAK,CAAC,SAAS,EAAEnB,OAAO,CAACnB,OAAO,CAAC;;QAEpC;QACA,MAAM8F,eAAe,GAAG3E,OAAO,CAACrB,IAAI,CAACuB,OAAO,CAACM,QAAQ,CAACvC,MAAM,CAACoD,OAAO,IAAI;UACtE,OAAOA,OAAO,CAACC,QAAQ,IAAID,OAAO,CAACC,QAAQ,CAACC,WAAW;QACzD,CAAC,CAAC;QAEF,IAAIoD,eAAe,CAAC3F,MAAM,KAAK,CAAC,EAAE;QAElC,MAAM4F,cAAc,GAAG;UACrBnD,IAAI,EAAE,mBAAmB;UACzBjB,QAAQ,EAAEmE;QACZ,CAAC;;QAED;QACA,IAAIE,oBAAoB,GAAG,IAAI;QAC/B,IAAIF,eAAe,CAAC3F,MAAM,GAAG,CAAC,EAAE;UAC9B,MAAMgD,UAAU,GAAG2C,eAAe,CAAC,CAAC,CAAC,CAAC3C,UAAU;UAChD,MAAMC,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC,CAAC/D,MAAM,CAACmE,GAAG,IACrD,OAAOJ,UAAU,CAACI,GAAG,CAAC,KAAK,QAAQ,IAClC,OAAOJ,UAAU,CAACI,GAAG,CAAC,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACC,UAAU,CAACN,UAAU,CAACI,GAAG,CAAC,CAAC,CAC5E,CAAC;UAED,IAAIH,YAAY,CAACjD,MAAM,GAAG,CAAC,EAAE;YAC3B6F,oBAAoB,GAAG5C,YAAY,CAAC,CAAC,CAAC;UACxC;QACF;;QAEA;QACA,IAAI6C,iBAAiB;QAErB,IAAID,oBAAoB,EAAE;UACxB;UACA,MAAMpC,MAAM,GAAGkC,eAAe,CAAC5E,GAAG,CAAC2C,CAAC,IAAI;YACtC,MAAMC,GAAG,GAAGD,CAAC,CAACV,UAAU,CAAC6C,oBAAoB,CAAC;YAC9C,OAAO,OAAOlC,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGL,UAAU,CAACK,GAAG,CAAC;UACxD,CAAC,CAAC,CAAC1E,MAAM,CAAC0E,GAAG,IAAI,CAACN,KAAK,CAACM,GAAG,CAAC,CAAC;UAE7B,MAAMC,QAAQ,GAAGH,MAAM,CAACzD,MAAM,GAAG,CAAC,GAAG6D,IAAI,CAACC,GAAG,CAAC,GAAGL,MAAM,CAAC,GAAG,CAAC;UAC5D,MAAMM,QAAQ,GAAGN,MAAM,CAACzD,MAAM,GAAG,CAAC,GAAG6D,IAAI,CAACG,GAAG,CAAC,GAAGP,MAAM,CAAC,GAAG,CAAC;;UAE5D;UACA,MAAMsC,WAAW,GAAG/E,OAAO,CAAClB,UAAU,IAAI,SAAS;UAEnD,IAAIiG,WAAW,KAAK,YAAY,IAAIA,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,MAAM,EAAE;YACtF;YACA,IAAIA,WAAW,KAAK,YAAY,EAAE;cAChCD,iBAAiB,GAAG7J,EAAE,CAACsH,YAAY,CAACtH,EAAE,CAACuH,gBAAgB,CAAC;YAC1D,CAAC,MAAM,IAAIuC,WAAW,KAAK,QAAQ,EAAE;cACnCD,iBAAiB,GAAG7J,EAAE,CAACsH,YAAY,CAACtH,EAAE,CAAC+J,YAAY,CAAC;YACtD,CAAC,MAAM;cACLF,iBAAiB,GAAG7J,EAAE,CAACsH,YAAY,CAACtH,EAAE,CAACgK,UAAU,CAAC;YACpD;UACF,CAAC,MAAM,IAAIF,WAAW,KAAK,UAAU,IAAIA,WAAW,KAAK,QAAQ,EAAE;YACjE;YACAD,iBAAiB,GAAG7J,EAAE,CAACgI,eAAe,CAAC,CAAC,CACrCC,MAAM,CAAC,CAACN,QAAQ,EAAEG,QAAQ,CAAC,CAAC,CAC5BI,YAAY,CAAC4B,WAAW,KAAK,UAAU,GAAG9J,EAAE,CAACiK,mBAAmB,GAAGjK,EAAE,CAACkK,iBAAiB,CAAC;UAC7F,CAAC,MAAM;YACL;YACA,MAAMC,iBAAiB,GAAGC,oBAAoB,CAACN,WAAW,CAAC;YAC3DD,iBAAiB,GAAG7J,EAAE,CAACgI,eAAe,CAAC,CAAC,CACrCC,MAAM,CAAC,CAACN,QAAQ,EAAEG,QAAQ,CAAC,CAAC,CAC5BI,YAAY,CAACiC,iBAAiB,CAAC;UACpC;QACF,CAAC,MAAM;UACL;UACAN,iBAAiB,GAAG7J,EAAE,CAACsH,YAAY,CAACtH,EAAE,CAACqK,UAAU,CAAC;QACpD;;QAEA;QACAZ,YAAY,CAACpE,SAAS,CAAC,MAAM,CAAC,CAC3B3B,IAAI,CAACgG,eAAe,CAAC,CACrBtB,KAAK,CAAC,CAAC,CACP5C,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,GAAG,EAAEW,OAAO,IAAI;UACpB,IAAI;YACF,OAAOQ,IAAI,CAACR,OAAO,CAAC;UACtB,CAAC,CAAC,OAAOiC,CAAC,EAAE;YACVxF,OAAO,CAACyF,IAAI,CAAC,kCAAkC,EAAED,CAAC,EAAEjC,OAAO,CAAC;YAC5D,OAAO,EAAE;UACX;QACF,CAAC,CAAC,CACDX,IAAI,CAAC,MAAM,EAAE8C,CAAC,IAAI;UACjB,IAAIqB,oBAAoB,EAAE;YACxB,MAAMlC,GAAG,GAAGa,CAAC,CAACxB,UAAU,CAAC6C,oBAAoB,CAAC;YAC9C,MAAMpB,UAAU,GAAG,OAAOd,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGL,UAAU,CAACK,GAAG,CAAC;YAClE,OAAO,CAACN,KAAK,CAACoB,UAAU,CAAC,GAAGqB,iBAAiB,CAACrB,UAAU,CAAC,GAAG,MAAM;UACpE;UACA,OAAO,SAAS,CAAC,CAAC;QACpB,CAAC,CAAC,CACD/C,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CACtBA,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBgD,EAAE,CAAC,WAAW,EAAE,UAAUC,KAAK,EAAEH,CAAC,EAAE;UACnCvI,EAAE,CAACoF,MAAM,CAAC,IAAI,CAAC,CACZK,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;;UAEzB;UACA,IAAIkD,WAAW,GAAG;AAC9B,yBAAyBJ,CAAC,CAACxB,UAAU,CAAClF,IAAI,IAAI0G,CAAC,CAACxB,UAAU,CAAC6B,IAAI,IAAIgB,oBAAoB,GAAG,IAAI,GAAGrB,CAAC,CAACxB,UAAU,CAAC6C,oBAAoB,CAAC,IAAI,SAAS,QAAQ;;UAE5I;UACA3C,MAAM,CAAC4B,OAAO,CAACN,CAAC,CAACxB,UAAU,CAAC,CAAC+B,OAAO,CAAC,CAAC,CAAC3B,GAAG,EAAE4B,KAAK,CAAC,KAAK;YACrD,IAAI5B,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,MAAM,EAAE;cACpCwB,WAAW,IAAI,gBAAgBxB,GAAG,cAAc4B,KAAK,QAAQ;YAC/D;UACF,CAAC,CAAC;UAEF9C,OAAO,CACJC,KAAK,CAAC,MAAM,EAAGwC,KAAK,CAACM,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC,CACxC9C,KAAK,CAAC,KAAK,EAAGwC,KAAK,CAACO,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC,CACvC/C,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBgD,IAAI,CAACP,WAAW,CAAC;QACtB,CAAC,CAAC,CACDF,EAAE,CAAC,UAAU,EAAE,YAAY;UAC1BzI,EAAE,CAACoF,MAAM,CAAC,IAAI,CAAC,CACZK,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CACzBA,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;;UAEzB;UACAQ,OAAO,CAACC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC;;QAEJ;QACA,IAAI0D,oBAAoB,EAAE;UACxBT,SAAS,CAACpD,GAAG,EAAE8D,iBAAiB,EAAED,oBAAoB,EAAEjE,KAAK,EAAEG,MAAM,EAAE,WAAW0D,KAAK,EAAE,EACvFA,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;QAChB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAO5G,GAAG,EAAE;MACZC,OAAO,CAACrB,KAAK,CAAC,sBAAsB,EAAEoB,GAAG,CAAC;MAC1CmD,GAAG,CAACP,MAAM,CAAC,MAAM,CAAC,CACfC,IAAI,CAAC,GAAG,EAAEE,KAAK,GAAG,CAAC,CAAC,CACpBF,IAAI,CAAC,GAAG,EAAEK,MAAM,GAAG,CAAC,CAAC,CACrBL,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BC,IAAI,CAAC,+CAA+C,CAAC;IAC1D;EACF,CAAC;;EAED;EACA,MAAM0E,oBAAoB,GAAIvI,IAAI,IAAK;IACrC,MAAMyI,aAAa,GAAG;MACpB,SAAS,EAAEtK,EAAE,CAACmI,kBAAkB;MAChC,SAAS,EAAEnI,EAAE,CAACuK,kBAAkB;MAChC,QAAQ,EAAEvK,EAAE,CAACwK,iBAAiB;MAC9B,OAAO,EAAExK,EAAE,CAACyK,gBAAgB;MAC5B,OAAO,EAAEzK,EAAE,CAAC0K,gBAAgB;MAC5B,QAAQ,EAAE1K,EAAE,CAAC2K,iBAAiB;MAC9B,MAAM,EAAE3K,EAAE,CAAC4K,eAAe;MAC1B,OAAO,EAAE5K,EAAE,CAAC6K,gBAAgB;MAC5B,SAAS,EAAE7K,EAAE,CAAC8K,kBAAkB;MAChC,SAAS,EAAE9K,EAAE,CAAC+K;IAChB,CAAC;IAED,OAAOT,aAAa,CAACzI,IAAI,CAAC,IAAI7B,EAAE,CAACmI,kBAAkB;EACrD,CAAC;;EAED;EACA,MAAMgB,SAAS,GAAGA,CAACpD,GAAG,EAAElC,UAAU,EAAEmH,YAAY,EAAErF,KAAK,EAAEG,MAAM,EAAElE,EAAE,EAAEqJ,gBAAgB,GAAG,CAAC,KAAK;IAC5F,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,YAAY,GAAG,GAAG;IACxB,MAAMC,YAAY,GAAG,EAAE;IACvB,MAAMC,OAAO,GAAG1F,KAAK,GAAGuF,WAAW,GAAG,EAAE,GAAID,gBAAgB,IAAIC,WAAW,GAAG,EAAE,CAAE;IAClF,MAAMI,OAAO,GAAG,CAACxF,MAAM,GAAGqF,YAAY,IAAI,CAAC;IAE3C,MAAMI,MAAM,GAAGxF,GAAG,CAACP,MAAM,CAAC,GAAG,CAAC,CAC3BC,IAAI,CAAC,OAAO,EAAE,UAAU7D,EAAE,EAAE,CAAC,CAC7B6D,IAAI,CAAC,WAAW,EAAE,aAAa4F,OAAO,KAAKC,OAAO,GAAG,CAAC;;IAEzD;IACA,IAAI,OAAOzH,UAAU,CAACqE,YAAY,KAAK,UAAU,EAAE;MACjD,MAAMsD,WAAW,GAAGxL,EAAE,CAACyL,WAAW,CAAC,CAAC,CACjCxD,MAAM,CAACpE,UAAU,CAACoE,MAAM,CAAC,CAAC,CAAC,CAC3ByD,KAAK,CAAC,CAACP,YAAY,EAAE,CAAC,CAAC,CAAC;MAE3B,MAAMQ,UAAU,GAAG3L,EAAE,CAAC4L,SAAS,CAACJ,WAAW,CAAC,CACzCK,QAAQ,CAACX,WAAW,CAAC,CACrBY,KAAK,CAAC,CAAC,CAAC;MAEXP,MAAM,CAAC/F,MAAM,CAAC,GAAG,CAAC,CACfuG,IAAI,CAACJ,UAAU,CAAC;MAEnB,MAAMK,IAAI,GAAGjG,GAAG,CAACP,MAAM,CAAC,MAAM,CAAC;MAC/B,MAAMyG,cAAc,GAAGD,IAAI,CAACxG,MAAM,CAAC,gBAAgB,CAAC,CACjDC,IAAI,CAAC,IAAI,EAAE,mBAAmB7D,EAAE,EAAE,CAAC,CACnC6D,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAChBA,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAClBA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAChBA,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;MAEnB,MAAMyG,KAAK,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;MACxCA,KAAK,CAACpD,OAAO,CAACqD,IAAI,IAAI;QACpBF,cAAc,CAACzG,MAAM,CAAC,MAAM,CAAC,CAC1BC,IAAI,CAAC,QAAQ,EAAE,GAAG0G,IAAI,GAAG,GAAG,GAAG,CAAC,CAChC1G,IAAI,CAAC,YAAY,EAAE5B,UAAU,CAACA,UAAU,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGkE,IAAI,IAAItI,UAAU,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGpE,UAAU,CAACoE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtH,CAAC,CAAC;MAEFsD,MAAM,CAAC/F,MAAM,CAAC,MAAM,CAAC,CAClBC,IAAI,CAAC,OAAO,EAAEyF,WAAW,CAAC,CAC1BzF,IAAI,CAAC,QAAQ,EAAE0F,YAAY,CAAC,CAC5BjF,KAAK,CAAC,MAAM,EAAE,wBAAwBtE,EAAE,GAAG,CAAC;IACjD;;IAEA;IACA2J,MAAM,CAAC/F,MAAM,CAAC,MAAM,CAAC,CAClBC,IAAI,CAAC,GAAG,EAAEyF,WAAW,GAAG,CAAC,CAAC,CAC1BzF,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CACdA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BS,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BR,IAAI,CAACsF,YAAY,CAAC;;IAErB;IACAO,MAAM,CAAC/F,MAAM,CAAC,MAAM,CAAC,CAClBC,IAAI,CAAC,GAAG,EAAEyF,WAAW,GAAG,CAAC,CAAC,CAC1BzF,IAAI,CAAC,GAAG,EAAE0F,YAAY,GAAG,EAAE,CAAC,CAC5B1F,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BS,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BA,KAAK,CAAC,YAAY,EAAE,QAAQ,CAAC,CAC7BR,IAAI,CAAC9D,EAAE,KAAK,MAAM,GAAG,YAAY,GAAG,WAAWqJ,gBAAgB,EAAE,CAAC;EACvE,CAAC;;EAED;EACAnL,SAAS,CAAC,MAAM;IACd,IAAIgB,QAAQ,IAAI,CAACQ,OAAO,EAAE;MACxB,IAAI;QACF0D,OAAO,CAAC,CAAC;MACX,CAAC,CAAC,OAAOqD,CAAC,EAAE;QACVxF,OAAO,CAACrB,KAAK,CAAC,sBAAsB,EAAE6G,CAAC,CAAC;QACxC5G,QAAQ,CAAC,qBAAqB,CAAC;MACjC;IACF;EACF,CAAC,EAAE,CAACX,QAAQ,EAAEI,QAAQ,EAAEI,OAAO,EAAEQ,YAAY,CAAC,CAAC;;EAE/C;EACA,MAAMsK,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAI,CAACtL,QAAQ,IAAI,CAACA,QAAQ,CAACuL,OAAO,IAAI,CAACpK,QAAQ,CAACiD,OAAO,EAAE;;IAEzD;IACA,MAAMoH,cAAc,GAAGtM,EAAE,CAACoF,MAAM,CAACnD,QAAQ,CAACiD,OAAO,CAAC;IAClDoH,cAAc,CAACjH,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAEtC,IAAI,CAACxE,QAAQ,CAACuL,OAAO,IAAIvL,QAAQ,CAACuL,OAAO,CAACtI,MAAM,KAAK,CAAC,EAAE;MACtDuI,cAAc,CAAC9G,MAAM,CAAC,KAAK,CAAC,CACzBC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAChCC,IAAI,CAAC,oCAAoC,CAAC;MAC7C;IACF;;IAEA;IACA,MAAM6G,QAAQ,GAAGzL,QAAQ,CAACuL,OAAO,CAAC,CAAC,CAAC;IACpC,MAAMG,cAAc,GAAGvF,MAAM,CAACC,IAAI,CAACqF,QAAQ,CAAC,CAACvJ,MAAM,CAACmE,GAAG,IAAI;MACzD,MAAMO,GAAG,GAAG6E,QAAQ,CAACpF,GAAG,CAAC;MACzB,OAAO,OAAOO,GAAG,KAAK,QAAQ,IAAK,OAAOA,GAAG,KAAK,QAAQ,IAAI,CAACN,KAAK,CAACC,UAAU,CAACK,GAAG,CAAC,CAAE;IACxF,CAAC,CAAC;IAEF,IAAI8E,cAAc,CAACzI,MAAM,KAAK,CAAC,EAAE;MAC/BuI,cAAc,CAAC9G,MAAM,CAAC,KAAK,CAAC,CACzBC,IAAI,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAChCC,IAAI,CAAC,wCAAwC,CAAC;MACjD;IACF;IAEA,MAAM+G,WAAW,GAAGD,cAAc,CAAC,CAAC,CAAC;IACrC,MAAME,cAAc,GAAGzF,MAAM,CAACC,IAAI,CAACqF,QAAQ,CAAC,CAACI,IAAI,CAACxF,GAAG,IAAIA,GAAG,KAAKsF,WAAW,CAAC,IAAI,OAAO;;IAExF;IACA,MAAMG,SAAS,GAAG9L,QAAQ,CAACuL,OAAO,CAACvH,GAAG,CAAC,CAAC+H,GAAG,EAAErD,KAAK,MAAM;MACtDsD,QAAQ,EAAEJ,cAAc,KAAK,OAAO,GAAG,QAAQlD,KAAK,GAAG,CAAC,EAAE,GAAGqD,GAAG,CAACH,cAAc,CAAC;MAChF3D,KAAK,EAAE,OAAO8D,GAAG,CAACJ,WAAW,CAAC,KAAK,QAAQ,GAAGI,GAAG,CAACJ,WAAW,CAAC,GAAGpF,UAAU,CAACwF,GAAG,CAACJ,WAAW,CAAC;IAC9F,CAAC,CAAC,CAAC,CAACzJ,MAAM,CAACuF,CAAC,IAAI,CAACnB,KAAK,CAACmB,CAAC,CAACQ,KAAK,CAAC,CAAC;;IAEhC;IACA6D,SAAS,CAACvD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACR,KAAK,GAAGO,CAAC,CAACP,KAAK,CAAC;;IAE3C;IACA,MAAMgE,WAAW,GAAGH,SAAS,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;;IAE1C;IACA,MAAMrH,KAAK,GAAG2G,cAAc,CAAC1G,IAAI,CAAC,CAAC,CAACC,qBAAqB,CAAC,CAAC,CAACF,KAAK;IACjE,MAAMG,MAAM,GAAG,GAAG;IAClB,MAAMmH,MAAM,GAAG;MAAEC,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAG,CAAC;IAC3D,MAAMC,UAAU,GAAG3H,KAAK,GAAGsH,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACE,KAAK;IACrD,MAAMI,WAAW,GAAGzH,MAAM,GAAGmH,MAAM,CAACC,GAAG,GAAGD,MAAM,CAACG,MAAM;;IAEvD;IACA,MAAMrH,GAAG,GAAGuG,cAAc,CACvB9G,MAAM,CAAC,KAAK,CAAC,CACbC,IAAI,CAAC,OAAO,EAAEE,KAAK,CAAC,CACpBF,IAAI,CAAC,QAAQ,EAAEK,MAAM,CAAC;IAEzB,MAAM0H,CAAC,GAAGzH,GAAG,CAACP,MAAM,CAAC,GAAG,CAAC,CACtBC,IAAI,CAAC,WAAW,EAAE,aAAawH,MAAM,CAACI,IAAI,KAAKJ,MAAM,CAACC,GAAG,GAAG,CAAC;;IAEhE;IACA,MAAMO,MAAM,GAAGzN,EAAE,CAAC0N,SAAS,CAAC,CAAC,CAC1BzF,MAAM,CAAC8E,WAAW,CAACjI,GAAG,CAACyD,CAAC,IAAIA,CAAC,CAACuE,QAAQ,CAAC,CAAC,CACxCpB,KAAK,CAAC,CAAC,CAAC,EAAE4B,UAAU,CAAC,CAAC,CACtBK,OAAO,CAAC,GAAG,CAAC;IAEf,MAAMC,MAAM,GAAG5N,EAAE,CAACyL,WAAW,CAAC,CAAC,CAC5BxD,MAAM,CAAC,CAAC,CAAC,EAAEjI,EAAE,CAAC+H,GAAG,CAACgF,WAAW,EAAExE,CAAC,IAAIA,CAAC,CAACQ,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CACpD2C,KAAK,CAAC,CAAC6B,WAAW,EAAE,CAAC,CAAC,CAAC;;IAE1B;IACAC,CAAC,CAACnI,SAAS,CAAC,MAAM,CAAC,CAChB3B,IAAI,CAACqJ,WAAW,CAAC,CACjB3E,KAAK,CAAC,CAAC,CACP5C,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CACpBA,IAAI,CAAC,GAAG,EAAE8C,CAAC,IAAIkF,MAAM,CAAClF,CAAC,CAACuE,QAAQ,CAAC,CAAC,CAClCrH,IAAI,CAAC,GAAG,EAAE8C,CAAC,IAAIqF,MAAM,CAACrF,CAAC,CAACQ,KAAK,CAAC,CAAC,CAC/BtD,IAAI,CAAC,OAAO,EAAEgI,MAAM,CAACI,SAAS,CAAC,CAAC,CAAC,CACjCpI,IAAI,CAAC,QAAQ,EAAE8C,CAAC,IAAIgF,WAAW,GAAGK,MAAM,CAACrF,CAAC,CAACQ,KAAK,CAAC,CAAC,CAClDtD,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CACvBgD,EAAE,CAAC,WAAW,EAAE,UAAUC,KAAK,EAAEH,CAAC,EAAE;MACnCvI,EAAE,CAACoF,MAAM,CAAC,IAAI,CAAC,CAACK,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;;MAEvC;MACAzF,EAAE,CAACoF,MAAM,CAAC,MAAM,CAAC,CAACI,MAAM,CAAC,KAAK,CAAC,CAC5BC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBS,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CACnBA,KAAK,CAAC,MAAM,EAAGwC,KAAK,CAACM,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC,CACxC9C,KAAK,CAAC,KAAK,EAAGwC,KAAK,CAACO,KAAK,GAAG,EAAE,GAAI,IAAI,CAAC,CACvCC,IAAI,CAAC,WAAWX,CAAC,CAACuE,QAAQ,cAAcvE,CAAC,CAACQ,KAAK,CAAC+E,cAAc,CAAC,CAAC,EAAE,CAAC;IACxE,CAAC,CAAC,CACDrF,EAAE,CAAC,UAAU,EAAE,YAAY;MAC1BzI,EAAE,CAACoF,MAAM,CAAC,IAAI,CAAC,CAACK,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;MACvCzF,EAAE,CAACqF,SAAS,CAAC,UAAU,CAAC,CAACC,MAAM,CAAC,CAAC;IACnC,CAAC,CAAC;;IAEJ;IACA,MAAMyI,KAAK,GAAG/N,EAAE,CAACgO,UAAU,CAACP,MAAM,CAAC;IACnC,MAAMQ,KAAK,GAAGjO,EAAE,CAACkO,QAAQ,CAACN,MAAM,CAAC;IAEjCJ,CAAC,CAAChI,MAAM,CAAC,GAAG,CAAC,CACVC,IAAI,CAAC,WAAW,EAAE,gBAAgB8H,WAAW,GAAG,CAAC,CACjDxB,IAAI,CAACgC,KAAK,CAAC,CACX1I,SAAS,CAAC,MAAM,CAAC,CACjBI,IAAI,CAAC,WAAW,EAAE,aAAa,CAAC,CAChCS,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,CAC3BT,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CACnBA,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IAEtB+H,CAAC,CAAChI,MAAM,CAAC,GAAG,CAAC,CACVuG,IAAI,CAACkC,KAAK,CAAC;;IAEd;IACAlI,GAAG,CAACP,MAAM,CAAC,MAAM,CAAC,CACfC,IAAI,CAAC,GAAG,EAAEE,KAAK,GAAG,CAAC,CAAC,CACpBF,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CACbA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BS,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BR,IAAI,CAAC,GAAG+G,WAAW,OAAOC,cAAc,KAAK,OAAO,GAAG,MAAM,GAAGA,cAAc,EAAE,CAAC;EACtF,CAAC;;EAED;EACA5M,SAAS,CAAC,MAAM;IACd,IAAIgB,QAAQ,IAAI,CAACQ,OAAO,EAAE;MACxB,IAAI;QACF8K,SAAS,CAAC,CAAC;MACb,CAAC,CAAC,OAAO/D,CAAC,EAAE;QACVxF,OAAO,CAACrB,KAAK,CAAC,wBAAwB,EAAE6G,CAAC,CAAC;MAC5C;IACF;EACF,CAAC,EAAE,CAACvH,QAAQ,EAAEQ,OAAO,CAAC,CAAC;;EAEvB;EACA,oBACEnB,OAAA;IAAKgO,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCjO,OAAA;MAAQgO,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAClCjO,OAAA;QAAAiO,QAAA,EAAI;MAA4B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrCrO,OAAA;QAAKgO,SAAS,EAAC,UAAU;QAAAC,QAAA,gBAC/BjO,OAAA;UAAOsO,OAAO,EAAC,gBAAgB;UAAAL,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrDrO,OAAA;UACEyB,EAAE,EAAC,gBAAgB;UACnBmH,KAAK,EAAE/H,mBAAoB;UAC3B0N,QAAQ,EAAGrG,CAAC,IAAKpH,sBAAsB,CAACoH,CAAC,CAACsG,MAAM,CAAC5F,KAAK,CAAE;UAAAqF,QAAA,EAEvD1M,iBAAiB,CAACoD,GAAG,CAAC7B,OAAO,IAAI;YAAA,IAAA2L,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;YAChC;YACA,IAAIC,WAAW,GAAG9L,OAAO,CAACpB,IAAI,KAAKoB,OAAO,CAACrB,EAAE,KAAK,SAAS,GAAG,iBAAiB,GAAGqB,OAAO,CAACrB,EAAE,CAAC;;YAE7F;YACA,MAAMoN,YAAY,GAChB,EAAAJ,qBAAA,GAAA3L,OAAO,CAACgM,iBAAiB,cAAAL,qBAAA,uBAAzBA,qBAAA,CAA2BM,GAAG,OAAAL,sBAAA,GAC9B5L,OAAO,CAACgM,iBAAiB,cAAAJ,sBAAA,uBAAzBA,sBAAA,CAA2BM,OAAO,OAAAL,sBAAA,GAClC7L,OAAO,CAACgM,iBAAiB,cAAAH,sBAAA,uBAAzBA,sBAAA,CAA2BM,SAAS;YAEtC,IAAIJ,YAAY,EAAE;cAChBD,WAAW,IAAI,KAAKC,YAAY,GAAG;YACrC;YAEA,oBACE7O,OAAA;cAAyB4I,KAAK,EAAE9F,OAAO,CAACrB,EAAG;cAAAwM,QAAA,EACxCW;YAAW,GADD9L,OAAO,CAACrB,EAAE;cAAAyM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEf,CAAC;UAEb,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC,EAERlN,OAAO,iBAAInB,OAAA;MAAKgO,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACzDhN,KAAK,iBAAIrB,OAAA;MAAKgO,SAAS,EAAC,OAAO;MAAAC,QAAA,GAAC,SAAO,EAAC5M,KAAK;IAAA;MAAA6M,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAEpD1N,QAAQ,IAAI,CAACQ,OAAO,iBACnBnB,OAAA;MAAKgO,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAEhCjO,OAAA,CAACF,aAAa;QACZmB,iBAAiB,EAAEA,iBAAkB;QACrCiO,cAAc,EAAEnO,QAAS;QACzBoO,eAAe,EAAEhM,aAAc;QAC/BiM,eAAe,EAAE3K,aAAc;QAC/B4K,cAAc,EAAExL,YAAa;QAC7ByL,aAAa,EAAEzO;MAAoB;QAAAqN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC,eAEFrO,OAAA;QAAKgO,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChCjO,OAAA;UAAAiO,QAAA,EAAI;QAA6B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtCrO,OAAA;UAAKgO,SAAS,EAAC,eAAe;UAACuB,GAAG,EAAE1N;QAAO;UAAAqM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eAENrO,OAAA;QAAKgO,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBjO,OAAA;UAAKgO,SAAS,EAAC,QAAQ;UAAAC,QAAA,gBACrBjO,OAAA;YAAAiO,QAAA,EAAI;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzBrO,OAAA;YAAKgO,SAAS,EAAC,iBAAiB;YAACuB,GAAG,EAAEzN;UAAS;YAAAoM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC,eAENrO,OAAA;UAAKgO,SAAS,EAAC,QAAQ;UAAAC,QAAA,gBACrBjO,OAAA;YAAAiO,QAAA,EAAI;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1BrO,OAAA;YAAKgO,SAAS,EAAC,mBAAmB;YAAAC,QAAA,gBAChCjO,OAAA;cAAKgO,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1BjO,OAAA;gBAAAiO,QAAA,EAAI;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACdrO,OAAA;gBAAGgO,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAE,EAAA9N,iBAAA,GAAAQ,QAAQ,CAAC6O,OAAO,cAAArP,iBAAA,wBAAAC,qBAAA,GAAhBD,iBAAA,CAAkBsP,KAAK,cAAArP,qBAAA,uBAAvBA,qBAAA,CAAyBuN,cAAc,CAAC,CAAC,KAAI;cAAK;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjF,CAAC,eACNrO,OAAA;cAAKgO,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1BjO,OAAA;gBAAAiO,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChBrO,OAAA;gBAAGgO,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAE,EAAA5N,kBAAA,GAAAM,QAAQ,CAAC6O,OAAO,cAAAnP,kBAAA,wBAAAC,qBAAA,GAAhBD,kBAAA,CAAkBqP,OAAO,cAAApP,qBAAA,uBAAzBA,qBAAA,CAA2BqP,OAAO,CAAC,CAAC,CAAC,KAAI;cAAK;gBAAAzB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7E,CAAC,eACNrO,OAAA;cAAKgO,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1BjO,OAAA;gBAAAiO,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChBrO,OAAA;gBAAGgO,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAE,EAAA1N,kBAAA,GAAAI,QAAQ,CAAC6O,OAAO,cAAAjP,kBAAA,wBAAAC,qBAAA,GAAhBD,kBAAA,CAAkBqP,OAAO,cAAApP,qBAAA,uBAAzBA,qBAAA,CAA2BmN,cAAc,CAAC,CAAC,KAAI;cAAK;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnF,CAAC,eACNrO,OAAA;cAAKgO,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1BjO,OAAA;gBAAAiO,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChBrO,OAAA;gBAAGgO,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAE,EAAAxN,kBAAA,GAAAE,QAAQ,CAAC6O,OAAO,cAAA/O,kBAAA,wBAAAC,qBAAA,GAAhBD,kBAAA,CAAkBoP,OAAO,cAAAnP,qBAAA,uBAAzBA,qBAAA,CAA2BiN,cAAc,CAAC,CAAC,KAAI;cAAK;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnF,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAEDrO,OAAA;MAAKgO,SAAS,EAAC,SAAS;MAACjI,KAAK,EAAE;QAAE+J,OAAO,EAAE;MAAO;IAAE;MAAA5B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEV,CAAC;AAACnO,EAAA,CAhxBID,SAAS;AAAA8P,EAAA,GAAT9P,SAAS;AAkxBf,eAAeA,SAAS;AAAC,IAAA8P,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}