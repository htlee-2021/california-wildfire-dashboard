{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CaliforniaFireDashboard = () => {\n  _s();\n  const [yearlyData, setYearlyData] = useState([]);\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [summaryStats, setSummaryStats] = useState({\n    totalFires: 0,\n    totalAcres: 0,\n    yearlyAcres: 0,\n    peakMonth: '',\n    worstYear: '',\n    worstYearAcres: 0\n  });\n  const backendBaseUrl = 'http://localhost:8000';\n\n  // Load yearly data when component mounts\n  useEffect(() => {\n    fetchYearlyData();\n  }, []);\n\n  // Fetch monthly data when selected year changes\n  useEffect(() => {\n    if (selectedYear) {\n      fetchMonthlyData(selectedYear);\n    }\n  }, [selectedYear]);\n  const fetchYearlyData = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${backendBaseUrl}/api/stats/yearly?dataset=firep23_1`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch yearly data: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setYearlyData(data.yearlyData);\n      setAvailableYears(data.years);\n\n      // Update summary stats\n      setSummaryStats(prev => ({\n        ...prev,\n        totalFires: data.summary.totalFires,\n        totalAcres: data.summary.totalAcres,\n        worstYear: data.summary.worstYear,\n        worstYearAcres: data.summary.worstYearAcres\n      }));\n\n      // Set the most recent year as the default selected year\n      if (data.years.length > 0) {\n        const maxYear = Math.max(...data.years.map(y => parseInt(y)));\n        setSelectedYear(maxYear);\n      }\n    } catch (err) {\n      console.error(\"Error fetching yearly fire data:\", err);\n      setError(\"Failed to load yearly fire data. Please try again later.\");\n      handleEmptyData();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchMonthlyData = async year => {\n    try {\n      // Only show loading indicator for initial data load, not for year changes\n      if (monthlyData.length === 0) {\n        setLoading(true);\n      }\n      const response = await fetch(`${backendBaseUrl}/api/stats/monthly?dataset=firep23_1&year=${year}`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch monthly data: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setMonthlyData(data.monthlyData);\n\n      // Update summary stats for the selected year\n      setSummaryStats(prev => ({\n        ...prev,\n        yearlyAcres: data.summary.totalAcres,\n        peakMonth: data.summary.peakMonth\n      }));\n    } catch (err) {\n      console.error(`Error fetching monthly fire data for year ${year}:`, err);\n      setError(`Failed to load monthly data for ${year}. Please try again later.`);\n      setMonthlyData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Empty state handler\n  const handleEmptyData = () => {\n    setYearlyData([]);\n    setMonthlyData([]);\n    setAvailableYears([]);\n    setSelectedYear(null);\n    setSummaryStats({\n      totalFires: 0,\n      totalAcres: 0,\n      yearlyAcres: 0,\n      peakMonth: '',\n      worstYear: '',\n      worstYearAcres: 0\n    });\n  };\n  const handleYearChange = e => {\n    const newYear = parseInt(e.target.value);\n    setSelectedYear(newYear);\n  };\n  const formatLargeNumber = num => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num;\n  };\n  if (loading && yearlyData.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-lg font-medium text-gray-700\",\n      children: \"Loading fire data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-lg font-medium text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchYearlyData,\n      className: \"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n      children: \"Try Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n  if (availableYears.length === 0 || !selectedYear) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-lg font-medium text-amber-500\",\n        children: \"No fire data available for visualization.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchYearlyData,\n        className: \"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n        children: \"Refresh Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-6 rounded-lg shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold text-gray-800 mb-2\",\n        children: \"California Wildfire Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Visualization of wildfire data from California showing yearly trends and monthly breakdown.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"year-select\",\n        className: \"mr-2 font-medium\",\n        children: \"Select Year for Monthly Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"year-select\",\n        value: selectedYear,\n        onChange: handleYearChange,\n        className: \"p-2 border rounded\",\n        children: availableYears.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: year,\n          children: year\n        }, year, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-2 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-50 p-4 rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: \"Wildfires over the years\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-80\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(LineChart, {\n              data: yearlyData,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"year\",\n                label: {\n                  value: 'Year',\n                  position: 'insideBottom',\n                  offset: -5\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                yAxisId: \"left\",\n                label: {\n                  value: 'Count of Fires',\n                  angle: -90,\n                  position: 'insideLeft'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                yAxisId: \"right\",\n                orientation: \"right\",\n                label: {\n                  value: 'Acres Burned',\n                  angle: 90,\n                  position: 'insideRight'\n                },\n                tickFormatter: formatLargeNumber\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: (value, name) => [name === 'acres' ? new Intl.NumberFormat().format(value) : value, name === 'acres' ? 'Acres Burned' : 'Number of Fires']\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"fires\",\n                name: \"Fire Count\",\n                stroke: \"#2563eb\",\n                strokeWidth: 2,\n                dot: {\n                  r: 4\n                },\n                activeDot: {\n                  r: 6\n                },\n                yAxisId: \"left\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"acres\",\n                name: \"Acres Burned\",\n                stroke: \"#dc2626\",\n                strokeWidth: 2,\n                dot: {\n                  r: 4\n                },\n                activeDot: {\n                  r: 6\n                },\n                yAxisId: \"right\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-50 p-4 rounded shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold mb-4\",\n          children: [\"Acres burned by month in \", selectedYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), loading && monthlyData.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-80 flex items-center justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-500\",\n            children: \"Loading monthly data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-80\",\n          children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n            width: \"100%\",\n            height: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: monthlyData,\n              margin: {\n                top: 5,\n                right: 30,\n                left: 20,\n                bottom: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n                strokeDasharray: \"3 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"month\",\n                tick: {\n                  fontSize: 10\n                },\n                interval: 0,\n                angle: -45,\n                textAnchor: \"end\",\n                height: 80\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                label: {\n                  value: 'Acres Burned',\n                  angle: -90,\n                  position: 'insideLeft'\n                },\n                tickFormatter: formatLargeNumber\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                formatter: value => new Intl.NumberFormat().format(value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Bar, {\n                dataKey: \"acres\",\n                name: \"Acres Burned\",\n                fill: \"#dc2626\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 grid grid-cols-1 md:grid-cols-4 gap-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow-sm border border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-medium text-gray-800\",\n          children: \"Total Fires\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-3xl font-bold text-blue-600\",\n          children: summaryStats.totalFires.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow-sm border border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-medium text-gray-800\",\n          children: \"Total Acres (All Years)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-3xl font-bold text-orange-600\",\n          children: summaryStats.totalAcres.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow-sm border border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-medium text-gray-800\",\n          children: [\"Total Acres in \", selectedYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-3xl font-bold text-red-600\",\n          children: summaryStats.yearlyAcres.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded shadow-sm border border-gray-200\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-medium text-gray-800\",\n          children: [\"Peak Month in \", selectedYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-3xl font-bold text-amber-600\",\n          children: summaryStats.peakMonth || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-blue-50 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-medium mb-2\",\n        children: \"Data Source Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-700\",\n        children: \"This visualization uses data from the firep23_1.geojson file, which contains California wildfire records. The yearly chart displays both the count of fire incidents and total acres burned per year (based on the YEAR_ and GIS_ACRES fields), while the monthly chart shows acres burned by month for the selected year.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-700 mt-2\",\n        children: [\"Years Available: \", availableYears.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-700 mt-2\",\n        children: [\"Worst Fire Year: \", summaryStats.worstYear || 'N/A', summaryStats.worstYear && ` (${new Intl.NumberFormat().format(summaryStats.worstYearAcres)} acres)`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 text-right\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchYearlyData,\n        className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n        children: \"Refresh Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(CaliforniaFireDashboard, \"Olj03hjcQidQ/HBWDO6bx50htlA=\");\n_c = CaliforniaFireDashboard;\nexport default CaliforniaFireDashboard;\nvar _c;\n$RefreshReg$(_c, \"CaliforniaFireDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BarChart","Bar","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","CaliforniaFireDashboard","_s","yearlyData","setYearlyData","monthlyData","setMonthlyData","loading","setLoading","error","setError","selectedYear","setSelectedYear","availableYears","setAvailableYears","summaryStats","setSummaryStats","totalFires","totalAcres","yearlyAcres","peakMonth","worstYear","worstYearAcres","backendBaseUrl","fetchYearlyData","fetchMonthlyData","response","fetch","ok","Error","statusText","data","json","years","prev","summary","length","maxYear","Math","max","map","y","parseInt","err","console","handleEmptyData","year","handleYearChange","e","newYear","target","value","formatLargeNumber","num","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","htmlFor","id","onChange","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","label","position","offset","yAxisId","angle","orientation","tickFormatter","formatter","name","Intl","NumberFormat","format","type","stroke","strokeWidth","dot","r","activeDot","tick","fontSize","interval","textAnchor","fill","toLocaleString","join","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nconst CaliforniaFireDashboard = () => {\n  const [yearlyData, setYearlyData] = useState([]);\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [summaryStats, setSummaryStats] = useState({\n    totalFires: 0,\n    totalAcres: 0,\n    yearlyAcres: 0,\n    peakMonth: '',\n    worstYear: '',\n    worstYearAcres: 0\n  });\n  \n  const backendBaseUrl = 'http://localhost:8000';\n\n  // Load yearly data when component mounts\n  useEffect(() => {\n    fetchYearlyData();\n  }, []);\n\n  // Fetch monthly data when selected year changes\n  useEffect(() => {\n    if (selectedYear) {\n      fetchMonthlyData(selectedYear);\n    }\n  }, [selectedYear]);\n\n  const fetchYearlyData = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${backendBaseUrl}/api/stats/yearly?dataset=firep23_1`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch yearly data: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      setYearlyData(data.yearlyData);\n      setAvailableYears(data.years);\n      \n      // Update summary stats\n      setSummaryStats(prev => ({\n        ...prev,\n        totalFires: data.summary.totalFires,\n        totalAcres: data.summary.totalAcres,\n        worstYear: data.summary.worstYear,\n        worstYearAcres: data.summary.worstYearAcres\n      }));\n      \n      // Set the most recent year as the default selected year\n      if (data.years.length > 0) {\n        const maxYear = Math.max(...data.years.map(y => parseInt(y)));\n        setSelectedYear(maxYear);\n      }\n      \n    } catch (err) {\n      console.error(\"Error fetching yearly fire data:\", err);\n      setError(\"Failed to load yearly fire data. Please try again later.\");\n      handleEmptyData();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchMonthlyData = async (year) => {\n    try {\n      // Only show loading indicator for initial data load, not for year changes\n      if (monthlyData.length === 0) {\n        setLoading(true);\n      }\n      \n      const response = await fetch(`${backendBaseUrl}/api/stats/monthly?dataset=firep23_1&year=${year}`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch monthly data: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      setMonthlyData(data.monthlyData);\n      \n      // Update summary stats for the selected year\n      setSummaryStats(prev => ({\n        ...prev,\n        yearlyAcres: data.summary.totalAcres,\n        peakMonth: data.summary.peakMonth\n      }));\n      \n    } catch (err) {\n      console.error(`Error fetching monthly fire data for year ${year}:`, err);\n      setError(`Failed to load monthly data for ${year}. Please try again later.`);\n      setMonthlyData([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Empty state handler\n  const handleEmptyData = () => {\n    setYearlyData([]);\n    setMonthlyData([]);\n    setAvailableYears([]);\n    setSelectedYear(null);\n    setSummaryStats({\n      totalFires: 0,\n      totalAcres: 0,\n      yearlyAcres: 0,\n      peakMonth: '',\n      worstYear: '',\n      worstYearAcres: 0\n    });\n  };\n\n  const handleYearChange = (e) => {\n    const newYear = parseInt(e.target.value);\n    setSelectedYear(newYear);\n  };\n\n  const formatLargeNumber = (num) => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num;\n  };\n\n  if (loading && yearlyData.length === 0) return (\n    <div className=\"p-4 text-center\">\n      <div className=\"text-lg font-medium text-gray-700\">Loading fire data...</div>\n    </div>\n  );\n\n  if (error) return (\n    <div className=\"p-4 text-center\">\n      <div className=\"text-lg font-medium text-red-500\">{error}</div>\n      <button \n        onClick={fetchYearlyData} \n        className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n      >\n        Try Again\n      </button>\n    </div>\n  );\n\n  if (availableYears.length === 0 || !selectedYear) {\n    return (\n      <div className=\"p-4 text-center\">\n        <div className=\"text-lg font-medium text-amber-500\">No fire data available for visualization.</div>\n        <button \n          onClick={fetchYearlyData} \n          className=\"mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n        >\n          Refresh Data\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white p-6 rounded-lg shadow-lg\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-2\">California Wildfire Dashboard</h1>\n        <p className=\"text-gray-600\">\n          Visualization of wildfire data from California showing yearly trends and monthly breakdown.\n        </p>\n      </div>\n      \n      {/* Year selector */}\n      <div className=\"mb-4\">\n        <label htmlFor=\"year-select\" className=\"mr-2 font-medium\">Select Year for Monthly Data:</label>\n        <select\n          id=\"year-select\"\n          value={selectedYear}\n          onChange={handleYearChange}\n          className=\"p-2 border rounded\"\n        >\n          {availableYears.map(year => (\n            <option key={year} value={year}>{year}</option>\n          ))}\n        </select>\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Yearly Fire Count Chart */}\n        <div className=\"bg-gray-50 p-4 rounded shadow\">\n          <h2 className=\"text-xl font-semibold mb-4\">Wildfires over the years</h2>\n          <div className=\"h-80\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <LineChart\n                data={yearlyData}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis \n                  dataKey=\"year\"\n                  label={{ value: 'Year', position: 'insideBottom', offset: -5 }}\n                />\n                <YAxis \n                  yAxisId=\"left\"\n                  label={{ value: 'Count of Fires', angle: -90, position: 'insideLeft' }}\n                />\n                <YAxis \n                  yAxisId=\"right\" \n                  orientation=\"right\" \n                  label={{ value: 'Acres Burned', angle: 90, position: 'insideRight' }}\n                  tickFormatter={formatLargeNumber}\n                />\n                <Tooltip formatter={(value, name) => [\n                  name === 'acres' ? new Intl.NumberFormat().format(value) : value,\n                  name === 'acres' ? 'Acres Burned' : 'Number of Fires'\n                ]} />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"fires\" \n                  name=\"Fire Count\"\n                  stroke=\"#2563eb\" \n                  strokeWidth={2}\n                  dot={{ r: 4 }}\n                  activeDot={{ r: 6 }}\n                  yAxisId=\"left\"\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"acres\" \n                  name=\"Acres Burned\"\n                  stroke=\"#dc2626\" \n                  strokeWidth={2}\n                  dot={{ r: 4 }}\n                  activeDot={{ r: 6 }}\n                  yAxisId=\"right\"\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n        \n        {/* Monthly Acres Burned Chart */}\n        <div className=\"bg-gray-50 p-4 rounded shadow\">\n          <h2 className=\"text-xl font-semibold mb-4\">Acres burned by month in {selectedYear}</h2>\n          {loading && monthlyData.length === 0 ? (\n            <div className=\"h-80 flex items-center justify-center\">\n              <p className=\"text-gray-500\">Loading monthly data...</p>\n            </div>\n          ) : (\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart\n                  data={monthlyData}\n                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"month\" \n                    tick={{fontSize: 10}}\n                    interval={0}\n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={80}\n                  />\n                  <YAxis \n                    label={{ value: 'Acres Burned', angle: -90, position: 'insideLeft' }}\n                    tickFormatter={formatLargeNumber}\n                  />\n                  <Tooltip formatter={(value) => new Intl.NumberFormat().format(value)} />\n                  <Legend />\n                  <Bar \n                    dataKey=\"acres\" \n                    name=\"Acres Burned\"\n                    fill=\"#dc2626\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Fire Data Summary */}\n      <div className=\"mt-4 grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white p-4 rounded shadow-sm border border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-800\">Total Fires</h3>\n          <p className=\"text-3xl font-bold text-blue-600\">\n            {summaryStats.totalFires.toLocaleString()}\n          </p>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded shadow-sm border border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-800\">Total Acres (All Years)</h3>\n          <p className=\"text-3xl font-bold text-orange-600\">\n            {summaryStats.totalAcres.toLocaleString()}\n          </p>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded shadow-sm border border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-800\">Total Acres in {selectedYear}</h3>\n          <p className=\"text-3xl font-bold text-red-600\">\n            {summaryStats.yearlyAcres.toLocaleString()}\n          </p>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded shadow-sm border border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-800\">Peak Month in {selectedYear}</h3>\n          <p className=\"text-3xl font-bold text-amber-600\">\n            {summaryStats.peakMonth || 'N/A'}\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"mt-6 p-4 bg-blue-50 rounded\">\n        <h3 className=\"font-medium mb-2\">Data Source Information</h3>\n        <p className=\"text-sm text-gray-700\">\n          This visualization uses data from the firep23_1.geojson file, which contains California wildfire records.\n          The yearly chart displays both the count of fire incidents and total acres burned per year (based on the YEAR_ and GIS_ACRES fields), \n          while the monthly chart shows acres burned by month for the selected year.\n        </p>\n        <p className=\"text-sm text-gray-700 mt-2\">\n          Years Available: {availableYears.join(', ')}\n        </p>\n        <p className=\"text-sm text-gray-700 mt-2\">\n          Worst Fire Year: {summaryStats.worstYear || 'N/A'} \n          {summaryStats.worstYear && ` (${new Intl.NumberFormat().format(summaryStats.worstYearAcres)} acres)`}\n        </p>\n      </div>\n      \n      <div className=\"mt-4 text-right\">\n        <button \n          onClick={fetchYearlyData} \n          className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n        >\n          Refresh Data\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CaliforniaFireDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}