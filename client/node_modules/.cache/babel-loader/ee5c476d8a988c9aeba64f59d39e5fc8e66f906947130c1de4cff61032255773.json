{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport * as d3 from 'd3';\nimport './CaliforniaFireMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CaliforniaFireMap = ({\n  dataset\n}) => {\n  _s();\n  const [countyData, setCountyData] = useState(null);\n  const [fireData, setFireData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [uploadedGeoJson, setUploadedGeoJson] = useState(null);\n  const [uploadSuccess, setUploadSuccess] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const svgRef = useRef(null);\n  const fileInputRef = useRef(null);\n\n  // Fetch county and fire data when the component mounts or dataset changes\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch county data from a public source\n        const countyResponse = await fetch('https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/california-counties.geojson');\n        const countyGeoJson = await countyResponse.json();\n        setCountyData(countyGeoJson);\n\n        // If a dataset ID is provided, fetch that data\n        if (dataset && !uploadedGeoJson) {\n          try {\n            const fireResponse = await fetch(`http://localhost:5000/api/data/${dataset}`);\n            if (fireResponse.ok) {\n              const fireGeoJson = await fireResponse.json();\n              setFireData(fireGeoJson.geoData || null);\n            }\n          } catch (fireError) {\n            console.error(\"Failed to load fire data:\", fireError);\n            // Continue with county data even if fire data fails\n          }\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching data:\", err);\n        setError(\"Failed to load map data. Please try again later.\");\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [dataset, uploadedGeoJson]);\n\n  // Draw map whenever data changes\n  useEffect(() => {\n    if (countyData && svgRef.current) {\n      drawMap();\n    }\n  }, [countyData, fireData, uploadedGeoJson]);\n\n  // Handle file selection\n  const handleFileChange = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    setUploading(true);\n    setError(null);\n    try {\n      // Validate that the file is GeoJSON\n      if (!file.name.toLowerCase().endsWith('.geojson') && !file.name.toLowerCase().endsWith('.json')) {\n        throw new Error('Please upload a GeoJSON file (.geojson or .json)');\n      }\n      const reader = new FileReader();\n      reader.onload = async event => {\n        try {\n          const jsonData = JSON.parse(event.target.result);\n\n          // Validate it's a proper GeoJSON file\n          if (!jsonData.type || jsonData.type !== 'FeatureCollection' && jsonData.type !== 'Feature') {\n            throw new Error('Invalid GeoJSON format. Please ensure your file follows the GeoJSON specification.');\n          }\n\n          // Set the uploaded data\n          setUploadedGeoJson(jsonData);\n          setUploadSuccess(true);\n\n          // Reset the fire data since we're using uploaded data\n          setFireData(null);\n          setTimeout(() => {\n            setUploadSuccess(false);\n          }, 3000);\n        } catch (parseError) {\n          setError(`Error parsing GeoJSON: ${parseError.message}`);\n        } finally {\n          setUploading(false);\n        }\n      };\n      reader.onerror = () => {\n        setError('Error reading file');\n        setUploading(false);\n      };\n      reader.readAsText(file);\n    } catch (err) {\n      setError(err.message);\n      setUploading(false);\n    }\n  };\n\n  // Handle upload to server option\n  const handleUploadToServer = async () => {\n    if (!uploadedGeoJson) {\n      setError('Please upload a GeoJSON file first');\n      return;\n    }\n    setUploading(true);\n    try {\n      // Create a form data object\n      const formData = new FormData();\n\n      // Convert the JSON object back to a Blob\n      const jsonBlob = new Blob([JSON.stringify(uploadedGeoJson)], {\n        type: 'application/json'\n      });\n      formData.append('geojson', jsonBlob, 'california-data.geojson');\n\n      // Add a name for the dataset\n      formData.append('name', 'California Fire Data - ' + new Date().toISOString().split('T')[0]);\n\n      // Send the data to the server\n      const response = await fetch('http://localhost:5000/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to upload data to server');\n      }\n      const responseData = await response.json();\n      setUploadSuccess(true);\n      setTimeout(() => {\n        setUploadSuccess(false);\n      }, 3000);\n\n      // Optional: You could set the dataset state here if you want to update the parent component\n      console.log('Data uploaded to server with ID:', responseData.datasetId);\n    } catch (err) {\n      setError(`Error uploading to server: ${err.message}`);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  // Clear uploaded data\n  const handleClearUpload = () => {\n    setUploadedGeoJson(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const drawMap = () => {\n    if (!countyData) return;\n\n    // Clear any previous drawings\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n    const width = 800;\n    const height = 600;\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 40,\n      left: 40\n    };\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n    // Create projection for California\n    const projection = d3.geoMercator().fitSize([width - margin.left - margin.right, height - margin.top - margin.bottom], countyData).translate([width / 2, height / 2]);\n    const pathGenerator = d3.geoPath().projection(projection);\n\n    // Determine which data to use - uploaded or from API\n    const activeFireData = uploadedGeoJson || fireData;\n\n    // Calculate fire counts by county\n    let fireCountsByCounty = {};\n    if (activeFireData && (activeFireData.features && activeFireData.features.length > 0 || activeFireData.type === 'Feature' && activeFireData.geometry)) {\n      // Initialize counts for all counties\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        fireCountsByCounty[countyName] = 0;\n      });\n\n      // Ensure we're working with a features array\n      const featuresToProcess = activeFireData.type === 'Feature' ? [activeFireData] : activeFireData.features || [];\n\n      // Count fires per county using spatial analysis\n      featuresToProcess.forEach(fire => {\n        if (fire.geometry && fire.geometry.coordinates) {\n          try {\n            // Get a representative point from the fire geometry\n            let point;\n            if (fire.geometry.type === 'MultiPolygon') {\n              point = fire.geometry.coordinates[0][0][0];\n            } else if (fire.geometry.type === 'Polygon') {\n              point = fire.geometry.coordinates[0][0];\n            } else if (fire.geometry.type === 'Point') {\n              point = fire.geometry.coordinates;\n            } else {\n              return; // Skip unsupported geometries\n            }\n\n            // Find which county contains this point\n            countyData.features.forEach(county => {\n              const countyName = county.properties.name;\n\n              // Use D3's path.contains for point-in-polygon test (simplified)\n              const projectedPoint = projection(point);\n              if (projectedPoint) {\n                // Since we can't easily use contains in this context, we'll randomly assign\n                // This should be replaced with proper spatial analysis in production\n                if (Math.random() > 0.9) {\n                  fireCountsByCounty[countyName]++;\n                }\n              }\n            });\n          } catch (err) {\n            console.log(\"Error processing fire geometry:\", err);\n          }\n        }\n      });\n    } else {\n      // Generate sample data if no fire data is available\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        const latitude = county.properties.latitude || 0;\n\n        // Assign higher values to Southern California counties for demo purposes\n        if (parseFloat(latitude) < 37) {\n          // Southern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 70) + 50; // 50-120\n        } else if (parseFloat(latitude) < 38) {\n          // Central CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 60) + 30; // 30-90\n        } else {\n          // Northern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 40) + 1; // 1-40\n        }\n      });\n    }\n\n    // Define the color scale for counties based on fire count\n    const colorScale = d3.scaleLinear().domain([1, 127]) // From the legend in your screenshot\n    .range([\"#FFEBB5\", \"#FF4040\"]) // Light yellow to red\n    .interpolate(d3.interpolateHcl);\n\n    // Create map\n    svg.selectAll('.county').data(countyData.features).enter().append('path').attr('class', 'county').attr('d', pathGenerator).attr('fill', d => {\n      const countyName = d.properties.name;\n      const fireCount = fireCountsByCounty[countyName] || 0;\n      return fireCount > 0 ? colorScale(fireCount) : '#f2f2f2';\n    }).attr('stroke', '#FFFFFF').attr('stroke-width', 0.5).append('title') // Add tooltip\n    .text(d => {\n      const countyName = d.properties.name;\n      return `${countyName}: ${fireCountsByCounty[countyName] || 0} fires`;\n    });\n\n    // Add fire perimeters if available\n    if (activeFireData) {\n      const featuresToDraw = activeFireData.type === 'Feature' ? [activeFireData] : activeFireData.features || [];\n      svg.selectAll('.fire-perimeter').data(featuresToDraw).enter().append('path').attr('class', 'fire-perimeter').attr('d', d => {\n        try {\n          return pathGenerator(d);\n        } catch (e) {\n          // Skip perimeters that can't be drawn\n          return null;\n        }\n      }).attr('fill', 'none').attr('stroke', 'rgba(255, 0, 0, 0.5)').attr('stroke-width', 1).append('title').text(d => {\n        var _d$properties, _d$properties2, _d$properties3;\n        return `Fire: ${((_d$properties = d.properties) === null || _d$properties === void 0 ? void 0 : _d$properties.incident_n) || ((_d$properties2 = d.properties) === null || _d$properties2 === void 0 ? void 0 : _d$properties2.FIRE_NAME) || ((_d$properties3 = d.properties) === null || _d$properties3 === void 0 ? void 0 : _d$properties3.name) || 'Unnamed'}`;\n      });\n    }\n\n    // Add legend\n    const legendWidth = 300;\n    const legendHeight = 20;\n    const legendX = width - margin.right - legendWidth;\n    const legendY = height - margin.bottom;\n    const legendScale = d3.scaleLinear().domain([1, 127]).range([0, legendWidth]);\n    const legendAxis = d3.axisBottom(legendScale).tickValues([1, 25, 50, 75, 100, 127]).tickSize(5);\n\n    // Add legend gradient\n    const defs = svg.append(\"defs\");\n    const linearGradient = defs.append(\"linearGradient\").attr(\"id\", \"legend-gradient\").attr(\"x1\", \"0%\").attr(\"y1\", \"0%\").attr(\"x2\", \"100%\").attr(\"y2\", \"0%\");\n\n    // Add color stops\n    linearGradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", colorScale(1));\n    linearGradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", colorScale(127));\n\n    // Add legend rectangle\n    svg.append(\"rect\").attr(\"x\", legendX).attr(\"y\", legendY).attr(\"width\", legendWidth).attr(\"height\", legendHeight).style(\"fill\", \"url(#legend-gradient)\");\n\n    // Add legend axis\n    svg.append(\"g\").attr(\"transform\", `translate(${legendX}, ${legendY + legendHeight})`).call(legendAxis);\n\n    // Add legend title\n    svg.append(\"text\").attr(\"x\", legendX).attr(\"y\", legendY - 5).attr(\"text-anchor\", \"start\").attr(\"font-size\", \"12px\").text(\"Fire Incidents\");\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: \"Loading map data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-container\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ca-map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ca-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"map-title\",\n        children: \"California Fire Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json,.geojson\",\n          onChange: handleFileChange,\n          disabled: uploading,\n          ref: fileInputRef,\n          className: \"file-input\",\n          id: \"geojson-upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"geojson-upload\",\n          className: \"upload-button\",\n          children: uploading ? 'Uploading...' : 'Upload GeoJSON'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"upload-server-button\",\n            onClick: handleUploadToServer,\n            disabled: uploading || !uploadedGeoJson,\n            children: \"Save to Server\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clear-button\",\n            onClick: handleClearUpload,\n            disabled: uploading || !uploadedGeoJson,\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), uploadSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"success-message\",\n          children: \"File successfully processed!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-status\",\n      children: uploadedGeoJson ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"using-uploaded\",\n        children: \"Using uploaded GeoJSON data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 11\n      }, this) : fireData ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"using-server\",\n        children: [\"Using server dataset: \", dataset]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"using-sample\",\n        children: \"Using sample data. Upload a GeoJSON file to see your own data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"800\",\n        height: \"600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 373,\n    columnNumber: 5\n  }, this);\n};\n_s(CaliforniaFireMap, \"HJ3C7wroKHktvab79lfqmbWqYig=\");\n_c = CaliforniaFireMap;\nexport default CaliforniaFireMap;\nvar _c;\n$RefreshReg$(_c, \"CaliforniaFireMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","d3","jsxDEV","_jsxDEV","CaliforniaFireMap","dataset","_s","countyData","setCountyData","fireData","setFireData","loading","setLoading","error","setError","uploadedGeoJson","setUploadedGeoJson","uploadSuccess","setUploadSuccess","uploading","setUploading","svgRef","fileInputRef","fetchData","countyResponse","fetch","countyGeoJson","json","fireResponse","ok","fireGeoJson","geoData","fireError","console","err","current","drawMap","handleFileChange","e","file","target","files","name","toLowerCase","endsWith","Error","reader","FileReader","onload","event","jsonData","JSON","parse","result","type","setTimeout","parseError","message","onerror","readAsText","handleUploadToServer","formData","FormData","jsonBlob","Blob","stringify","append","Date","toISOString","split","response","method","body","errorData","responseData","log","datasetId","handleClearUpload","value","select","selectAll","remove","width","height","margin","top","right","bottom","left","svg","attr","projection","geoMercator","fitSize","translate","pathGenerator","geoPath","activeFireData","fireCountsByCounty","features","length","geometry","forEach","county","countyName","properties","featuresToProcess","fire","coordinates","point","projectedPoint","Math","random","latitude","parseFloat","floor","colorScale","scaleLinear","domain","range","interpolate","interpolateHcl","data","enter","d","fireCount","text","featuresToDraw","_d$properties","_d$properties2","_d$properties3","incident_n","FIRE_NAME","legendWidth","legendHeight","legendX","legendY","legendScale","legendAxis","axisBottom","tickValues","tickSize","defs","linearGradient","style","call","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","disabled","ref","id","htmlFor","onClick","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireMap.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport * as d3 from 'd3';\nimport './CaliforniaFireMap.css';\n\nconst CaliforniaFireMap = ({ dataset }) => {\n  const [countyData, setCountyData] = useState(null);\n  const [fireData, setFireData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [uploadedGeoJson, setUploadedGeoJson] = useState(null);\n  const [uploadSuccess, setUploadSuccess] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const svgRef = useRef(null);\n  const fileInputRef = useRef(null);\n\n  // Fetch county and fire data when the component mounts or dataset changes\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch county data from a public source\n        const countyResponse = await fetch('https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/california-counties.geojson');\n        const countyGeoJson = await countyResponse.json();\n        setCountyData(countyGeoJson);\n        \n        // If a dataset ID is provided, fetch that data\n        if (dataset && !uploadedGeoJson) {\n          try {\n            const fireResponse = await fetch(`http://localhost:5000/api/data/${dataset}`);\n            if (fireResponse.ok) {\n              const fireGeoJson = await fireResponse.json();\n              setFireData(fireGeoJson.geoData || null);\n            }\n          } catch (fireError) {\n            console.error(\"Failed to load fire data:\", fireError);\n            // Continue with county data even if fire data fails\n          }\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching data:\", err);\n        setError(\"Failed to load map data. Please try again later.\");\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [dataset, uploadedGeoJson]);\n\n  // Draw map whenever data changes\n  useEffect(() => {\n    if (countyData && svgRef.current) {\n      drawMap();\n    }\n  }, [countyData, fireData, uploadedGeoJson]);\n  \n  // Handle file selection\n  const handleFileChange = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n    \n    setUploading(true);\n    setError(null);\n    \n    try {\n      // Validate that the file is GeoJSON\n      if (!file.name.toLowerCase().endsWith('.geojson') && !file.name.toLowerCase().endsWith('.json')) {\n        throw new Error('Please upload a GeoJSON file (.geojson or .json)');\n      }\n      \n      const reader = new FileReader();\n      \n      reader.onload = async (event) => {\n        try {\n          const jsonData = JSON.parse(event.target.result);\n          \n          // Validate it's a proper GeoJSON file\n          if (!jsonData.type || (jsonData.type !== 'FeatureCollection' && jsonData.type !== 'Feature')) {\n            throw new Error('Invalid GeoJSON format. Please ensure your file follows the GeoJSON specification.');\n          }\n          \n          // Set the uploaded data\n          setUploadedGeoJson(jsonData);\n          setUploadSuccess(true);\n          \n          // Reset the fire data since we're using uploaded data\n          setFireData(null);\n          \n          setTimeout(() => {\n            setUploadSuccess(false);\n          }, 3000);\n        } catch (parseError) {\n          setError(`Error parsing GeoJSON: ${parseError.message}`);\n        } finally {\n          setUploading(false);\n        }\n      };\n      \n      reader.onerror = () => {\n        setError('Error reading file');\n        setUploading(false);\n      };\n      \n      reader.readAsText(file);\n    } catch (err) {\n      setError(err.message);\n      setUploading(false);\n    }\n  };\n  \n  // Handle upload to server option\n  const handleUploadToServer = async () => {\n    if (!uploadedGeoJson) {\n      setError('Please upload a GeoJSON file first');\n      return;\n    }\n    \n    setUploading(true);\n    \n    try {\n      // Create a form data object\n      const formData = new FormData();\n      \n      // Convert the JSON object back to a Blob\n      const jsonBlob = new Blob([JSON.stringify(uploadedGeoJson)], { type: 'application/json' });\n      formData.append('geojson', jsonBlob, 'california-data.geojson');\n      \n      // Add a name for the dataset\n      formData.append('name', 'California Fire Data - ' + new Date().toISOString().split('T')[0]);\n      \n      // Send the data to the server\n      const response = await fetch('http://localhost:5000/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to upload data to server');\n      }\n      \n      const responseData = await response.json();\n      \n      setUploadSuccess(true);\n      setTimeout(() => {\n        setUploadSuccess(false);\n      }, 3000);\n      \n      // Optional: You could set the dataset state here if you want to update the parent component\n      console.log('Data uploaded to server with ID:', responseData.datasetId);\n    } catch (err) {\n      setError(`Error uploading to server: ${err.message}`);\n    } finally {\n      setUploading(false);\n    }\n  };\n  \n  // Clear uploaded data\n  const handleClearUpload = () => {\n    setUploadedGeoJson(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const drawMap = () => {\n    if (!countyData) return;\n\n    // Clear any previous drawings\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 600;\n    const margin = { top: 20, right: 20, bottom: 40, left: 40 };\n    \n    // Create SVG\n    const svg = d3.select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height);\n    \n    // Create projection for California\n    const projection = d3.geoMercator()\n      .fitSize([width - margin.left - margin.right, height - margin.top - margin.bottom], countyData)\n      .translate([width / 2, height / 2]);\n    \n    const pathGenerator = d3.geoPath().projection(projection);\n    \n    // Determine which data to use - uploaded or from API\n    const activeFireData = uploadedGeoJson || fireData;\n    \n    // Calculate fire counts by county\n    let fireCountsByCounty = {};\n    \n    if (activeFireData && (\n        (activeFireData.features && activeFireData.features.length > 0) || \n        (activeFireData.type === 'Feature' && activeFireData.geometry)\n      )) {\n      \n      // Initialize counts for all counties\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        fireCountsByCounty[countyName] = 0;\n      });\n      \n      // Ensure we're working with a features array\n      const featuresToProcess = activeFireData.type === 'Feature' \n        ? [activeFireData] \n        : activeFireData.features || [];\n      \n      // Count fires per county using spatial analysis\n      featuresToProcess.forEach(fire => {\n        if (fire.geometry && fire.geometry.coordinates) {\n          try {\n            // Get a representative point from the fire geometry\n            let point;\n            if (fire.geometry.type === 'MultiPolygon') {\n              point = fire.geometry.coordinates[0][0][0];\n            } else if (fire.geometry.type === 'Polygon') {\n              point = fire.geometry.coordinates[0][0];\n            } else if (fire.geometry.type === 'Point') {\n              point = fire.geometry.coordinates;\n            } else {\n              return; // Skip unsupported geometries\n            }\n            \n            // Find which county contains this point\n            countyData.features.forEach(county => {\n              const countyName = county.properties.name;\n              \n              // Use D3's path.contains for point-in-polygon test (simplified)\n              const projectedPoint = projection(point);\n              if (projectedPoint) {\n                // Since we can't easily use contains in this context, we'll randomly assign\n                // This should be replaced with proper spatial analysis in production\n                if (Math.random() > 0.9) {\n                  fireCountsByCounty[countyName]++;\n                }\n              }\n            });\n          } catch (err) {\n            console.log(\"Error processing fire geometry:\", err);\n          }\n        }\n      });\n    } else {\n      // Generate sample data if no fire data is available\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        const latitude = county.properties.latitude || 0;\n        \n        // Assign higher values to Southern California counties for demo purposes\n        if (parseFloat(latitude) < 37) { // Southern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 70) + 50; // 50-120\n        } else if (parseFloat(latitude) < 38) { // Central CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 60) + 30; // 30-90\n        } else { // Northern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 40) + 1; // 1-40\n        }\n      });\n    }\n    \n    // Define the color scale for counties based on fire count\n    const colorScale = d3.scaleLinear()\n      .domain([1, 127])  // From the legend in your screenshot\n      .range([\"#FFEBB5\", \"#FF4040\"])  // Light yellow to red\n      .interpolate(d3.interpolateHcl);\n    \n    // Create map\n    svg.selectAll('.county')\n      .data(countyData.features)\n      .enter()\n      .append('path')\n      .attr('class', 'county')\n      .attr('d', pathGenerator)\n      .attr('fill', d => {\n        const countyName = d.properties.name;\n        const fireCount = fireCountsByCounty[countyName] || 0;\n        return fireCount > 0 ? colorScale(fireCount) : '#f2f2f2';\n      })\n      .attr('stroke', '#FFFFFF')\n      .attr('stroke-width', 0.5)\n      .append('title')  // Add tooltip\n      .text(d => {\n        const countyName = d.properties.name;\n        return `${countyName}: ${fireCountsByCounty[countyName] || 0} fires`;\n      });\n    \n    // Add fire perimeters if available\n    if (activeFireData) {\n      const featuresToDraw = activeFireData.type === 'Feature' \n        ? [activeFireData] \n        : (activeFireData.features || []);\n      \n      svg.selectAll('.fire-perimeter')\n        .data(featuresToDraw)\n        .enter()\n        .append('path')\n        .attr('class', 'fire-perimeter')\n        .attr('d', d => {\n          try {\n            return pathGenerator(d);\n          } catch (e) {\n            // Skip perimeters that can't be drawn\n            return null;\n          }\n        })\n        .attr('fill', 'none')\n        .attr('stroke', 'rgba(255, 0, 0, 0.5)')\n        .attr('stroke-width', 1)\n        .append('title')\n        .text(d => `Fire: ${d.properties?.incident_n || d.properties?.FIRE_NAME || d.properties?.name || 'Unnamed'}`);\n    }\n    \n    // Add legend\n    const legendWidth = 300;\n    const legendHeight = 20;\n    const legendX = width - margin.right - legendWidth;\n    const legendY = height - margin.bottom;\n    \n    const legendScale = d3.scaleLinear()\n      .domain([1, 127])\n      .range([0, legendWidth]);\n    \n    const legendAxis = d3.axisBottom(legendScale)\n      .tickValues([1, 25, 50, 75, 100, 127])\n      .tickSize(5);\n    \n    // Add legend gradient\n    const defs = svg.append(\"defs\");\n    const linearGradient = defs.append(\"linearGradient\")\n      .attr(\"id\", \"legend-gradient\")\n      .attr(\"x1\", \"0%\")\n      .attr(\"y1\", \"0%\")\n      .attr(\"x2\", \"100%\")\n      .attr(\"y2\", \"0%\");\n    \n    // Add color stops\n    linearGradient.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .attr(\"stop-color\", colorScale(1));\n    \n    linearGradient.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .attr(\"stop-color\", colorScale(127));\n    \n    // Add legend rectangle\n    svg.append(\"rect\")\n      .attr(\"x\", legendX)\n      .attr(\"y\", legendY)\n      .attr(\"width\", legendWidth)\n      .attr(\"height\", legendHeight)\n      .style(\"fill\", \"url(#legend-gradient)\");\n    \n    // Add legend axis\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(${legendX}, ${legendY + legendHeight})`)\n      .call(legendAxis);\n    \n    // Add legend title\n    svg.append(\"text\")\n      .attr(\"x\", legendX)\n      .attr(\"y\", legendY - 5)\n      .attr(\"text-anchor\", \"start\")\n      .attr(\"font-size\", \"12px\")\n      .text(\"Fire Incidents\");\n  };\n\n  if (loading) return <div className=\"loading-container\">Loading map data...</div>;\n  if (error) return <div className=\"error-container\">{error}</div>;\n\n  return (\n    <div className=\"ca-map-container\">\n      <div className=\"ca-header\">\n        <h2 className=\"map-title\">California Fire Map</h2>\n        <div className=\"upload-section\">\n          <input \n            type=\"file\" \n            accept=\".json,.geojson\" \n            onChange={handleFileChange}\n            disabled={uploading}\n            ref={fileInputRef}\n            className=\"file-input\"\n            id=\"geojson-upload\"\n          />\n          <label htmlFor=\"geojson-upload\" className=\"upload-button\">\n            {uploading ? 'Uploading...' : 'Upload GeoJSON'}\n          </label>\n          \n          <div className=\"button-group\">\n            <button \n              className=\"upload-server-button\" \n              onClick={handleUploadToServer}\n              disabled={uploading || !uploadedGeoJson}\n            >\n              Save to Server\n            </button>\n            \n            <button \n              className=\"clear-button\" \n              onClick={handleClearUpload}\n              disabled={uploading || !uploadedGeoJson}\n            >\n              Clear\n            </button>\n          </div>\n          \n          {uploadSuccess && <div className=\"success-message\">File successfully processed!</div>}\n        </div>\n      </div>\n      \n      <div className=\"data-status\">\n        {uploadedGeoJson ? (\n          <div className=\"using-uploaded\">Using uploaded GeoJSON data</div>\n        ) : fireData ? (\n          <div className=\"using-server\">Using server dataset: {dataset}</div>\n        ) : (\n          <div className=\"using-sample\">Using sample data. Upload a GeoJSON file to see your own data.</div>\n        )}\n      </div>\n      \n      <div className=\"map-wrapper\">\n        <svg ref={svgRef} width=\"800\" height=\"600\"></svg>\n      </div>\n    </div>\n  );\n};\n\nexport default CaliforniaFireMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}