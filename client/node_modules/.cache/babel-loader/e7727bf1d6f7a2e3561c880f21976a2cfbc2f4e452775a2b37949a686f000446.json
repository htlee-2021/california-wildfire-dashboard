{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import*as d3 from'd3';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const RadialBarChart=_ref=>{let{yearlyData,monthlyDataByYear,availableYears,selectedMetric='fires'// 'fires' or 'acres'\n}=_ref;const radialChartRef=useRef(null);const[focusYears,setFocusYears]=useState(5);// Default to showing 5 years\nuseEffect(()=>{if(monthlyDataByYear&&Object.keys(monthlyDataByYear).length>0){createRadialBarChart();}},[monthlyDataByYear,selectedMetric,availableYears,focusYears]);const formatLargeNumber=num=>{if(num>=1000000){return`${(num/1000000).toFixed(1)}M`;}else if(num>=1000){return`${(num/1000).toFixed(1)}K`;}return num;};const createRadialBarChart=()=>{if(!radialChartRef.current)return;// Clear previous chart\nd3.select(radialChartRef.current).selectAll(\"*\").remove();// Prepare data for the radial chart\nconst processedData=[];const months=['January','February','March','April','May','June','July','August','September','October','November','December'];// Get the most recent years based on focus selection\nconst sortedYears=[...availableYears].sort((a,b)=>b-a);const yearsToShow=sortedYears.slice(0,focusYears);// Create data structure for the radial chart\nyearsToShow.forEach(year=>{if(monthlyDataByYear[year]){months.forEach((month,i)=>{const monthData=monthlyDataByYear[year].find(m=>m.month===month);if(monthData){processedData.push({year:year,month:month,monthIndex:i,value:selectedMetric==='fires'?monthData.fires:monthData.acres});}else{// Add empty data point if month data is missing\nprocessedData.push({year:year,month:month,monthIndex:i,value:0});}});}});// Set dimensions and margins\nconst margin={top:60,right:60,bottom:60,left:60};const width=radialChartRef.current.clientWidth||600;const height=width;// Make it square for better radial visualization\nconst innerRadius=80;const outerRadius=Math.min(width,height)/2-margin.top;// Create SVG\nconst svg=d3.select(radialChartRef.current).attr(\"width\",width).attr(\"height\",height).append(\"g\").attr(\"transform\",`translate(${width/2}, ${height/2})`);// Define scales\n// Angle scale for months\nconst angleScale=d3.scaleLinear().domain([0,12]).range([0,2*Math.PI]);// Radius scale for values\nconst maxValue=d3.max(processedData,d=>d.value);const radiusScale=d3.scaleLinear().domain([0,maxValue]).range([innerRadius,outerRadius]);// Year scale for color - use a more visually distinguishable color scheme\nconst colorScale=d3.scaleOrdinal().domain(yearsToShow).range(['#3b82f6',// blue\n'#ef4444',// red\n'#f59e0b',// amber\n'#10b981',// emerald\n'#8b5cf6',// violet\n'#ec4899',// pink\n'#6366f1',// indigo\n'#14b8a6',// teal\n'#f97316',// orange\n'#84cc16'// lime\n]);// Create month axis (circles and labels)\nconst axisCircles=svg.append(\"g\").attr(\"class\",\"axis-circles\");// Add concentric circles for value scale\naxisCircles.selectAll(\"circle\").data(d3.range(1,6))// Create 5 concentric circles\n.enter().append(\"circle\").attr(\"r\",d=>innerRadius+d*(outerRadius-innerRadius)/5).attr(\"fill\",\"none\").attr(\"stroke\",\"#e5e7eb\").attr(\"stroke-dasharray\",\"2,2\").attr(\"stroke-width\",0.5);// Add value labels to circles\naxisCircles.selectAll(\".radius-label\").data(d3.range(1,6)).enter().append(\"text\").attr(\"class\",\"radius-label\").attr(\"y\",d=>-(innerRadius+d*(outerRadius-innerRadius)/5)).attr(\"dy\",\"0.35em\").attr(\"text-anchor\",\"middle\").attr(\"font-size\",\"10px\").attr(\"fill\",\"#6b7280\").text(d=>{const value=maxValue*(d/5);return formatLargeNumber(Math.round(value));});// Add month segments and labels\nconst monthSegments=svg.append(\"g\").attr(\"class\",\"month-segments\");// Add axis lines for months\nmonthSegments.selectAll(\"line\").data(months).enter().append(\"line\").attr(\"x1\",0).attr(\"y1\",0).attr(\"x2\",(d,i)=>Math.cos(angleScale(i))*outerRadius).attr(\"y2\",(d,i)=>Math.sin(angleScale(i))*outerRadius).attr(\"stroke\",\"#e5e7eb\").attr(\"stroke-width\",0.5);// Add month labels - position slightly beyond the outer radius\nsvg.selectAll(\".month-label\").data(months).enter().append(\"text\").attr(\"class\",\"month-label\").attr(\"x\",(d,i)=>Math.cos(angleScale(i-3))*(outerRadius+20)).attr(\"y\",(d,i)=>Math.sin(angleScale(i-3))*(outerRadius+20)).attr(\"dy\",\"0.35em\").attr(\"text-anchor\",(d,i)=>{const angle=angleScale(i)%(2*Math.PI);if(Math.abs(angle-Math.PI/2)<0.1||Math.abs(angle-Math.PI*3/2)<0.1)return\"middle\";return angle>Math.PI/2&&angle<Math.PI*3/2?\"end\":\"start\";}).attr(\"font-size\",\"12px\").attr(\"font-weight\",d=>{// Highlight summer months to align with the yearly dashboard emphasis\nreturn d==='June'||d==='July'||d==='August'||d==='September'?\"bold\":\"normal\";}).attr(\"fill\",d=>{// Highlight summer months with different color\nreturn d==='June'||d==='July'||d==='August'||d==='September'?\"#d97706\":\"#4b5563\";}).text(d=>d.substring(0,3));// Just show first 3 letters\n// Highlight summer months with subtle background\nconst summerAngleStart=angleScale(4);// June (index 5)\nconst summerAngleEnd=angleScale(8);// September (index 8)\nconst summerArc=d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(summerAngleStart).endAngle(summerAngleEnd);svg.append(\"path\").attr(\"d\",summerArc).attr(\"fill\",\"#fef3c7\")// Very light amber\n.attr(\"stroke\",\"#f59e0b\")// Amber border\n.attr(\"stroke-width\",1).attr(\"stroke-dasharray\",\"3,3\").attr(\"fill-opacity\",0.2);// Group data by year\nconst dataByYear=d3.group(processedData,d=>d.year);// Calculate bar width in radians - how wide each month segment will be\nconst barWidth=2*Math.PI/12*0.8;// 80% of the month segment\n// Calculate bar spacing between years (within each month segment)\nconst yearBarWidth=barWidth/yearsToShow.length;// Create radial bars - we'll use arcs to create bars\nconst barsGroup=svg.append(\"g\").attr(\"class\",\"radial-bars\");// For each year and month, create a radial bar\nyearsToShow.forEach((year,yearIndex)=>{const yearData=dataByYear.get(year)||[];// Create bars for this year's data\nyearData.forEach(d=>{if(d.value>0){// Only draw if there's a value\n// Calculate the starting angle for this month's segment\nconst monthAngle=angleScale(d.monthIndex);// Each year's bar will be positioned within the month's segment\n// yearIndex determines the position within the segment\nconst barStartAngle=monthAngle-barWidth/2+yearIndex*yearBarWidth;const barEndAngle=barStartAngle+yearBarWidth;// Create a custom arc for this bar\nconst arc=d3.arc().innerRadius(innerRadius).outerRadius(radiusScale(d.value)).startAngle(barStartAngle).endAngle(barEndAngle);// Add the bar\nbarsGroup.append(\"path\").attr(\"d\",arc).attr(\"fill\",colorScale(year)).attr(\"stroke\",\"white\").attr(\"stroke-width\",0.5).attr(\"opacity\",0.8).on(\"mouseover\",function(event){// Highlight the bar on hover\nd3.select(this).transition().duration(200).attr(\"opacity\",1);// Show tooltip\ntooltip.transition().duration(200).style(\"opacity\",0.9);tooltip.html(`\n                <strong>${d.month} ${d.year}</strong><br/>\n                ${selectedMetric==='fires'?'Fires':'Acres Burned'}: ${d.value.toLocaleString()}\n              `).style(\"left\",event.pageX+10+\"px\").style(\"top\",event.pageY-28+\"px\");}).on(\"mouseout\",function(){// Return to normal opacity\nd3.select(this).transition().duration(200).attr(\"opacity\",0.8);// Hide tooltip\ntooltip.transition().duration(500).style(\"opacity\",0);});}});});// Add central label\nsvg.append(\"text\").attr(\"text-anchor\",\"middle\").attr(\"dy\",\"0.35em\").attr(\"font-size\",\"14px\").attr(\"font-weight\",\"bold\").text(selectedMetric==='fires'?\"Fire Count\":\"Acres Burned\");// Create legend with year labels\nconst legend=svg.append(\"g\").attr(\"class\",\"legend\").attr(\"transform\",`translate(${-width/2+20}, ${-height/2+20})`);// Add title above legend\nlegend.append(\"text\").attr(\"x\",0).attr(\"y\",-10).attr(\"font-size\",\"12px\").attr(\"font-weight\",\"bold\").text(\"Years:\");// Create legend items\nyearsToShow.forEach((year,i)=>{// Calculate position - when more than 5 years, make two columns\nconst column=i>=Math.ceil(yearsToShow.length/2)?1:0;const row=i%Math.ceil(yearsToShow.length/2);const legendItem=legend.append(\"g\").attr(\"transform\",`translate(${column*80}, ${row*20})`).attr(\"class\",\"legend-item\");legendItem.append(\"rect\").attr(\"width\",15).attr(\"height\",15).attr(\"fill\",colorScale(year));legendItem.append(\"text\").attr(\"x\",20).attr(\"y\",12).text(year).attr(\"font-size\",\"12px\");});// Add title\nsvg.append(\"text\").attr(\"x\",0).attr(\"y\",-height/2+20).attr(\"text-anchor\",\"middle\").attr(\"font-size\",\"16px\").attr(\"font-weight\",\"bold\").text(`${focusYears}-Year Monthly ${selectedMetric==='fires'?'Fire Counts':'Acres Burned'} (${yearsToShow[yearsToShow.length-1]}-${yearsToShow[0]})`);// Create tooltip\nconst tooltip=d3.select(\"body\").selectAll('.tooltip').data([null]).join('div').attr('class','tooltip').style('opacity',0);// Find the average max values for summer months\nconst summerMaxes={};months.slice(5,9).forEach(month=>{// June, July, August, September\nconst monthIndex=months.indexOf(month);const monthData=processedData.filter(d=>d.monthIndex===monthIndex);summerMaxes[month]=d3.max(monthData,d=>d.value);});};return/*#__PURE__*/_jsxs(\"div\",{className:\"chart-container\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"section-title\",children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"section-icon\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\",clipRule:\"evenodd\"})}),\"Monthly Fire Patterns (Radial Bar Chart)\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-description\",children:[\"This radial bar chart shows the seasonal pattern of \",selectedMetric==='fires'?'fire occurrences':'acres burned',\"across multiple years. Each bar represents a month's data for a specific year, with longer bars indicating higher values. The highlighted section shows the peak fire season (June-September).\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"control-panel\",style:{marginBottom:'15px',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"label\",{style:{marginRight:'10px',fontWeight:'medium'},children:\"Years to display:\"}),/*#__PURE__*/_jsxs(\"select\",{value:focusYears,onChange:e=>setFocusYears(Number(e.target.value)),style:{padding:'5px 10px',borderRadius:'4px',border:'1px solid #d1d5db'},children:[/*#__PURE__*/_jsx(\"option\",{value:3,children:\"Last 3 years\"}),/*#__PURE__*/_jsx(\"option\",{value:5,children:\"Last 5 years\"}),/*#__PURE__*/_jsx(\"option\",{value:10,children:\"Last 10 years\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chart-canvas\",style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(\"svg\",{ref:radialChartRef,width:\"100%\",height:\"600\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"chart-notes\",style:{marginTop:'15px',fontSize:'0.875rem',color:'#6b7280',fontStyle:'italic'},children:[\"Note: This visualization shows discrete bars for each year's monthly data, making it easier to compare values accurately. The height of each bar directly represents the number of \",selectedMetric==='fires'?'fires':'acres burned',\".\"]})]});};export default RadialBarChart;","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsx","_jsx","jsxs","_jsxs","RadialBarChart","_ref","yearlyData","monthlyDataByYear","availableYears","selectedMetric","radialChartRef","focusYears","setFocusYears","Object","keys","length","createRadialBarChart","formatLargeNumber","num","toFixed","current","select","selectAll","remove","processedData","months","sortedYears","sort","a","b","yearsToShow","slice","forEach","year","month","i","monthData","find","m","push","monthIndex","value","fires","acres","margin","top","right","bottom","left","width","clientWidth","height","innerRadius","outerRadius","Math","min","svg","attr","append","angleScale","scaleLinear","domain","range","PI","maxValue","max","d","radiusScale","colorScale","scaleOrdinal","axisCircles","data","enter","text","round","monthSegments","cos","sin","angle","abs","substring","summerAngleStart","summerAngleEnd","summerArc","arc","startAngle","endAngle","dataByYear","group","barWidth","yearBarWidth","barsGroup","yearIndex","yearData","get","monthAngle","barStartAngle","barEndAngle","on","event","transition","duration","tooltip","style","html","toLocaleString","pageX","pageY","legend","column","ceil","row","legendItem","join","summerMaxes","indexOf","filter","className","children","xmlns","viewBox","fill","fillRule","clipRule","marginBottom","textAlign","marginRight","fontWeight","onChange","e","Number","target","padding","borderRadius","border","display","justifyContent","ref","marginTop","fontSize","color","fontStyle"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard -frontend/california-wildfire-dashboard/client/src/components/RadialBarChart.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\n\nexport const RadialBarChart = ({ \n  yearlyData, \n  monthlyDataByYear,\n  availableYears,\n  selectedMetric = 'fires' // 'fires' or 'acres'\n}) => {\n  const radialChartRef = useRef(null);\n  const [focusYears, setFocusYears] = useState(5); // Default to showing 5 years\n  \n  useEffect(() => {\n    if (monthlyDataByYear && Object.keys(monthlyDataByYear).length > 0) {\n      createRadialBarChart();\n    }\n  }, [monthlyDataByYear, selectedMetric, availableYears, focusYears]);\n  \n  const formatLargeNumber = (num) => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num;\n  };\n  \n  const createRadialBarChart = () => {\n    if (!radialChartRef.current) return;\n    \n    // Clear previous chart\n    d3.select(radialChartRef.current).selectAll(\"*\").remove();\n    \n    // Prepare data for the radial chart\n    const processedData = [];\n    const months = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    \n    // Get the most recent years based on focus selection\n    const sortedYears = [...availableYears].sort((a, b) => b - a);\n    const yearsToShow = sortedYears.slice(0, focusYears);\n    \n    // Create data structure for the radial chart\n    yearsToShow.forEach(year => {\n      if (monthlyDataByYear[year]) {\n        months.forEach((month, i) => {\n          const monthData = monthlyDataByYear[year].find(m => m.month === month);\n          if (monthData) {\n            processedData.push({\n              year: year,\n              month: month,\n              monthIndex: i,\n              value: selectedMetric === 'fires' ? monthData.fires : monthData.acres\n            });\n          } else {\n            // Add empty data point if month data is missing\n            processedData.push({\n              year: year,\n              month: month,\n              monthIndex: i,\n              value: 0\n            });\n          }\n        });\n      }\n    });\n    \n    // Set dimensions and margins\n    const margin = { top: 60, right: 60, bottom: 60, left: 60 };\n    const width = radialChartRef.current.clientWidth || 600;\n    const height = width; // Make it square for better radial visualization\n    const innerRadius = 80;\n    const outerRadius = Math.min(width, height) / 2 - margin.top;\n    \n    // Create SVG\n    const svg = d3.select(radialChartRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    \n    // Define scales\n    // Angle scale for months\n    const angleScale = d3.scaleLinear()\n      .domain([0, 12])\n      .range([0, 2 * Math.PI]);\n    \n    // Radius scale for values\n    const maxValue = d3.max(processedData, d => d.value);\n    const radiusScale = d3.scaleLinear()\n      .domain([0, maxValue])\n      .range([innerRadius, outerRadius]);\n    \n    // Year scale for color - use a more visually distinguishable color scheme\n    const colorScale = d3.scaleOrdinal()\n      .domain(yearsToShow)\n      .range([\n        '#3b82f6', // blue\n        '#ef4444', // red\n        '#f59e0b', // amber\n        '#10b981', // emerald\n        '#8b5cf6', // violet\n        '#ec4899', // pink\n        '#6366f1', // indigo\n        '#14b8a6', // teal\n        '#f97316', // orange\n        '#84cc16'  // lime\n      ]);\n    \n    // Create month axis (circles and labels)\n    const axisCircles = svg.append(\"g\")\n      .attr(\"class\", \"axis-circles\");\n    \n    // Add concentric circles for value scale\n    axisCircles.selectAll(\"circle\")\n      .data(d3.range(1, 6)) // Create 5 concentric circles\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", d => innerRadius + (d * (outerRadius - innerRadius) / 5))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#e5e7eb\")\n      .attr(\"stroke-dasharray\", \"2,2\")\n      .attr(\"stroke-width\", 0.5);\n    \n    // Add value labels to circles\n    axisCircles.selectAll(\".radius-label\")\n      .data(d3.range(1, 6))\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"radius-label\")\n      .attr(\"y\", d => -(innerRadius + (d * (outerRadius - innerRadius) / 5)))\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"10px\")\n      .attr(\"fill\", \"#6b7280\")\n      .text(d => {\n        const value = maxValue * (d / 5);\n        return formatLargeNumber(Math.round(value));\n      });\n    \n    // Add month segments and labels\n    const monthSegments = svg.append(\"g\")\n      .attr(\"class\", \"month-segments\");\n    \n    // Add axis lines for months\n    monthSegments.selectAll(\"line\")\n      .data(months)\n      .enter()\n      .append(\"line\")\n      .attr(\"x1\", 0)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", (d, i) => Math.cos(angleScale(i)) * outerRadius)\n      .attr(\"y2\", (d, i) => Math.sin(angleScale(i)) * outerRadius)\n      .attr(\"stroke\", \"#e5e7eb\")\n      .attr(\"stroke-width\", 0.5);\n    \n    // Add month labels - position slightly beyond the outer radius\n    svg.selectAll(\".month-label\")\n      .data(months)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"month-label\")\n      .attr(\"x\", (d, i) => Math.cos(angleScale(i-3)) * (outerRadius + 20))\n      .attr(\"y\", (d, i) => Math.sin(angleScale(i-3)) * (outerRadius + 20))\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"text-anchor\", (d, i) => {\n        const angle = angleScale(i) % (2 * Math.PI);\n        if (Math.abs(angle - Math.PI/2) < 0.1 || Math.abs(angle - Math.PI*3/2) < 0.1) return \"middle\";\n        return (angle > Math.PI/2 && angle < Math.PI*3/2) ? \"end\" : \"start\";\n      })\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-weight\", (d) => {\n        // Highlight summer months to align with the yearly dashboard emphasis\n        return (d === 'June' || d === 'July' || d === 'August' || d === 'September') ? \"bold\" : \"normal\";\n      })\n      .attr(\"fill\", (d) => {\n        // Highlight summer months with different color\n        return (d === 'June' || d === 'July' || d === 'August' || d === 'September') ? \"#d97706\" : \"#4b5563\";\n      })\n      .text(d => d.substring(0, 3)); // Just show first 3 letters\n    \n    // Highlight summer months with subtle background\n    const summerAngleStart = angleScale(4);  // June (index 5)\n    const summerAngleEnd = angleScale(8); // September (index 8)\n    \n    const summerArc = d3.arc()\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius)\n      .startAngle(summerAngleStart)\n      .endAngle(summerAngleEnd);\n    \n    svg.append(\"path\")\n      .attr(\"d\", summerArc)\n      .attr(\"fill\", \"#fef3c7\") // Very light amber\n      .attr(\"stroke\", \"#f59e0b\") // Amber border\n      .attr(\"stroke-width\", 1)\n      .attr(\"stroke-dasharray\", \"3,3\")\n      .attr(\"fill-opacity\", 0.2);\n    \n    \n    \n    // Group data by year\n    const dataByYear = d3.group(processedData, d => d.year);\n    \n    // Calculate bar width in radians - how wide each month segment will be\n    const barWidth = (2 * Math.PI) / 12 * 0.8; // 80% of the month segment\n    \n    // Calculate bar spacing between years (within each month segment)\n    const yearBarWidth = barWidth / yearsToShow.length;\n    \n    // Create radial bars - we'll use arcs to create bars\n    const barsGroup = svg.append(\"g\")\n      .attr(\"class\", \"radial-bars\");\n    \n    // For each year and month, create a radial bar\n    yearsToShow.forEach((year, yearIndex) => {\n      const yearData = dataByYear.get(year) || [];\n      \n      // Create bars for this year's data\n      yearData.forEach(d => {\n        if (d.value > 0) { // Only draw if there's a value\n          // Calculate the starting angle for this month's segment\n          const monthAngle = angleScale(d.monthIndex);\n          \n          // Each year's bar will be positioned within the month's segment\n          // yearIndex determines the position within the segment\n          const barStartAngle = monthAngle - (barWidth / 2) + (yearIndex * yearBarWidth);\n          const barEndAngle = barStartAngle + yearBarWidth;\n          \n          // Create a custom arc for this bar\n          const arc = d3.arc()\n            .innerRadius(innerRadius)\n            .outerRadius(radiusScale(d.value))\n            .startAngle(barStartAngle)\n            .endAngle(barEndAngle);\n          \n          // Add the bar\n          barsGroup.append(\"path\")\n            .attr(\"d\", arc)\n            .attr(\"fill\", colorScale(year))\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 0.5)\n            .attr(\"opacity\", 0.8)\n            .on(\"mouseover\", function(event) {\n              // Highlight the bar on hover\n              d3.select(this)\n                .transition()\n                .duration(200)\n                .attr(\"opacity\", 1);\n              \n              // Show tooltip\n              tooltip.transition()\n                .duration(200)\n                .style(\"opacity\", 0.9);\n              \n              tooltip.html(`\n                <strong>${d.month} ${d.year}</strong><br/>\n                ${selectedMetric === 'fires' ? 'Fires' : 'Acres Burned'}: ${d.value.toLocaleString()}\n              `)\n                .style(\"left\", (event.pageX + 10) + \"px\")\n                .style(\"top\", (event.pageY - 28) + \"px\");\n            })\n            .on(\"mouseout\", function() {\n              // Return to normal opacity\n              d3.select(this)\n                .transition()\n                .duration(200)\n                .attr(\"opacity\", 0.8);\n              \n              // Hide tooltip\n              tooltip.transition()\n                .duration(500)\n                .style(\"opacity\", 0);\n            });\n        }\n      });\n    });\n    \n    // Add central label\n    svg.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"font-size\", \"14px\")\n      .attr(\"font-weight\", \"bold\")\n      .text(selectedMetric === 'fires' ? \"Fire Count\" : \"Acres Burned\");\n    \n    // Create legend with year labels\n    const legend = svg.append(\"g\")\n      .attr(\"class\", \"legend\")\n      .attr(\"transform\", `translate(${-width/2 + 20}, ${-height/2 + 20})`);\n    \n    // Add title above legend\n    legend.append(\"text\")\n      .attr(\"x\", 0)\n      .attr(\"y\", -10)\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-weight\", \"bold\")\n      .text(\"Years:\");\n    \n    // Create legend items\n    yearsToShow.forEach((year, i) => {\n      // Calculate position - when more than 5 years, make two columns\n      const column = i >= Math.ceil(yearsToShow.length / 2) ? 1 : 0;\n      const row = i % Math.ceil(yearsToShow.length / 2);\n      \n      const legendItem = legend.append(\"g\")\n        .attr(\"transform\", `translate(${column * 80}, ${row * 20})`)\n        .attr(\"class\", \"legend-item\");\n      \n      legendItem.append(\"rect\")\n        .attr(\"width\", 15)\n        .attr(\"height\", 15)\n        .attr(\"fill\", colorScale(year));\n      \n      legendItem.append(\"text\")\n        .attr(\"x\", 20)\n        .attr(\"y\", 12)\n        .text(year)\n        .attr(\"font-size\", \"12px\");\n    });\n    \n    // Add title\n    svg.append(\"text\")\n      .attr(\"x\", 0)\n      .attr(\"y\", -height/2 + 20)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"16px\")\n      .attr(\"font-weight\", \"bold\")\n      .text(`${focusYears}-Year Monthly ${selectedMetric === 'fires' ? 'Fire Counts' : 'Acres Burned'} (${yearsToShow[yearsToShow.length-1]}-${yearsToShow[0]})`);\n    \n    // Create tooltip\n    const tooltip = d3.select(\"body\")\n      .selectAll('.tooltip')\n      .data([null])\n      .join('div')\n      .attr('class', 'tooltip')\n      .style('opacity', 0);\n    \n    // Find the average max values for summer months\n    const summerMaxes = {};\n    months.slice(5, 9).forEach(month => { // June, July, August, September\n      const monthIndex = months.indexOf(month);\n      const monthData = processedData.filter(d => d.monthIndex === monthIndex);\n      summerMaxes[month] = d3.max(monthData, d => d.value);\n    });\n    \n\n    \n    \n    \n    \n    \n  };\n  \n  return (\n    <div className=\"chart-container\">\n      <h3 className=\"section-title\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"section-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n        </svg>\n        Monthly Fire Patterns (Radial Bar Chart)\n      </h3>\n      <div className=\"chart-description\">\n        This radial bar chart shows the seasonal pattern of {selectedMetric === 'fires' ? 'fire occurrences' : 'acres burned'} \n        across multiple years. Each bar represents a month's data for a specific year, with longer bars indicating higher values.\n        The highlighted section shows the peak fire season (June-September).\n      </div>\n      \n      <div className=\"control-panel\" style={{ marginBottom: '15px', textAlign: 'center' }}>\n        <label style={{ marginRight: '10px', fontWeight: 'medium' }}>\n          Years to display:\n        </label>\n        <select \n          value={focusYears} \n          onChange={(e) => setFocusYears(Number(e.target.value))}\n          style={{ \n            padding: '5px 10px', \n            borderRadius: '4px', \n            border: '1px solid #d1d5db' \n          }}\n        >\n          <option value={3}>Last 3 years</option>\n          <option value={5}>Last 5 years</option>\n          <option value={10}>Last 10 years</option>\n        </select>\n      </div>\n      \n      <div className=\"chart-canvas\" style={{ display: 'flex', justifyContent: 'center' }}>\n        <svg ref={radialChartRef} width=\"100%\" height=\"600\"></svg>\n      </div>\n      \n      <div className=\"chart-notes\" style={{ marginTop: '15px', fontSize: '0.875rem', color: '#6b7280', fontStyle: 'italic' }}>\n        Note: This visualization shows discrete bars for each year's monthly data, making it easier to compare values accurately.\n        The height of each bar directly represents the number of {selectedMetric === 'fires' ? 'fires' : 'acres burned'}.\n      </div>\n    </div>\n  );\n};\n\nexport default RadialBarChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}