{"ast":null,"code":"import * as d3 from 'd3';\nclass YearlyAnalysisDashboardD3 {\n  constructor(containerId, yearlyData, monthlyData, selectedYear, availableYears, summaryStats, onYearChange, onRefresh) {\n    this.container = document.getElementById(containerId);\n    this.yearlyData = yearlyData;\n    this.monthlyData = monthlyData;\n    this.selectedYear = selectedYear;\n    this.availableYears = availableYears;\n    this.summaryStats = summaryStats;\n    this.onYearChange = onYearChange;\n    this.onRefresh = onRefresh;\n    this.init();\n  }\n  init() {\n    this.render();\n    this.createCharts();\n    this.setupEventListeners();\n  }\n\n  // Format large numbers\n  formatLargeNumber(num) {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num;\n  }\n\n  // Get the data for the selected year\n  getSelectedYearData() {\n    if (!this.yearlyData || this.yearlyData.length === 0 || !this.selectedYear) return null;\n    return this.yearlyData.find(data => data.year === this.selectedYear);\n  }\n\n  // Get monthly data\n  getMonthByYearData() {\n    if (!this.yearlyData || this.yearlyData.length === 0) return [];\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    // For each month, find the highest acre value from all available years\n    const data = [];\n\n    // If we have monthly data for the selected year, use it\n    if (this.monthlyData && this.monthlyData.length > 0) {\n      months.forEach((month, index) => {\n        const monthData = this.monthlyData.find(m => m.month === month);\n        data.push({\n          month,\n          acres: monthData ? monthData.acres : 0,\n          fires: monthData ? monthData.fires : 0\n        });\n      });\n    }\n    return data;\n  }\n  render() {\n    const selectedYearData = this.getSelectedYearData();\n    this.container.innerHTML = `\n      <div class=\"yearly-analysis-dashboard\">\n        <div class=\"dashboard-header\">\n          <h2 class=\"dashboard-title\">Yearly Fire Analysis Dashboard</h2>\n          <p class=\"dashboard-description\">\n            Detailed analysis of wildfire data for a specific year, showing monthly patterns\n          </p>\n        </div>\n        \n        <!-- Year selector and summary -->\n        <div class=\"year-selection-container\">\n          <div class=\"year-selector\">\n            <label for=\"year-select\" class=\"year-selector-label\">Select Year for Analysis:</label>\n            <select\n              id=\"year-select\"\n              class=\"year-selector-dropdown\"\n              ${this.availableYears.length === 0 ? 'disabled' : ''}\n            >\n              ${this.availableYears.map(year => `\n                <option value=\"${year}\" ${year === this.selectedYear ? 'selected' : ''}>\n                  ${year}\n                </option>\n              `).join('')}\n            </select>\n          </div>\n          \n          ${selectedYearData ? `\n            <div class=\"year-summary\">\n              <div class=\"year-summary-item\">\n                <div class=\"summary-label\">Fires:</div>\n                <div class=\"summary-value\">${selectedYearData.fires.toLocaleString()}</div>\n              </div>\n              <div class=\"year-summary-item\">\n                <div class=\"summary-label\">Acres Burned:</div>\n                <div class=\"summary-value\">${selectedYearData.acres.toLocaleString()}</div>\n              </div>\n              <div class=\"year-summary-item\">\n                <div class=\"summary-label\">Peak Month:</div>\n                <div class=\"summary-value\">${this.summaryStats.peakMonth || 'N/A'}</div>\n              </div>\n            </div>\n          ` : ''}\n        </div>\n        \n        <!-- Main content area with monthly visualization -->\n        <div class=\"chart-section\">\n          <div class=\"chart-container\">\n            <h3 class=\"section-title\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"section-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm9 4a1 1 0 10-2 0v6a1 1 0 102 0V7zm-3 2a1 1 0 10-2 0v4a1 1 0 102 0V9zm-3 3a1 1 0 10-2 0v1a1 1 0 102 0v-1z\" clip-rule=\"evenodd\" />\n              </svg>\n              Monthly Acres Burned in ${this.selectedYear || '...'}\n            </h3>\n            <div class=\"chart-description\">\n              Shows acres burned by month for the selected year, highlighting peak fire season.\n            </div>\n            <div class=\"chart-canvas\">\n              <svg id=\"monthly-acres-chart\" width=\"100%\" height=\"400\"></svg>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Second visualization -->\n        <div class=\"chart-section\">\n          <div class=\"chart-container\">\n            <h3 class=\"section-title\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"section-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clip-rule=\"evenodd\" />\n              </svg>\n              Fire Counts by Month in ${this.selectedYear || '...'}\n            </h3>\n            <div class=\"chart-description\">\n              Shows the number of fires recorded each month for the selected year.\n            </div>\n            <div class=\"chart-canvas\">\n              <svg id=\"monthly-fires-chart\" width=\"100%\" height=\"400\"></svg>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Monthly data table -->\n        <div class=\"monthly-data-table-container\">\n          <h3 class=\"section-title\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"section-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M5 4a3 3 0 00-3 3v6a3 3 0 003 3h10a3 3 0 003-3V7a3 3 0 00-3-3H5zm-1 9v-1h5v2H5a1 1 0 01-1-1zm7 1h4a1 1 0 001-1v-1h-5v2zm0-4h5V8h-5v2zM9 8H4v2h5V8z\" clip-rule=\"evenodd\" />\n            </svg>\n            Monthly Breakdown for ${this.selectedYear || '...'}\n          </h3>\n          <div class=\"data-table\">\n            <table class=\"monthly-table\">\n              <thead>\n                <tr>\n                  <th>Month</th>\n                  <th>Fires</th>\n                  <th>Acres Burned</th>\n                  <th>Acres per Fire</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${this.getMonthByYearData().map(monthData => `\n                  <tr class=\"${monthData.month === this.summaryStats.peakMonth ? 'peak-month' : ''}\">\n                    <td>${monthData.month}</td>\n                    <td>${monthData.fires.toLocaleString()}</td>\n                    <td>${monthData.acres.toLocaleString()}</td>\n                    <td>${monthData.fires > 0 ? Math.round(monthData.acres / monthData.fires).toLocaleString() : 'N/A'}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n              <tfoot>\n                <tr>\n                  <th>Total</th>\n                  <th>${selectedYearData ? selectedYearData.fires.toLocaleString() : 0}</th>\n                  <th>${selectedYearData ? selectedYearData.acres.toLocaleString() : 0}</th>\n                  <th>\n                    ${selectedYearData && selectedYearData.fires > 0 ? Math.round(selectedYearData.acres / selectedYearData.fires).toLocaleString() : 'N/A'}\n                  </th>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n        </div>\n        \n        <!-- Data Source Info -->\n        <div class=\"data-source-container\">\n          <h3 class=\"data-source-title\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"data-source-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n            </svg>\n            Data Source Information\n          </h3>\n          <div class=\"data-source-content\">\n            <p>\n              This visualization shows detailed monthly data for the selected year from the firep23_1.geojson file.\n              The monthly breakdown helps identify fire patterns throughout the year and peak fire season.\n            </p>\n            <p class=\"data-source-note\">\n              Return to the \"Dashboard Overview\" tab to see trends across multiple years.\n            </p>\n          </div>\n        </div>\n        \n        <div class=\"refresh-button-container\">\n          <button id=\"yearly-refresh-button\" class=\"refresh-button\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"refresh-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\" />\n            </svg>\n            Refresh Data\n          </button>\n        </div>\n      </div>\n    `;\n  }\n  createCharts() {\n    this.createMonthlyAcresChart();\n    this.createMonthlyFiresChart();\n  }\n  createMonthlyAcresChart() {\n    const data = this.getMonthByYearData();\n    if (data.length === 0) return;\n    const margin = {\n      top: 40,\n      right: 30,\n      bottom: 100,\n      left: 60\n    };\n    const svgElement = document.getElementById('monthly-acres-chart');\n    const width = svgElement.clientWidth;\n    const height = 400;\n    const chartWidth = width - margin.left - margin.right;\n    const chartHeight = height - margin.top - margin.bottom;\n\n    // Clear any existing SVG\n    d3.select('#monthly-acres-chart').selectAll('*').remove();\n\n    // Create SVG\n    const svg = d3.select('#monthly-acres-chart').attr('width', width).attr('height', height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Define scales\n    const xScale = d3.scaleBand().domain(data.map(d => d.month)).range([0, chartWidth]).padding(0.2);\n    const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.acres) * 1.1]).range([chartHeight, 0]);\n\n    // Create axes\n    svg.append('g').attr('transform', `translate(0,${chartHeight})`).call(d3.axisBottom(xScale)).selectAll('text').attr('transform', 'rotate(-45)').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em');\n    svg.append('g').call(d3.axisLeft(yScale).tickFormat(d => this.formatLargeNumber(d)));\n\n    // Add grid lines\n    svg.append('g').attr('class', 'grid-lines').selectAll('line').data(yScale.ticks()).enter().append('line').attr('x1', 0).attr('y1', d => yScale(d)).attr('x2', chartWidth).attr('y2', d => yScale(d)).attr('stroke', '#e5e7eb').attr('stroke-dasharray', '3,3');\n\n    // Add bars\n    svg.selectAll('bars').data(data).enter().append('rect').attr('x', d => xScale(d.month)).attr('y', d => yScale(d.acres)).attr('width', xScale.bandwidth()).attr('height', d => chartHeight - yScale(d.acres)).attr('fill', '#DC2626').attr('rx', 4).attr('ry', 4);\n\n    // Add labels for high values\n    svg.selectAll('value-labels').data(data.filter(d => d.acres > 10000)) // Only label high values\n    .enter().append('text').attr('x', d => xScale(d.month) + xScale.bandwidth() / 2).attr('y', d => yScale(d.acres) - 5).attr('text-anchor', 'middle').text(d => this.formatLargeNumber(d.acres)).style('font-size', '12px').style('fill', '#6B7280');\n\n    // Add title\n    svg.append('text').attr('x', chartWidth / 2).attr('y', -10).attr('text-anchor', 'middle').style('font-size', '16px').style('font-weight', 'bold').text(`Acres Burned by Month in ${this.selectedYear}`);\n\n    // Create tooltip\n    const tooltip = d3.select('body').append('div').attr('class', 'tooltip').style('opacity', 0);\n\n    // Add hover effects\n    svg.selectAll('rect').on('mouseover', function (event, d) {\n      d3.select(this).transition().duration(200).attr('opacity', 0.8);\n      tooltip.transition().duration(200).style('opacity', 0.9);\n      tooltip.html(`\n          <strong>${d.month} ${this.selectedYear}</strong><br/>\n          Acres Burned: ${d.acres.toLocaleString()}<br/>\n          Fires: ${d.fires.toLocaleString()}<br/>\n          ${d.fires > 0 ? `Acres per Fire: ${Math.round(d.acres / d.fires).toLocaleString()}` : ''}\n        `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 28 + 'px');\n    }.bind(this)).on('mouseout', function () {\n      d3.select(this).transition().duration(200).attr('opacity', 1);\n      tooltip.transition().duration(500).style('opacity', 0);\n    });\n  }\n  createMonthlyFiresChart() {\n    const data = this.getMonthByYearData();\n    if (data.length === 0) return;\n    const margin = {\n      top: 40,\n      right: 30,\n      bottom: 100,\n      left: 60\n    };\n    const svgElement = document.getElementById('monthly-fires-chart');\n    const width = svgElement.clientWidth;\n    const height = 400;\n    const chartWidth = width - margin.left - margin.right;\n    const chartHeight = height - margin.top - margin.bottom;\n\n    // Clear any existing SVG\n    d3.select('#monthly-fires-chart').selectAll('*').remove();\n\n    // Create SVG\n    const svg = d3.select('#monthly-fires-chart').attr('width', width).attr('height', height).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    // Define scales\n    const xScale = d3.scaleBand().domain(data.map(d => d.month)).range([0, chartWidth]).padding(0.4);\n    const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.fires) * 1.1]).range([chartHeight, 0]);\n\n    // Create axes\n    svg.append('g').attr('transform', `translate(0,${chartHeight})`).call(d3.axisBottom(xScale)).selectAll('text').attr('transform', 'rotate(-45)').style('text-anchor', 'end').attr('dx', '-.8em').attr('dy', '.15em');\n    svg.append('g').call(d3.axisLeft(yScale));\n\n    // Add grid lines\n    svg.append('g').attr('class', 'grid-lines').selectAll('line').data(yScale.ticks()).enter().append('line').attr('x1', 0).attr('y1', d => yScale(d)).attr('x2', chartWidth).attr('y2', d => yScale(d)).attr('stroke', '#e5e7eb').attr('stroke-dasharray', '3,3');\n\n    // Create line generator\n    const lineGenerator = d3.line().x(d => xScale(d.month) + xScale.bandwidth() / 2).y(d => yScale(d.fires));\n\n    // Add the line\n    svg.append('path').datum(data).attr('fill', 'none').attr('stroke', '#3B82F6').attr('stroke-width', 3).attr('d', lineGenerator);\n\n    // Add dots\n    svg.selectAll('dots').data(data).enter().append('circle').attr('cx', d => xScale(d.month) + xScale.bandwidth() / 2).attr('cy', d => yScale(d.fires)).attr('r', 5).attr('fill', '#3B82F6');\n\n    // Add title\n    svg.append('text').attr('x', chartWidth / 2).attr('y', -10).attr('text-anchor', 'middle').style('font-size', '16px').style('font-weight', 'bold').text(`Fire Counts by Month in ${this.selectedYear}`);\n\n    // Create tooltip\n    const tooltip = d3.select('body').append('div').attr('class', 'tooltip').style('opacity', 0);\n\n    // Add hover effects\n    svg.selectAll('circle').on('mouseover', function (event, d) {\n      d3.select(this).transition().duration(200).attr('r', 7);\n      tooltip.transition().duration(200).style('opacity', 0.9);\n      tooltip.html(`\n          <strong>${d.month} ${this.selectedYear}</strong><br/>\n          Fires: ${d.fires.toLocaleString()}<br/>\n          Acres Burned: ${d.acres.toLocaleString()}<br/>\n          ${d.fires > 0 ? `Acres per Fire: ${Math.round(d.acres / d.fires).toLocaleString()}` : ''}\n        `).style('left', event.pageX + 10 + 'px').style('top', event.pageY - 28 + 'px');\n    }.bind(this)).on('mouseout', function () {\n      d3.select(this).transition().duration(200).attr('r', 5);\n      tooltip.transition().duration(500).style('opacity', 0);\n    });\n  }\n  setupEventListeners() {\n    // Year selector change event\n    const yearSelect = document.getElementById('year-select');\n    if (yearSelect) {\n      yearSelect.addEventListener('change', e => {\n        this.onYearChange(e.target.value);\n      });\n    }\n\n    // Refresh button click event\n    const refreshButton = document.getElementById('yearly-refresh-button');\n    if (refreshButton) {\n      refreshButton.addEventListener('click', this.onRefresh);\n    }\n  }\n  updateData(yearlyData, monthlyData, selectedYear, availableYears, summaryStats) {\n    this.yearlyData = yearlyData;\n    this.monthlyData = monthlyData;\n    this.selectedYear = selectedYear;\n    this.availableYears = availableYears;\n    this.summaryStats = summaryStats;\n    this.render();\n    this.createCharts();\n    this.setupEventListeners();\n  }\n}\n\n// Initialize the dashboard system\nfunction initFireDashboardSystem(containerId) {\n  return new FireDashboardSystemD3(containerId);\n}","map":{"version":3,"names":["d3","YearlyAnalysisDashboardD3","constructor","containerId","yearlyData","monthlyData","selectedYear","availableYears","summaryStats","onYearChange","onRefresh","container","document","getElementById","init","render","createCharts","setupEventListeners","formatLargeNumber","num","toFixed","getSelectedYearData","length","find","data","year","getMonthByYearData","months","forEach","month","index","monthData","m","push","acres","fires","selectedYearData","innerHTML","map","join","toLocaleString","peakMonth","Math","round","createMonthlyAcresChart","createMonthlyFiresChart","margin","top","right","bottom","left","svgElement","width","clientWidth","height","chartWidth","chartHeight","select","selectAll","remove","svg","attr","append","xScale","scaleBand","domain","d","range","padding","yScale","scaleLinear","max","call","axisBottom","style","axisLeft","tickFormat","ticks","enter","bandwidth","filter","text","tooltip","on","event","transition","duration","html","pageX","pageY","bind","lineGenerator","line","x","y","datum","yearSelect","addEventListener","e","target","value","refreshButton","updateData","initFireDashboardSystem","FireDashboardSystemD3"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/YearlyAnalysisDashboard.js"],"sourcesContent":["import * as d3 from 'd3';\n\nclass YearlyAnalysisDashboardD3 {\n  constructor(containerId, yearlyData, monthlyData, selectedYear, availableYears, summaryStats, onYearChange, onRefresh) {\n    this.container = document.getElementById(containerId);\n    this.yearlyData = yearlyData;\n    this.monthlyData = monthlyData;\n    this.selectedYear = selectedYear;\n    this.availableYears = availableYears;\n    this.summaryStats = summaryStats;\n    this.onYearChange = onYearChange;\n    this.onRefresh = onRefresh;\n    \n    this.init();\n  }\n  \n  init() {\n    this.render();\n    this.createCharts();\n    this.setupEventListeners();\n  }\n  \n  // Format large numbers\n  formatLargeNumber(num) {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num;\n  }\n  \n  // Get the data for the selected year\n  getSelectedYearData() {\n    if (!this.yearlyData || this.yearlyData.length === 0 || !this.selectedYear) return null;\n    return this.yearlyData.find(data => data.year === this.selectedYear);\n  }\n  \n  // Get monthly data\n  getMonthByYearData() {\n    if (!this.yearlyData || this.yearlyData.length === 0) return [];\n    \n    const months = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    \n    // For each month, find the highest acre value from all available years\n    const data = [];\n    \n    // If we have monthly data for the selected year, use it\n    if (this.monthlyData && this.monthlyData.length > 0) {\n      months.forEach((month, index) => {\n        const monthData = this.monthlyData.find(m => m.month === month);\n        data.push({\n          month,\n          acres: monthData ? monthData.acres : 0,\n          fires: monthData ? monthData.fires : 0\n        });\n      });\n    }\n    \n    return data;\n  }\n  \n  render() {\n    const selectedYearData = this.getSelectedYearData();\n    \n    this.container.innerHTML = `\n      <div class=\"yearly-analysis-dashboard\">\n        <div class=\"dashboard-header\">\n          <h2 class=\"dashboard-title\">Yearly Fire Analysis Dashboard</h2>\n          <p class=\"dashboard-description\">\n            Detailed analysis of wildfire data for a specific year, showing monthly patterns\n          </p>\n        </div>\n        \n        <!-- Year selector and summary -->\n        <div class=\"year-selection-container\">\n          <div class=\"year-selector\">\n            <label for=\"year-select\" class=\"year-selector-label\">Select Year for Analysis:</label>\n            <select\n              id=\"year-select\"\n              class=\"year-selector-dropdown\"\n              ${this.availableYears.length === 0 ? 'disabled' : ''}\n            >\n              ${this.availableYears.map(year => `\n                <option value=\"${year}\" ${year === this.selectedYear ? 'selected' : ''}>\n                  ${year}\n                </option>\n              `).join('')}\n            </select>\n          </div>\n          \n          ${selectedYearData ? `\n            <div class=\"year-summary\">\n              <div class=\"year-summary-item\">\n                <div class=\"summary-label\">Fires:</div>\n                <div class=\"summary-value\">${selectedYearData.fires.toLocaleString()}</div>\n              </div>\n              <div class=\"year-summary-item\">\n                <div class=\"summary-label\">Acres Burned:</div>\n                <div class=\"summary-value\">${selectedYearData.acres.toLocaleString()}</div>\n              </div>\n              <div class=\"year-summary-item\">\n                <div class=\"summary-label\">Peak Month:</div>\n                <div class=\"summary-value\">${this.summaryStats.peakMonth || 'N/A'}</div>\n              </div>\n            </div>\n          ` : ''}\n        </div>\n        \n        <!-- Main content area with monthly visualization -->\n        <div class=\"chart-section\">\n          <div class=\"chart-container\">\n            <h3 class=\"section-title\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"section-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M5 3a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2H5zm9 4a1 1 0 10-2 0v6a1 1 0 102 0V7zm-3 2a1 1 0 10-2 0v4a1 1 0 102 0V9zm-3 3a1 1 0 10-2 0v1a1 1 0 102 0v-1z\" clip-rule=\"evenodd\" />\n              </svg>\n              Monthly Acres Burned in ${this.selectedYear || '...'}\n            </h3>\n            <div class=\"chart-description\">\n              Shows acres burned by month for the selected year, highlighting peak fire season.\n            </div>\n            <div class=\"chart-canvas\">\n              <svg id=\"monthly-acres-chart\" width=\"100%\" height=\"400\"></svg>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Second visualization -->\n        <div class=\"chart-section\">\n          <div class=\"chart-container\">\n            <h3 class=\"section-title\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"section-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z\" clip-rule=\"evenodd\" />\n              </svg>\n              Fire Counts by Month in ${this.selectedYear || '...'}\n            </h3>\n            <div class=\"chart-description\">\n              Shows the number of fires recorded each month for the selected year.\n            </div>\n            <div class=\"chart-canvas\">\n              <svg id=\"monthly-fires-chart\" width=\"100%\" height=\"400\"></svg>\n            </div>\n          </div>\n        </div>\n        \n        <!-- Monthly data table -->\n        <div class=\"monthly-data-table-container\">\n          <h3 class=\"section-title\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"section-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M5 4a3 3 0 00-3 3v6a3 3 0 003 3h10a3 3 0 003-3V7a3 3 0 00-3-3H5zm-1 9v-1h5v2H5a1 1 0 01-1-1zm7 1h4a1 1 0 001-1v-1h-5v2zm0-4h5V8h-5v2zM9 8H4v2h5V8z\" clip-rule=\"evenodd\" />\n            </svg>\n            Monthly Breakdown for ${this.selectedYear || '...'}\n          </h3>\n          <div class=\"data-table\">\n            <table class=\"monthly-table\">\n              <thead>\n                <tr>\n                  <th>Month</th>\n                  <th>Fires</th>\n                  <th>Acres Burned</th>\n                  <th>Acres per Fire</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${this.getMonthByYearData().map((monthData) => `\n                  <tr class=\"${monthData.month === this.summaryStats.peakMonth ? 'peak-month' : ''}\">\n                    <td>${monthData.month}</td>\n                    <td>${monthData.fires.toLocaleString()}</td>\n                    <td>${monthData.acres.toLocaleString()}</td>\n                    <td>${monthData.fires > 0 ? Math.round(monthData.acres / monthData.fires).toLocaleString() : 'N/A'}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n              <tfoot>\n                <tr>\n                  <th>Total</th>\n                  <th>${selectedYearData ? selectedYearData.fires.toLocaleString() : 0}</th>\n                  <th>${selectedYearData ? selectedYearData.acres.toLocaleString() : 0}</th>\n                  <th>\n                    ${selectedYearData && selectedYearData.fires > 0 \n                      ? Math.round(selectedYearData.acres / selectedYearData.fires).toLocaleString() \n                      : 'N/A'}\n                  </th>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n        </div>\n        \n        <!-- Data Source Info -->\n        <div class=\"data-source-container\">\n          <h3 class=\"data-source-title\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"data-source-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" />\n            </svg>\n            Data Source Information\n          </h3>\n          <div class=\"data-source-content\">\n            <p>\n              This visualization shows detailed monthly data for the selected year from the firep23_1.geojson file.\n              The monthly breakdown helps identify fire patterns throughout the year and peak fire season.\n            </p>\n            <p class=\"data-source-note\">\n              Return to the \"Dashboard Overview\" tab to see trends across multiple years.\n            </p>\n          </div>\n        </div>\n        \n        <div class=\"refresh-button-container\">\n          <button id=\"yearly-refresh-button\" class=\"refresh-button\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"refresh-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clip-rule=\"evenodd\" />\n            </svg>\n            Refresh Data\n          </button>\n        </div>\n      </div>\n    `;\n  }\n  \n  createCharts() {\n    this.createMonthlyAcresChart();\n    this.createMonthlyFiresChart();\n  }\n  \n  createMonthlyAcresChart() {\n    const data = this.getMonthByYearData();\n    if (data.length === 0) return;\n    \n    const margin = { top: 40, right: 30, bottom: 100, left: 60 };\n    const svgElement = document.getElementById('monthly-acres-chart');\n    const width = svgElement.clientWidth;\n    const height = 400;\n    const chartWidth = width - margin.left - margin.right;\n    const chartHeight = height - margin.top - margin.bottom;\n    \n    // Clear any existing SVG\n    d3.select('#monthly-acres-chart').selectAll('*').remove();\n    \n    // Create SVG\n    const svg = d3.select('#monthly-acres-chart')\n      .attr('width', width)\n      .attr('height', height)\n      .append('g')\n      .attr('transform', `translate(${margin.left},${margin.top})`);\n    \n    // Define scales\n    const xScale = d3.scaleBand()\n      .domain(data.map(d => d.month))\n      .range([0, chartWidth])\n      .padding(0.2);\n    \n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.acres) * 1.1])\n      .range([chartHeight, 0]);\n    \n    // Create axes\n    svg.append('g')\n      .attr('transform', `translate(0,${chartHeight})`)\n      .call(d3.axisBottom(xScale))\n      .selectAll('text')\n      .attr('transform', 'rotate(-45)')\n      .style('text-anchor', 'end')\n      .attr('dx', '-.8em')\n      .attr('dy', '.15em');\n    \n    svg.append('g')\n      .call(d3.axisLeft(yScale).tickFormat(d => this.formatLargeNumber(d)));\n    \n    // Add grid lines\n    svg.append('g')\n      .attr('class', 'grid-lines')\n      .selectAll('line')\n      .data(yScale.ticks())\n      .enter()\n      .append('line')\n      .attr('x1', 0)\n      .attr('y1', d => yScale(d))\n      .attr('x2', chartWidth)\n      .attr('y2', d => yScale(d))\n      .attr('stroke', '#e5e7eb')\n      .attr('stroke-dasharray', '3,3');\n    \n    // Add bars\n    svg.selectAll('bars')\n      .data(data)\n      .enter()\n      .append('rect')\n      .attr('x', d => xScale(d.month))\n      .attr('y', d => yScale(d.acres))\n      .attr('width', xScale.bandwidth())\n      .attr('height', d => chartHeight - yScale(d.acres))\n      .attr('fill', '#DC2626')\n      .attr('rx', 4)\n      .attr('ry', 4);\n    \n    // Add labels for high values\n    svg.selectAll('value-labels')\n      .data(data.filter(d => d.acres > 10000)) // Only label high values\n      .enter()\n      .append('text')\n      .attr('x', d => xScale(d.month) + xScale.bandwidth() / 2)\n      .attr('y', d => yScale(d.acres) - 5)\n      .attr('text-anchor', 'middle')\n      .text(d => this.formatLargeNumber(d.acres))\n      .style('font-size', '12px')\n      .style('fill', '#6B7280');\n    \n    // Add title\n    svg.append('text')\n      .attr('x', chartWidth / 2)\n      .attr('y', -10)\n      .attr('text-anchor', 'middle')\n      .style('font-size', '16px')\n      .style('font-weight', 'bold')\n      .text(`Acres Burned by Month in ${this.selectedYear}`);\n    \n    // Create tooltip\n    const tooltip = d3.select('body').append('div')\n      .attr('class', 'tooltip')\n      .style('opacity', 0);\n    \n    // Add hover effects\n    svg.selectAll('rect')\n      .on('mouseover', function(event, d) {\n        d3.select(this)\n          .transition()\n          .duration(200)\n          .attr('opacity', 0.8);\n        \n        tooltip.transition()\n          .duration(200)\n          .style('opacity', 0.9);\n        \n        tooltip.html(`\n          <strong>${d.month} ${this.selectedYear}</strong><br/>\n          Acres Burned: ${d.acres.toLocaleString()}<br/>\n          Fires: ${d.fires.toLocaleString()}<br/>\n          ${d.fires > 0 ? `Acres per Fire: ${Math.round(d.acres / d.fires).toLocaleString()}` : ''}\n        `)\n          .style('left', (event.pageX + 10) + 'px')\n          .style('top', (event.pageY - 28) + 'px');\n      }.bind(this))\n      .on('mouseout', function() {\n        d3.select(this)\n          .transition()\n          .duration(200)\n          .attr('opacity', 1);\n        \n        tooltip.transition()\n          .duration(500)\n          .style('opacity', 0);\n      });\n  }\n  \n  createMonthlyFiresChart() {\n    const data = this.getMonthByYearData();\n    if (data.length === 0) return;\n    \n    const margin = { top: 40, right: 30, bottom: 100, left: 60 };\n    const svgElement = document.getElementById('monthly-fires-chart');\n    const width = svgElement.clientWidth;\n    const height = 400;\n    const chartWidth = width - margin.left - margin.right;\n    const chartHeight = height - margin.top - margin.bottom;\n    \n    // Clear any existing SVG\n    d3.select('#monthly-fires-chart').selectAll('*').remove();\n    \n    // Create SVG\n    const svg = d3.select('#monthly-fires-chart')\n      .attr('width', width)\n      .attr('height', height)\n      .append('g')\n      .attr('transform', `translate(${margin.left},${margin.top})`);\n    \n    // Define scales\n    const xScale = d3.scaleBand()\n      .domain(data.map(d => d.month))\n      .range([0, chartWidth])\n      .padding(0.4);\n    \n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d.fires) * 1.1])\n      .range([chartHeight, 0]);\n    \n    // Create axes\n    svg.append('g')\n      .attr('transform', `translate(0,${chartHeight})`)\n      .call(d3.axisBottom(xScale))\n      .selectAll('text')\n      .attr('transform', 'rotate(-45)')\n      .style('text-anchor', 'end')\n      .attr('dx', '-.8em')\n      .attr('dy', '.15em');\n    \n    svg.append('g')\n      .call(d3.axisLeft(yScale));\n    \n    // Add grid lines\n    svg.append('g')\n      .attr('class', 'grid-lines')\n      .selectAll('line')\n      .data(yScale.ticks())\n      .enter()\n      .append('line')\n      .attr('x1', 0)\n      .attr('y1', d => yScale(d))\n      .attr('x2', chartWidth)\n      .attr('y2', d => yScale(d))\n      .attr('stroke', '#e5e7eb')\n      .attr('stroke-dasharray', '3,3');\n    \n    // Create line generator\n    const lineGenerator = d3.line()\n      .x(d => xScale(d.month) + xScale.bandwidth() / 2)\n      .y(d => yScale(d.fires));\n    \n    // Add the line\n    svg.append('path')\n      .datum(data)\n      .attr('fill', 'none')\n      .attr('stroke', '#3B82F6')\n      .attr('stroke-width', 3)\n      .attr('d', lineGenerator);\n    \n    // Add dots\n    svg.selectAll('dots')\n      .data(data)\n      .enter()\n      .append('circle')\n      .attr('cx', d => xScale(d.month) + xScale.bandwidth() / 2)\n      .attr('cy', d => yScale(d.fires))\n      .attr('r', 5)\n      .attr('fill', '#3B82F6');\n    \n    // Add title\n    svg.append('text')\n      .attr('x', chartWidth / 2)\n      .attr('y', -10)\n      .attr('text-anchor', 'middle')\n      .style('font-size', '16px')\n      .style('font-weight', 'bold')\n      .text(`Fire Counts by Month in ${this.selectedYear}`);\n    \n    // Create tooltip\n    const tooltip = d3.select('body').append('div')\n      .attr('class', 'tooltip')\n      .style('opacity', 0);\n    \n    // Add hover effects\n    svg.selectAll('circle')\n      .on('mouseover', function(event, d) {\n        d3.select(this)\n          .transition()\n          .duration(200)\n          .attr('r', 7);\n        \n        tooltip.transition()\n          .duration(200)\n          .style('opacity', 0.9);\n        \n        tooltip.html(`\n          <strong>${d.month} ${this.selectedYear}</strong><br/>\n          Fires: ${d.fires.toLocaleString()}<br/>\n          Acres Burned: ${d.acres.toLocaleString()}<br/>\n          ${d.fires > 0 ? `Acres per Fire: ${Math.round(d.acres / d.fires).toLocaleString()}` : ''}\n        `)\n          .style('left', (event.pageX + 10) + 'px')\n          .style('top', (event.pageY - 28) + 'px');\n      }.bind(this))\n      .on('mouseout', function() {\n        d3.select(this)\n          .transition()\n          .duration(200)\n          .attr('r', 5);\n        \n        tooltip.transition()\n          .duration(500)\n          .style('opacity', 0);\n      });\n  }\n  \n  setupEventListeners() {\n    // Year selector change event\n    const yearSelect = document.getElementById('year-select');\n    if (yearSelect) {\n      yearSelect.addEventListener('change', (e) => {\n        this.onYearChange(e.target.value);\n      });\n    }\n    \n    // Refresh button click event\n    const refreshButton = document.getElementById('yearly-refresh-button');\n    if (refreshButton) {\n      refreshButton.addEventListener('click', this.onRefresh);\n    }\n  }\n  \n  updateData(yearlyData, monthlyData, selectedYear, availableYears, summaryStats) {\n    this.yearlyData = yearlyData;\n    this.monthlyData = monthlyData;\n    this.selectedYear = selectedYear;\n    this.availableYears = availableYears;\n    this.summaryStats = summaryStats;\n    \n    this.render();\n    this.createCharts();\n    this.setupEventListeners();\n  }\n}\n\n// Initialize the dashboard system\nfunction initFireDashboardSystem(containerId) {\n  return new FireDashboardSystemD3(containerId);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}