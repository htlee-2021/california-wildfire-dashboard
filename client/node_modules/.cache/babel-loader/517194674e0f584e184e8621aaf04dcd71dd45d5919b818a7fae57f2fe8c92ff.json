{"ast":null,"code":"// FileUpload.jsx - Component for uploading data files\nimport React,{useState}from'react';import'./FileUpload.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FileUpload=_ref=>{let{onUploadSuccess,uploadSuccess,setUploadSuccess}=_ref;const[files,setFiles]=useState({csv:null,geojson:null,shapefile:[]});const[uploading,setUploading]=useState(false);const[error,setError]=useState(null);const[datasetName,setDatasetName]=useState('');const handleFileChange=e=>{const{name,files:selectedFiles}=e.target;if(name==='shapefile'){// Handle multiple shapefile components (.shp, .dbf, .shx)\nconst fileArray=Array.from(selectedFiles);setFiles(prev=>({...prev,[name]:fileArray}));}else{// Handle single file types (CSV, GeoJSON)\nsetFiles(prev=>({...prev,[name]:selectedFiles[0]||null}));}};const handleSubmit=async e=>{e.preventDefault();setError(null);setUploading(true);setUploadSuccess(false);// Validate that at least one file is selected\nif(!files.csv&&!files.geojson&&files.shapefile.length===0){setError('Please select at least one file to upload');setUploading(false);return;}// Create form data\nconst formData=new FormData();if(files.csv){formData.append('csv',files.csv);}if(files.geojson){formData.append('geojson',files.geojson);}// Add all shapefile components\nfiles.shapefile.forEach(file=>{formData.append('shapefile',file);});// Add dataset name if provided\nif(datasetName){formData.append('name',datasetName);}try{const response=await fetch('/api/upload',{method:'POST',body:formData});const data=await response.json();if(!response.ok){throw new Error(data.error||'Failed to upload files');}// Handle success\nonUploadSuccess(data.datasetId);// Reset form\nsetFiles({csv:null,geojson:null,shapefile:[]});setDatasetName('');}catch(err){setError(err.message);}finally{setUploading(false);}};const renderFileList=fileType=>{if(fileType==='shapefile'&&files.shapefile.length>0){return/*#__PURE__*/_jsx(\"ul\",{className:\"file-list\",children:files.shapefile.map((file,index)=>/*#__PURE__*/_jsxs(\"li\",{className:\"file-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"file-icon\",children:\"\\uD83D\\uDCC1\"}),/*#__PURE__*/_jsx(\"span\",{className:\"file-name\",children:file.name}),/*#__PURE__*/_jsxs(\"span\",{className:\"file-size\",children:[\"(\",formatFileSize(file.size),\")\"]})]},index))});}else if(fileType!=='shapefile'&&files[fileType]){const file=files[fileType];return/*#__PURE__*/_jsxs(\"div\",{className:\"file-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"file-icon\",children:\"\\uD83D\\uDCC1\"}),/*#__PURE__*/_jsx(\"span\",{className:\"file-name\",children:file.name}),/*#__PURE__*/_jsxs(\"span\",{className:\"file-size\",children:[\"(\",formatFileSize(file.size),\")\"]})]});}return null;};const formatFileSize=bytes=>{if(bytes<1024)return bytes+' B';else if(bytes<1048576)return(bytes/1024).toFixed(1)+' KB';else return(bytes/1048576).toFixed(1)+' MB';};return/*#__PURE__*/_jsxs(\"div\",{className:\"upload-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Upload Data Files\"}),uploadSuccess?/*#__PURE__*/_jsxs(\"div\",{className:\"success-message\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"success-icon\",children:\"\\u2713\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Files uploaded successfully! Redirecting to dashboard...\"})]}):/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"upload-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"dataset-name\",children:\"Dataset Name (optional)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"dataset-name\",value:datasetName,onChange:e=>setDatasetName(e.target.value),placeholder:\"Enter a name for this dataset\",className:\"form-control\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"upload-sections\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"upload-section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Tabular Data\"}),/*#__PURE__*/_jsx(\"p\",{className:\"file-description\",children:\"Upload a CSV file with data to be visualized in charts and tables. Make sure it has header rows and consistent data formats.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-upload-area\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"csv-upload\",className:\"file-upload-label\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"upload-icon\",children:\"\\uD83D\\uDCCA\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Select CSV File\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"csv-upload\",name:\"csv\",accept:\".csv\",onChange:handleFileChange,className:\"file-input\"})]}),renderFileList('csv')]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"upload-section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Geographic Data\"}),/*#__PURE__*/_jsx(\"p\",{className:\"file-description\",children:\"Upload GeoJSON or Shapefile with geographic boundaries and properties. For Shapefiles, upload .shp, .dbf, and .shx files together.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-upload-area\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"geojson-upload\",className:\"file-upload-label\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"upload-icon\",children:\"\\uD83C\\uDF0D\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Select GeoJSON File\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"geojson-upload\",name:\"geojson\",accept:\".json,.geojson\",onChange:handleFileChange,className:\"file-input\"})]}),renderFileList('geojson')]}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-upload-area\",children:[/*#__PURE__*/_jsxs(\"label\",{htmlFor:\"shapefile-upload\",className:\"file-upload-label\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"upload-icon\",children:\"\\uD83D\\uDDFA\\uFE0F\"}),/*#__PURE__*/_jsx(\"div\",{children:\"Select Shapefile Components\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"shapefile-upload\",name:\"shapefile\",accept:\".shp,.dbf,.shx,.prj\",onChange:handleFileChange,className:\"file-input\",multiple:true})]}),renderFileList('shapefile')]})]})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsx(\"div\",{className:\"form-actions\",children:/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"submit-button\",disabled:uploading,children:uploading?'Uploading...':'Upload Files'})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"upload-instructions\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"File Requirements\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"CSV files:\"}),\" Must have headers in the first row. Numeric columns will be used for calculations.\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"GeoJSON files:\"}),\" Must follow the GeoJSON specification with valid features.\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Shapefiles:\"}),\" Upload the .shp, .dbf, and .shx files together.\"]})]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Note:\"}),\" For best results, ensure that your CSV data and geographic data share common identifier columns for proper joining of the datasets.\"]})]})]});};export default FileUpload;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","FileUpload","_ref","onUploadSuccess","uploadSuccess","setUploadSuccess","files","setFiles","csv","geojson","shapefile","uploading","setUploading","error","setError","datasetName","setDatasetName","handleFileChange","e","name","selectedFiles","target","fileArray","Array","from","prev","handleSubmit","preventDefault","length","formData","FormData","append","forEach","file","response","fetch","method","body","data","json","ok","Error","datasetId","err","message","renderFileList","fileType","className","children","map","index","formatFileSize","size","bytes","toFixed","onSubmit","htmlFor","type","id","value","onChange","placeholder","accept","multiple","disabled"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/Fileupload.jsx"],"sourcesContent":["// FileUpload.jsx - Component for uploading data files\nimport React, { useState } from 'react';\nimport './FileUpload.css';\n\nconst FileUpload = ({ onUploadSuccess, uploadSuccess, setUploadSuccess }) => {\n  const [files, setFiles] = useState({\n    csv: null,\n    geojson: null,\n    shapefile: []\n  });\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const [datasetName, setDatasetName] = useState('');\n\n  const handleFileChange = (e) => {\n    const { name, files: selectedFiles } = e.target;\n    \n    if (name === 'shapefile') {\n      // Handle multiple shapefile components (.shp, .dbf, .shx)\n      const fileArray = Array.from(selectedFiles);\n      setFiles(prev => ({\n        ...prev,\n        [name]: fileArray\n      }));\n    } else {\n      // Handle single file types (CSV, GeoJSON)\n      setFiles(prev => ({\n        ...prev,\n        [name]: selectedFiles[0] || null\n      }));\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(null);\n    setUploading(true);\n    setUploadSuccess(false);\n\n    // Validate that at least one file is selected\n    if (!files.csv && !files.geojson && files.shapefile.length === 0) {\n      setError('Please select at least one file to upload');\n      setUploading(false);\n      return;\n    }\n\n    // Create form data\n    const formData = new FormData();\n    \n    if (files.csv) {\n      formData.append('csv', files.csv);\n    }\n    \n    if (files.geojson) {\n      formData.append('geojson', files.geojson);\n    }\n    \n    // Add all shapefile components\n    files.shapefile.forEach(file => {\n      formData.append('shapefile', file);\n    });\n    \n    // Add dataset name if provided\n    if (datasetName) {\n      formData.append('name', datasetName);\n    }\n\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to upload files');\n      }\n\n      // Handle success\n      onUploadSuccess(data.datasetId);\n      \n      // Reset form\n      setFiles({\n        csv: null,\n        geojson: null,\n        shapefile: []\n      });\n      setDatasetName('');\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const renderFileList = (fileType) => {\n    if (fileType === 'shapefile' && files.shapefile.length > 0) {\n      return (\n        <ul className=\"file-list\">\n          {files.shapefile.map((file, index) => (\n            <li key={index} className=\"file-item\">\n              <span className=\"file-icon\">📁</span>\n              <span className=\"file-name\">{file.name}</span>\n              <span className=\"file-size\">({formatFileSize(file.size)})</span>\n            </li>\n          ))}\n        </ul>\n      );\n    } else if (fileType !== 'shapefile' && files[fileType]) {\n      const file = files[fileType];\n      return (\n        <div className=\"file-item\">\n          <span className=\"file-icon\">📁</span>\n          <span className=\"file-name\">{file.name}</span>\n          <span className=\"file-size\">({formatFileSize(file.size)})</span>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const formatFileSize = (bytes) => {\n    if (bytes < 1024) return bytes + ' B';\n    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';\n    else return (bytes / 1048576).toFixed(1) + ' MB';\n  };\n\n  return (\n    <div className=\"upload-container\">\n      <h1>Upload Data Files</h1>\n      \n      {uploadSuccess ? (\n        <div className=\"success-message\">\n          <span className=\"success-icon\">✓</span>\n          <p>Files uploaded successfully! Redirecting to dashboard...</p>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit} className=\"upload-form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"dataset-name\">Dataset Name (optional)</label>\n            <input\n              type=\"text\"\n              id=\"dataset-name\"\n              value={datasetName}\n              onChange={(e) => setDatasetName(e.target.value)}\n              placeholder=\"Enter a name for this dataset\"\n              className=\"form-control\"\n            />\n          </div>\n          \n          <div className=\"upload-sections\">\n            <div className=\"upload-section\">\n              <h2>Tabular Data</h2>\n              <p className=\"file-description\">\n                Upload a CSV file with data to be visualized in charts and tables.\n                Make sure it has header rows and consistent data formats.\n              </p>\n              \n              <div className=\"file-upload-area\">\n                <label htmlFor=\"csv-upload\" className=\"file-upload-label\">\n                  <div className=\"upload-icon\">📊</div>\n                  <div>Select CSV File</div>\n                  <input\n                    type=\"file\"\n                    id=\"csv-upload\"\n                    name=\"csv\"\n                    accept=\".csv\"\n                    onChange={handleFileChange}\n                    className=\"file-input\"\n                  />\n                </label>\n                \n                {renderFileList('csv')}\n              </div>\n            </div>\n            \n            <div className=\"upload-section\">\n              <h2>Geographic Data</h2>\n              <p className=\"file-description\">\n                Upload GeoJSON or Shapefile with geographic boundaries and properties.\n                For Shapefiles, upload .shp, .dbf, and .shx files together.\n              </p>\n              \n              <div className=\"file-upload-area\">\n                <label htmlFor=\"geojson-upload\" className=\"file-upload-label\">\n                  <div className=\"upload-icon\">🌍</div>\n                  <div>Select GeoJSON File</div>\n                  <input\n                    type=\"file\"\n                    id=\"geojson-upload\"\n                    name=\"geojson\"\n                    accept=\".json,.geojson\"\n                    onChange={handleFileChange}\n                    className=\"file-input\"\n                  />\n                </label>\n                \n                {renderFileList('geojson')}\n              </div>\n              \n              <div className=\"file-upload-area\">\n                <label htmlFor=\"shapefile-upload\" className=\"file-upload-label\">\n                  <div className=\"upload-icon\">🗺️</div>\n                  <div>Select Shapefile Components</div>\n                  <input\n                    type=\"file\"\n                    id=\"shapefile-upload\"\n                    name=\"shapefile\"\n                    accept=\".shp,.dbf,.shx,.prj\"\n                    onChange={handleFileChange}\n                    className=\"file-input\"\n                    multiple\n                  />\n                </label>\n                \n                {renderFileList('shapefile')}\n              </div>\n            </div>\n          </div>\n          \n          {error && <div className=\"error-message\">{error}</div>}\n          \n          <div className=\"form-actions\">\n            <button\n              type=\"submit\"\n              className=\"submit-button\"\n              disabled={uploading}\n            >\n              {uploading ? 'Uploading...' : 'Upload Files'}\n            </button>\n          </div>\n        </form>\n      )}\n      \n      <div className=\"upload-instructions\">\n        <h3>File Requirements</h3>\n        <ul>\n          <li>\n            <strong>CSV files:</strong> Must have headers in the first row. Numeric columns will be used for calculations.\n          </li>\n          <li>\n            <strong>GeoJSON files:</strong> Must follow the GeoJSON specification with valid features.\n          </li>\n          <li>\n            <strong>Shapefiles:</strong> Upload the .shp, .dbf, and .shx files together.\n          </li>\n        </ul>\n        <p>\n          <strong>Note:</strong> For best results, ensure that your CSV data and geographic data \n          share common identifier columns for proper joining of the datasets.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default FileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}