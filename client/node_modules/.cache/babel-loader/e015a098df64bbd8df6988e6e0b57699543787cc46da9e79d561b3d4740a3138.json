{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireDashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CaliforniaFireDashboard = () => {\n  _s();\n  const [yearlyData, setYearlyData] = useState([]);\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [usingSampleData, setUsingSampleData] = useState(false);\n  const [summaryStats, setSummaryStats] = useState({\n    totalFires: 0,\n    totalAcres: 0,\n    yearlyAcres: 0,\n    peakMonth: '',\n    worstYear: '',\n    worstYearAcres: 0\n  });\n  const backendBaseUrl = 'http://localhost:8000';\n\n  // Load yearly data when component mounts\n  useEffect(() => {\n    fetchYearlyData();\n  }, []);\n\n  // Fetch monthly data when selected year changes\n  useEffect(() => {\n    if (selectedYear) {\n      fetchMonthlyData(selectedYear);\n    }\n  }, [selectedYear]);\n  const fetchYearlyData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${backendBaseUrl}/api/stats/yearly?dataset=firep23_1`);\n      if (!response.ok) {\n        // If we get a 404, it means the statistics file isn't available\n        if (response.status === 404) {\n          console.warn(\"Statistics file not found\");\n          handleDataError(\"Statistics file not found. Please run the preprocessor script first.\");\n          return;\n        }\n        throw new Error(`Failed to fetch yearly data: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setYearlyData(data.yearlyData);\n      setAvailableYears(data.years);\n      setUsingSampleData(false);\n\n      // Update summary stats\n      setSummaryStats(prev => ({\n        ...prev,\n        totalFires: data.summary.totalFires,\n        totalAcres: data.summary.totalAcres,\n        worstYear: data.summary.worstYear,\n        worstYearAcres: data.summary.worstYearAcres\n      }));\n\n      // Set the most recent year as the default selected year\n      if (data.years.length > 0) {\n        const maxYear = Math.max(...data.years.map(y => parseInt(y)));\n        setSelectedYear(maxYear.toString());\n      }\n    } catch (err) {\n      console.error(\"Error fetching yearly fire data:\", err);\n      handleDataError(\"Failed to load fire data. Please check server connection and run the preprocessor script.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchMonthlyData = async year => {\n    if (error) {\n      setEmptyMonthlyData();\n      return;\n    }\n    try {\n      // Only show loading indicator for initial data load, not for year changes\n      if (monthlyData.length === 0) {\n        setLoading(true);\n      }\n      const response = await fetch(`${backendBaseUrl}/api/stats/monthly?dataset=firep23_1&year=${year}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.warn(\"Monthly statistics not found\");\n          setError(\"Monthly statistics for this year not found. Please run the preprocessor script first.\");\n          setEmptyMonthlyData();\n          return;\n        }\n        throw new Error(`Failed to fetch monthly data: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setMonthlyData(data.monthlyData);\n\n      // Update summary stats for the selected year\n      setSummaryStats(prev => ({\n        ...prev,\n        yearlyAcres: data.summary.totalAcres,\n        peakMonth: data.summary.peakMonth\n      }));\n    } catch (err) {\n      console.error(`Error fetching monthly fire data for year ${year}:`, err);\n      setError(`Failed to load monthly data for ${year}. Please check server connection.`);\n      setEmptyMonthlyData();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle data loading error\n  const handleDataError = errorMessage => {\n    setYearlyData([]);\n    setAvailableYears([]);\n    setSelectedYear(null);\n    setError(errorMessage || \"Failed to load fire data. Please run the preprocessor script first.\");\n  };\n\n  // Set empty monthly data when error occurs\n  const setEmptyMonthlyData = () => {\n    setMonthlyData([]);\n    setSummaryStats(prev => ({\n      ...prev,\n      yearlyAcres: 0,\n      peakMonth: 'N/A'\n    }));\n  };\n  const handleYearChange = e => {\n    setSelectedYear(e.target.value);\n  };\n  const formatLargeNumber = num => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num;\n  };\n  if (loading && yearlyData.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 text-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-lg font-medium text-gray-700\",\n      children: \"Loading fire data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"California Wildfire Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-50 border-l-4 border-red-500 p-4 mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-shrink-0\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"h-5 w-5 text-red-500\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            viewBox: \"0 0 20 20\",\n            fill: \"currentColor\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              fillRule: \"evenodd\",\n              d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",\n              clipRule: \"evenodd\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-medium text-red-800\",\n            children: \"Data Loading Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2 text-red-700\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-red-700\",\n              children: \"To fix this issue:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n              className: \"list-decimal ml-6 mt-2 text-sm text-red-700\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Make sure the server is running at \", backendBaseUrl]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Ensure your GeoJSON files are placed in the 'uploads' directory\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: \"Run the preprocessor script to generate statistics files:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-2 bg-gray-800 text-gray-200 p-2 rounded text-left\",\n              children: /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \"node preprocessor.js\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchYearlyData,\n      className: \"px-4 py-2 bg-blue-600 text-white rounded\",\n      children: \"Try Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"California Wildfire Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-4\",\n      children: \"Visualization of wildfire data from California showing yearly trends and monthly breakdown.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"year-select\",\n        className: \"mr-2\",\n        children: \"Select Year for Monthly Data:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"year-select\",\n        value: selectedYear || '',\n        onChange: handleYearChange,\n        className: \"p-1 border border-gray-400 rounded\",\n        disabled: availableYears.length === 0,\n        children: availableYears.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: year,\n          children: year\n        }, year, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Wildfires over the years\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: yearlyData,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 30\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\",\n            vertical: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"year\",\n            tick: {\n              fontSize: 12\n            },\n            tickLine: false,\n            axisLine: {\n              stroke: '#E5E7EB'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            tick: {\n              fontSize: 12\n            },\n            tickLine: false,\n            axisLine: {\n              stroke: '#E5E7EB'\n            },\n            domain: [0, 'dataMax + 100']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [value, 'Count of Fires'],\n            labelFormatter: label => `Year: ${label}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"fires\",\n            stroke: \"#2563EB\",\n            strokeWidth: 2,\n            dot: {\n              fill: '#2563EB',\n              r: 4\n            },\n            activeDot: {\n              r: 6\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"linear\",\n            dataKey: \"fires\",\n            stroke: \"#F97316\",\n            strokeWidth: 2,\n            activeDot: false,\n            dot: false,\n            connectNulls: true,\n            isAnimationActive: false,\n            legendType: \"none\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-bold mb-4\",\n      children: [\"Acres burned by month in \", selectedYear]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      style: {\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(BarChart, {\n          data: monthlyData,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 60\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\",\n            vertical: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"month\",\n            tick: {\n              fontSize: 12\n            },\n            tickLine: false,\n            axisLine: {\n              stroke: '#E5E7EB'\n            },\n            interval: 0,\n            angle: -45,\n            textAnchor: \"end\",\n            height: 60\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            tick: {\n              fontSize: 12\n            },\n            tickLine: false,\n            axisLine: {\n              stroke: '#E5E7EB'\n            },\n            tickFormatter: formatLargeNumber\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: value => [new Intl.NumberFormat().format(value), 'Acres Burned'],\n            labelFormatter: label => `Month: ${label}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            dataKey: \"acres\",\n            fill: \"#DC2626\",\n            name: \"Acres Burned\",\n            barSize: 30,\n            label: {\n              position: 'top',\n              formatter: value => value > 10000 ? formatLargeNumber(value) : '',\n              fontSize: 12,\n              fill: '#6B7280'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-bold\",\n          children: \"Total Fires\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-2xl\",\n          children: summaryStats.totalFires.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-bold\",\n          children: \"Total Acres (All Years)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-2xl\",\n          children: summaryStats.totalAcres.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-bold\",\n          children: [\"Total Acres in \", selectedYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-2xl\",\n          children: summaryStats.yearlyAcres.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-bold\",\n          children: [\"Peak Month in \", selectedYear]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-2xl\",\n          children: summaryStats.peakMonth || 'N/A'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-bold mb-2\",\n        children: \"Data Source Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This visualization uses data from the firep23_1.geojson file, which contains California wildfire records. The yearly chart displays both the count of fire incidents and total acres burned per year (based on the YEAR_ and GIS_ACRES fields), while the monthly chart shows acres burned by month for the selected year.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2\",\n        children: [\"Years Available: \", availableYears.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2\",\n        children: [\"Worst Fire Year: \", summaryStats.worstYear, \" (\", summaryStats.worstYearAcres.toLocaleString(), \" acres)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchYearlyData,\n      className: \"px-4 py-2 bg-blue-600 text-white rounded\",\n      children: \"Refresh Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(CaliforniaFireDashboard, \"yQSljVI4Lhe6fmnzYdVlyC5kKQU=\");\n_c = CaliforniaFireDashboard;\nexport default CaliforniaFireDashboard;\nvar _c;\n$RefreshReg$(_c, \"CaliforniaFireDashboard\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","CaliforniaFireDashboard","_s","yearlyData","setYearlyData","monthlyData","setMonthlyData","loading","setLoading","error","setError","selectedYear","setSelectedYear","availableYears","setAvailableYears","usingSampleData","setUsingSampleData","summaryStats","setSummaryStats","totalFires","totalAcres","yearlyAcres","peakMonth","worstYear","worstYearAcres","backendBaseUrl","fetchYearlyData","fetchMonthlyData","response","fetch","ok","status","console","warn","handleDataError","Error","statusText","data","json","years","prev","summary","length","maxYear","Math","max","map","y","parseInt","toString","err","year","setEmptyMonthlyData","errorMessage","handleYearChange","e","target","value","formatLargeNumber","num","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","xmlns","viewBox","fill","fillRule","d","clipRule","onClick","htmlFor","id","onChange","disabled","style","height","width","margin","top","right","left","bottom","strokeDasharray","vertical","dataKey","tick","fontSize","tickLine","axisLine","stroke","domain","formatter","labelFormatter","label","type","strokeWidth","dot","r","activeDot","connectNulls","isAnimationActive","legendType","interval","angle","textAnchor","tickFormatter","Intl","NumberFormat","format","name","barSize","position","toLocaleString","join","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireDashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nconst CaliforniaFireDashboard = () => {\n  const [yearlyData, setYearlyData] = useState([]);\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [usingSampleData, setUsingSampleData] = useState(false);\n  const [summaryStats, setSummaryStats] = useState({\n    totalFires: 0,\n    totalAcres: 0,\n    yearlyAcres: 0,\n    peakMonth: '',\n    worstYear: '',\n    worstYearAcres: 0\n  });\n  \n  const backendBaseUrl = 'http://localhost:8000';\n\n  // Load yearly data when component mounts\n  useEffect(() => {\n    fetchYearlyData();\n  }, []);\n\n  // Fetch monthly data when selected year changes\n  useEffect(() => {\n    if (selectedYear) {\n      fetchMonthlyData(selectedYear);\n    }\n  }, [selectedYear]);\n\n  const fetchYearlyData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${backendBaseUrl}/api/stats/yearly?dataset=firep23_1`);\n      \n      if (!response.ok) {\n        // If we get a 404, it means the statistics file isn't available\n        if (response.status === 404) {\n          console.warn(\"Statistics file not found\");\n          handleDataError(\"Statistics file not found. Please run the preprocessor script first.\");\n          return;\n        }\n        throw new Error(`Failed to fetch yearly data: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      setYearlyData(data.yearlyData);\n      setAvailableYears(data.years);\n      setUsingSampleData(false);\n      \n      // Update summary stats\n      setSummaryStats(prev => ({\n        ...prev,\n        totalFires: data.summary.totalFires,\n        totalAcres: data.summary.totalAcres,\n        worstYear: data.summary.worstYear,\n        worstYearAcres: data.summary.worstYearAcres\n      }));\n      \n      // Set the most recent year as the default selected year\n      if (data.years.length > 0) {\n        const maxYear = Math.max(...data.years.map(y => parseInt(y)));\n        setSelectedYear(maxYear.toString());\n      }\n      \n    } catch (err) {\n      console.error(\"Error fetching yearly fire data:\", err);\n      handleDataError(\"Failed to load fire data. Please check server connection and run the preprocessor script.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchMonthlyData = async (year) => {\n    if (error) {\n      setEmptyMonthlyData();\n      return;\n    }\n\n    try {\n      // Only show loading indicator for initial data load, not for year changes\n      if (monthlyData.length === 0) {\n        setLoading(true);\n      }\n      \n      const response = await fetch(`${backendBaseUrl}/api/stats/monthly?dataset=firep23_1&year=${year}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.warn(\"Monthly statistics not found\");\n          setError(\"Monthly statistics for this year not found. Please run the preprocessor script first.\");\n          setEmptyMonthlyData();\n          return;\n        }\n        throw new Error(`Failed to fetch monthly data: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      setMonthlyData(data.monthlyData);\n      \n      // Update summary stats for the selected year\n      setSummaryStats(prev => ({\n        ...prev,\n        yearlyAcres: data.summary.totalAcres,\n        peakMonth: data.summary.peakMonth\n      }));\n      \n    } catch (err) {\n      console.error(`Error fetching monthly fire data for year ${year}:`, err);\n      setError(`Failed to load monthly data for ${year}. Please check server connection.`);\n      setEmptyMonthlyData();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle data loading error\n  const handleDataError = (errorMessage) => {\n    setYearlyData([]);\n    setAvailableYears([]);\n    setSelectedYear(null);\n    setError(errorMessage || \"Failed to load fire data. Please run the preprocessor script first.\");\n  };\n\n  // Set empty monthly data when error occurs\n  const setEmptyMonthlyData = () => {\n    setMonthlyData([]);\n    setSummaryStats(prev => ({\n      ...prev,\n      yearlyAcres: 0,\n      peakMonth: 'N/A'\n    }));\n  };\n\n  const handleYearChange = (e) => {\n    setSelectedYear(e.target.value);\n  };\n\n  const formatLargeNumber = (num) => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num;\n  };\n\n  if (loading && yearlyData.length === 0) return (\n    <div className=\"p-4 text-center\">\n      <div className=\"text-lg font-medium text-gray-700\">Loading fire data...</div>\n    </div>\n  );\n  \n  if (error) return (\n    <div className=\"p-6 text-center\">\n      <h2 className=\"text-2xl font-bold mb-4\">California Wildfire Dashboard</h2>\n      \n      <div className=\"bg-red-50 border-l-4 border-red-500 p-4 mb-6\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-red-500\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-lg font-medium text-red-800\">Data Loading Error</h3>\n            <div className=\"mt-2 text-red-700\">\n              <p>{error}</p>\n            </div>\n            <div className=\"mt-4\">\n              <p className=\"text-sm text-red-700\">To fix this issue:</p>\n              <ol className=\"list-decimal ml-6 mt-2 text-sm text-red-700\">\n                <li>Make sure the server is running at {backendBaseUrl}</li>\n                <li>Ensure your GeoJSON files are placed in the 'uploads' directory</li>\n                <li>Run the preprocessor script to generate statistics files:</li>\n              </ol>\n              <div className=\"mt-2 bg-gray-800 text-gray-200 p-2 rounded text-left\">\n                <code>node preprocessor.js</code>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <button \n        onClick={fetchYearlyData} \n        className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n      >\n        Try Again\n      </button>\n    </div>\n  );\n\n  return (\n    <div>\n      <h2 className=\"text-2xl font-bold mb-4\">California Wildfire Dashboard</h2>\n      <p className=\"mb-4\">Visualization of wildfire data from California showing yearly trends and monthly breakdown.</p>\n      \n      {/* Year selector */}\n      <div className=\"mb-6\">\n        <label htmlFor=\"year-select\" className=\"mr-2\">Select Year for Monthly Data:</label>\n        <select\n          id=\"year-select\"\n          value={selectedYear || ''}\n          onChange={handleYearChange}\n          className=\"p-1 border border-gray-400 rounded\"\n          disabled={availableYears.length === 0}\n        >\n          {availableYears.map(year => (\n            <option key={year} value={year}>{year}</option>\n          ))}\n        </select>\n      </div>\n      \n      {/* Yearly Fire Chart */}\n      <h3 className=\"text-xl font-bold mb-4\">Wildfires over the years</h3>\n      <div className=\"mb-8\" style={{ height: '400px' }}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <LineChart\n            data={yearlyData}\n            margin={{ top: 5, right: 30, left: 20, bottom: 30 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n            <XAxis \n              dataKey=\"year\"\n              tick={{ fontSize: 12 }}\n              tickLine={false}\n              axisLine={{ stroke: '#E5E7EB' }}\n            />\n            <YAxis \n              tick={{ fontSize: 12 }}\n              tickLine={false}\n              axisLine={{ stroke: '#E5E7EB' }}\n              domain={[0, 'dataMax + 100']}\n            />\n            <Tooltip\n              formatter={(value) => [value, 'Count of Fires']}\n              labelFormatter={(label) => `Year: ${label}`}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"fires\" \n              stroke=\"#2563EB\" \n              strokeWidth={2}\n              dot={{ fill: '#2563EB', r: 4 }}\n              activeDot={{ r: 6 }}\n            />\n            {/* Add trend line */}\n            <Line \n              type=\"linear\" \n              dataKey=\"fires\" \n              stroke=\"#F97316\" \n              strokeWidth={2}\n              activeDot={false}\n              dot={false}\n              connectNulls={true}\n              isAnimationActive={false}\n              legendType=\"none\"\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n      \n      {/* Monthly Acres Burned Chart */}\n      <h3 className=\"text-xl font-bold mb-4\">Acres burned by month in {selectedYear}</h3>\n      <div className=\"mb-8\" style={{ height: '400px' }}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart\n            data={monthlyData}\n            margin={{ top: 5, right: 30, left: 20, bottom: 60 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n            <XAxis \n              dataKey=\"month\" \n              tick={{ fontSize: 12 }}\n              tickLine={false}\n              axisLine={{ stroke: '#E5E7EB' }}\n              interval={0}\n              angle={-45}\n              textAnchor=\"end\"\n              height={60}\n            />\n            <YAxis \n              tick={{ fontSize: 12 }}\n              tickLine={false}\n              axisLine={{ stroke: '#E5E7EB' }}\n              tickFormatter={formatLargeNumber}\n            />\n            <Tooltip\n              formatter={(value) => [new Intl.NumberFormat().format(value), 'Acres Burned']}\n              labelFormatter={(label) => `Month: ${label}`}\n            />\n            <Bar \n              dataKey=\"acres\" \n              fill=\"#DC2626\" \n              name=\"Acres Burned\" \n              barSize={30}\n              label={{\n                position: 'top',\n                formatter: (value) => value > 10000 ? formatLargeNumber(value) : '',\n                fontSize: 12,\n                fill: '#6B7280'\n              }}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n      \n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        <div>\n          <h3 className=\"text-lg font-bold\">Total Fires</h3>\n          <p className=\"text-2xl\">{summaryStats.totalFires.toLocaleString()}</p>\n        </div>\n        <div>\n          <h3 className=\"text-lg font-bold\">Total Acres (All Years)</h3>\n          <p className=\"text-2xl\">{summaryStats.totalAcres.toLocaleString()}</p>\n        </div>\n        <div>\n          <h3 className=\"text-lg font-bold\">Total Acres in {selectedYear}</h3>\n          <p className=\"text-2xl\">{summaryStats.yearlyAcres.toLocaleString()}</p>\n        </div>\n        <div>\n          <h3 className=\"text-lg font-bold\">Peak Month in {selectedYear}</h3>\n          <p className=\"text-2xl\">{summaryStats.peakMonth || 'N/A'}</p>\n        </div>\n      </div>\n      \n      {/* Data Source Info */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-bold mb-2\">Data Source Information</h3>\n        <p>\n          This visualization uses data from the firep23_1.geojson file, which contains California wildfire records.\n          The yearly chart displays both the count of fire incidents and total acres burned per year (based on the YEAR_ and GIS_ACRES fields),\n          while the monthly chart shows acres burned by month for the selected year.\n        </p>\n        <p className=\"mt-2\">\n          Years Available: {availableYears.join(', ')}\n        </p>\n        <p className=\"mt-2\">\n          Worst Fire Year: {summaryStats.worstYear} ({summaryStats.worstYearAcres.toLocaleString()} acres)\n        </p>\n      </div>\n      \n      <button \n        onClick={fetchYearlyData} \n        className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n      >\n        Refresh Data\n      </button>\n    </div>\n  );\n};\n\nexport default CaliforniaFireDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}