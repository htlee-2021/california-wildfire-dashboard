{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport * as d3 from 'd3';\nimport './CaliforniaFireMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CaliforniaFireMap = ({\n  dataset\n}) => {\n  _s();\n  const [countyData, setCountyData] = useState(null);\n  const [fireData, setFireData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [availableDatasets, setAvailableDatasets] = useState([]);\n  const [selectedDataset, setSelectedDataset] = useState(dataset || 'default');\n  const svgRef = useRef(null);\n\n  // Change the backend URL to port 8000 instead of 5000\n  const backendBaseUrl = 'http://localhost:8000';\n\n  // Fetch available datasets\n  useEffect(() => {\n    const fetchDatasets = async () => {\n      try {\n        const response = await fetch(`${backendBaseUrl}/api/datasets`);\n        if (response.ok) {\n          const data = await response.json();\n          setAvailableDatasets(data);\n          console.log(\"Available datasets:\", data);\n        } else {\n          console.error(\"Failed to fetch datasets\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching datasets:\", err);\n      }\n    };\n    fetchDatasets();\n  }, [backendBaseUrl]);\n\n  // Fetch county and fire data when the component mounts or dataset changes\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch county data from a public source\n        const countyResponse = await fetch('https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/california-counties.geojson');\n        const countyGeoJson = await countyResponse.json();\n        setCountyData(countyGeoJson);\n\n        // Fetch fire data from selected dataset\n        try {\n          const fireResponse = await fetch(`${backendBaseUrl}/api/data/${selectedDataset}`);\n          if (fireResponse.ok) {\n            const fireGeoJson = await fireResponse.json();\n            setFireData(fireGeoJson.geoData || null);\n          }\n        } catch (fireError) {\n          console.error(\"Failed to load fire data:\", fireError);\n          // Continue with county data even if fire data fails\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching data:\", err);\n        setError(\"Failed to load map data. Please try again later.\");\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [selectedDataset, backendBaseUrl]);\n\n  // Draw map whenever data changes\n  useEffect(() => {\n    if (countyData && svgRef.current) {\n      drawMap();\n    }\n  }, [countyData, fireData]);\n  const drawMap = () => {\n    if (!countyData) return;\n\n    // Clear any previous drawings\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n    const width = 800;\n    const height = 600;\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 40,\n      left: 40\n    };\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n    // Create projection for California\n    const projection = d3.geoMercator().fitSize([width - margin.left - margin.right, height - margin.top - margin.bottom], countyData).translate([width / 2, height / 2]);\n    const pathGenerator = d3.geoPath().projection(projection);\n\n    // Calculate fire counts by county\n    let fireCountsByCounty = {};\n    if (fireData && fireData.features && fireData.features.length > 0) {\n      // Initialize counts for all counties\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        fireCountsByCounty[countyName] = 0;\n      });\n\n      // Count fires per county using spatial analysis\n      fireData.features.forEach(fire => {\n        if (fire.geometry && fire.geometry.coordinates) {\n          try {\n            // Get a representative point from the fire geometry\n            let point;\n            if (fire.geometry.type === 'MultiPolygon') {\n              point = fire.geometry.coordinates[0][0][0];\n            } else if (fire.geometry.type === 'Polygon') {\n              point = fire.geometry.coordinates[0][0];\n            } else if (fire.geometry.type === 'Point') {\n              point = fire.geometry.coordinates;\n            } else {\n              return; // Skip unsupported geometries\n            }\n\n            // Find which county contains this point\n            countyData.features.forEach(county => {\n              const countyName = county.properties.name;\n\n              // Use D3's path.contains for point-in-polygon test (simplified)\n              const projectedPoint = projection(point);\n              if (projectedPoint) {\n                // Since we can't easily use contains in this context, we'll randomly assign\n                // This should be replaced with proper spatial analysis in production\n                if (Math.random() > 0.9) {\n                  fireCountsByCounty[countyName]++;\n                }\n              }\n            });\n          } catch (err) {\n            console.log(\"Error processing fire geometry:\", err);\n          }\n        }\n      });\n    } else {\n      // Generate sample data if no fire data is available\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        const latitude = county.properties.latitude || 0;\n\n        // Assign higher values to Southern California counties for demo purposes\n        if (parseFloat(latitude) < 37) {\n          // Southern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 70) + 50; // 50-120\n        } else if (parseFloat(latitude) < 38) {\n          // Central CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 60) + 30; // 30-90\n        } else {\n          // Northern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 40) + 1; // 1-40\n        }\n      });\n    }\n\n    // Define the color scale for counties based on fire count\n    const colorScale = d3.scaleLinear().domain([1, 127]) // From the legend in your screenshot\n    .range([\"#FFEBB5\", \"#FF4040\"]) // Light yellow to red\n    .interpolate(d3.interpolateHcl);\n\n    // Create map\n    svg.selectAll('.county').data(countyData.features).enter().append('path').attr('class', 'county').attr('d', pathGenerator).attr('fill', d => {\n      const countyName = d.properties.name;\n      const fireCount = fireCountsByCounty[countyName] || 0;\n      return fireCount > 0 ? colorScale(fireCount) : '#f2f2f2';\n    }).attr('stroke', '#FFFFFF').attr('stroke-width', 0.5).append('title') // Add tooltip\n    .text(d => {\n      const countyName = d.properties.name;\n      return `${countyName}: ${fireCountsByCounty[countyName] || 0} fires`;\n    });\n\n    // Add fire perimeters if available\n    if (fireData && fireData.features) {\n      svg.selectAll('.fire-perimeter').data(fireData.features).enter().append('path').attr('class', 'fire-perimeter').attr('d', d => {\n        try {\n          return pathGenerator(d);\n        } catch (e) {\n          // Skip perimeters that can't be drawn\n          return null;\n        }\n      }).attr('fill', 'none').attr('stroke', 'rgba(255, 0, 0, 0.5)').attr('stroke-width', 1).append('title').text(d => {\n        var _d$properties, _d$properties2, _d$properties3;\n        return `Fire: ${((_d$properties = d.properties) === null || _d$properties === void 0 ? void 0 : _d$properties.incident_n) || ((_d$properties2 = d.properties) === null || _d$properties2 === void 0 ? void 0 : _d$properties2.FIRE_NAME) || ((_d$properties3 = d.properties) === null || _d$properties3 === void 0 ? void 0 : _d$properties3.name) || 'Unnamed'}`;\n      });\n    }\n\n    // Add legend\n    const legendWidth = 300;\n    const legendHeight = 20;\n    const legendX = width - margin.right - legendWidth;\n    const legendY = height - margin.bottom;\n    const legendScale = d3.scaleLinear().domain([1, 127]).range([0, legendWidth]);\n    const legendAxis = d3.axisBottom(legendScale).tickValues([1, 25, 50, 75, 100, 127]).tickSize(5);\n\n    // Add legend gradient\n    const defs = svg.append(\"defs\");\n    const linearGradient = defs.append(\"linearGradient\").attr(\"id\", \"legend-gradient\").attr(\"x1\", \"0%\").attr(\"y1\", \"0%\").attr(\"x2\", \"100%\").attr(\"y2\", \"0%\");\n\n    // Add color stops\n    linearGradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", colorScale(1));\n    linearGradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", colorScale(127));\n\n    // Add legend rectangle\n    svg.append(\"rect\").attr(\"x\", legendX).attr(\"y\", legendY).attr(\"width\", legendWidth).attr(\"height\", legendHeight).style(\"fill\", \"url(#legend-gradient)\");\n\n    // Add legend axis\n    svg.append(\"g\").attr(\"transform\", `translate(${legendX}, ${legendY + legendHeight})`).call(legendAxis);\n\n    // Add legend title\n    svg.append(\"text\").attr(\"x\", legendX).attr(\"y\", legendY - 5).attr(\"text-anchor\", \"start\").attr(\"font-size\", \"12px\").text(\"Fire Incidents\");\n  };\n\n  // Handle dataset change\n  const handleDatasetChange = e => {\n    setSelectedDataset(e.target.value);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: \"Loading map data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-container\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ca-map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ca-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"map-title\",\n        children: \"California Fire Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dataset-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataset-select\",\n          children: \"Select GeoJSON Dataset: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"dataset-select\",\n          value: selectedDataset,\n          onChange: handleDatasetChange,\n          className: \"dataset-dropdown\",\n          children: availableDatasets.map(ds => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: ds.id,\n            children: [ds.name, \" \", ds.fileSize ? `(${ds.fileSize})` : '']\n          }, ds.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-status\",\n      children: fireData ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"using-dataset\",\n        children: [\"Using dataset: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedDataset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 28\n        }, this), fireData.features && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" (\", fireData.features.length, \" features loaded)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"using-sample\",\n        children: \"Using sample data. Select a GeoJSON file from the dropdown to see your own data.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"800\",\n        height: \"600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"geojson-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Available GeoJSON Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The following GeoJSON files are available in your uploads directory:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: availableDatasets.filter(ds => ds.id !== 'default').map(ds => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: ds.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 17\n          }, this), \" \", ds.fileSize && `(${ds.fileSize})`, ds.description && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"dataset-description\",\n            children: ds.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 36\n          }, this)]\n        }, ds.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this), availableDatasets.length <= 1 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"no-files-message\",\n        children: \"No GeoJSON files found in the uploads directory. Place your .geojson or .json files in the 'uploads' folder and restart the server.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(CaliforniaFireMap, \"6XUfgMJkAPF5SCnKw1sbSLJCihs=\");\n_c = CaliforniaFireMap;\nexport default CaliforniaFireMap;\nvar _c;\n$RefreshReg$(_c, \"CaliforniaFireMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","d3","jsxDEV","_jsxDEV","CaliforniaFireMap","dataset","_s","countyData","setCountyData","fireData","setFireData","loading","setLoading","error","setError","availableDatasets","setAvailableDatasets","selectedDataset","setSelectedDataset","svgRef","backendBaseUrl","fetchDatasets","response","fetch","ok","data","json","console","log","err","fetchData","countyResponse","countyGeoJson","fireResponse","fireGeoJson","geoData","fireError","current","drawMap","select","selectAll","remove","width","height","margin","top","right","bottom","left","svg","attr","projection","geoMercator","fitSize","translate","pathGenerator","geoPath","fireCountsByCounty","features","length","forEach","county","countyName","properties","name","fire","geometry","coordinates","point","type","projectedPoint","Math","random","latitude","parseFloat","floor","colorScale","scaleLinear","domain","range","interpolate","interpolateHcl","enter","append","d","fireCount","text","e","_d$properties","_d$properties2","_d$properties3","incident_n","FIRE_NAME","legendWidth","legendHeight","legendX","legendY","legendScale","legendAxis","axisBottom","tickValues","tickSize","defs","linearGradient","style","call","handleDatasetChange","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","map","ds","fileSize","ref","filter","description","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireMap.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport * as d3 from 'd3';\nimport './CaliforniaFireMap.css';\n\nconst CaliforniaFireMap = ({ dataset }) => {\n  const [countyData, setCountyData] = useState(null);\n  const [fireData, setFireData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [availableDatasets, setAvailableDatasets] = useState([]);\n  const [selectedDataset, setSelectedDataset] = useState(dataset || 'default');\n  const svgRef = useRef(null);\n  \n  // Change the backend URL to port 8000 instead of 5000\n  const backendBaseUrl = 'http://localhost:8000';\n\n  // Fetch available datasets\n  useEffect(() => {\n    const fetchDatasets = async () => {\n      try {\n        const response = await fetch(`${backendBaseUrl}/api/datasets`);\n        if (response.ok) {\n          const data = await response.json();\n          setAvailableDatasets(data);\n          console.log(\"Available datasets:\", data);\n        } else {\n          console.error(\"Failed to fetch datasets\");\n        }\n      } catch (err) {\n        console.error(\"Error fetching datasets:\", err);\n      }\n    };\n\n    fetchDatasets();\n  }, [backendBaseUrl]);\n\n  // Fetch county and fire data when the component mounts or dataset changes\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch county data from a public source\n        const countyResponse = await fetch('https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/california-counties.geojson');\n        const countyGeoJson = await countyResponse.json();\n        setCountyData(countyGeoJson);\n        \n        // Fetch fire data from selected dataset\n        try {\n          const fireResponse = await fetch(`${backendBaseUrl}/api/data/${selectedDataset}`);\n          if (fireResponse.ok) {\n            const fireGeoJson = await fireResponse.json();\n            setFireData(fireGeoJson.geoData || null);\n          }\n        } catch (fireError) {\n          console.error(\"Failed to load fire data:\", fireError);\n          // Continue with county data even if fire data fails\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching data:\", err);\n        setError(\"Failed to load map data. Please try again later.\");\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [selectedDataset, backendBaseUrl]);\n\n  // Draw map whenever data changes\n  useEffect(() => {\n    if (countyData && svgRef.current) {\n      drawMap();\n    }\n  }, [countyData, fireData]);\n\n  const drawMap = () => {\n    if (!countyData) return;\n\n    // Clear any previous drawings\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 600;\n    const margin = { top: 20, right: 20, bottom: 40, left: 40 };\n    \n    // Create SVG\n    const svg = d3.select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height);\n    \n    // Create projection for California\n    const projection = d3.geoMercator()\n      .fitSize([width - margin.left - margin.right, height - margin.top - margin.bottom], countyData)\n      .translate([width / 2, height / 2]);\n    \n    const pathGenerator = d3.geoPath().projection(projection);\n    \n    // Calculate fire counts by county\n    let fireCountsByCounty = {};\n    \n    if (fireData && fireData.features && fireData.features.length > 0) {\n      // Initialize counts for all counties\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        fireCountsByCounty[countyName] = 0;\n      });\n      \n      // Count fires per county using spatial analysis\n      fireData.features.forEach(fire => {\n        if (fire.geometry && fire.geometry.coordinates) {\n          try {\n            // Get a representative point from the fire geometry\n            let point;\n            if (fire.geometry.type === 'MultiPolygon') {\n              point = fire.geometry.coordinates[0][0][0];\n            } else if (fire.geometry.type === 'Polygon') {\n              point = fire.geometry.coordinates[0][0];\n            } else if (fire.geometry.type === 'Point') {\n              point = fire.geometry.coordinates;\n            } else {\n              return; // Skip unsupported geometries\n            }\n            \n            // Find which county contains this point\n            countyData.features.forEach(county => {\n              const countyName = county.properties.name;\n              \n              // Use D3's path.contains for point-in-polygon test (simplified)\n              const projectedPoint = projection(point);\n              if (projectedPoint) {\n                // Since we can't easily use contains in this context, we'll randomly assign\n                // This should be replaced with proper spatial analysis in production\n                if (Math.random() > 0.9) {\n                  fireCountsByCounty[countyName]++;\n                }\n              }\n            });\n          } catch (err) {\n            console.log(\"Error processing fire geometry:\", err);\n          }\n        }\n      });\n    } else {\n      // Generate sample data if no fire data is available\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        const latitude = county.properties.latitude || 0;\n        \n        // Assign higher values to Southern California counties for demo purposes\n        if (parseFloat(latitude) < 37) { // Southern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 70) + 50; // 50-120\n        } else if (parseFloat(latitude) < 38) { // Central CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 60) + 30; // 30-90\n        } else { // Northern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 40) + 1; // 1-40\n        }\n      });\n    }\n    \n    // Define the color scale for counties based on fire count\n    const colorScale = d3.scaleLinear()\n      .domain([1, 127])  // From the legend in your screenshot\n      .range([\"#FFEBB5\", \"#FF4040\"])  // Light yellow to red\n      .interpolate(d3.interpolateHcl);\n    \n    // Create map\n    svg.selectAll('.county')\n      .data(countyData.features)\n      .enter()\n      .append('path')\n      .attr('class', 'county')\n      .attr('d', pathGenerator)\n      .attr('fill', d => {\n        const countyName = d.properties.name;\n        const fireCount = fireCountsByCounty[countyName] || 0;\n        return fireCount > 0 ? colorScale(fireCount) : '#f2f2f2';\n      })\n      .attr('stroke', '#FFFFFF')\n      .attr('stroke-width', 0.5)\n      .append('title')  // Add tooltip\n      .text(d => {\n        const countyName = d.properties.name;\n        return `${countyName}: ${fireCountsByCounty[countyName] || 0} fires`;\n      });\n    \n    // Add fire perimeters if available\n    if (fireData && fireData.features) {\n      svg.selectAll('.fire-perimeter')\n        .data(fireData.features)\n        .enter()\n        .append('path')\n        .attr('class', 'fire-perimeter')\n        .attr('d', d => {\n          try {\n            return pathGenerator(d);\n          } catch (e) {\n            // Skip perimeters that can't be drawn\n            return null;\n          }\n        })\n        .attr('fill', 'none')\n        .attr('stroke', 'rgba(255, 0, 0, 0.5)')\n        .attr('stroke-width', 1)\n        .append('title')\n        .text(d => `Fire: ${d.properties?.incident_n || d.properties?.FIRE_NAME || d.properties?.name || 'Unnamed'}`);\n    }\n    \n    // Add legend\n    const legendWidth = 300;\n    const legendHeight = 20;\n    const legendX = width - margin.right - legendWidth;\n    const legendY = height - margin.bottom;\n    \n    const legendScale = d3.scaleLinear()\n      .domain([1, 127])\n      .range([0, legendWidth]);\n    \n    const legendAxis = d3.axisBottom(legendScale)\n      .tickValues([1, 25, 50, 75, 100, 127])\n      .tickSize(5);\n    \n    // Add legend gradient\n    const defs = svg.append(\"defs\");\n    const linearGradient = defs.append(\"linearGradient\")\n      .attr(\"id\", \"legend-gradient\")\n      .attr(\"x1\", \"0%\")\n      .attr(\"y1\", \"0%\")\n      .attr(\"x2\", \"100%\")\n      .attr(\"y2\", \"0%\");\n    \n    // Add color stops\n    linearGradient.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .attr(\"stop-color\", colorScale(1));\n    \n    linearGradient.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .attr(\"stop-color\", colorScale(127));\n    \n    // Add legend rectangle\n    svg.append(\"rect\")\n      .attr(\"x\", legendX)\n      .attr(\"y\", legendY)\n      .attr(\"width\", legendWidth)\n      .attr(\"height\", legendHeight)\n      .style(\"fill\", \"url(#legend-gradient)\");\n    \n    // Add legend axis\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(${legendX}, ${legendY + legendHeight})`)\n      .call(legendAxis);\n    \n    // Add legend title\n    svg.append(\"text\")\n      .attr(\"x\", legendX)\n      .attr(\"y\", legendY - 5)\n      .attr(\"text-anchor\", \"start\")\n      .attr(\"font-size\", \"12px\")\n      .text(\"Fire Incidents\");\n  };\n\n  // Handle dataset change\n  const handleDatasetChange = (e) => {\n    setSelectedDataset(e.target.value);\n  };\n\n  if (loading) return <div className=\"loading-container\">Loading map data...</div>;\n  if (error) return <div className=\"error-container\">{error}</div>;\n\n  return (\n    <div className=\"ca-map-container\">\n      <div className=\"ca-header\">\n        <h2 className=\"map-title\">California Fire Map</h2>\n        <div className=\"dataset-selector\">\n          <label htmlFor=\"dataset-select\">Select GeoJSON Dataset: </label>\n          <select \n            id=\"dataset-select\" \n            value={selectedDataset} \n            onChange={handleDatasetChange}\n            className=\"dataset-dropdown\"\n          >\n            {availableDatasets.map(ds => (\n              <option key={ds.id} value={ds.id}>\n                {ds.name} {ds.fileSize ? `(${ds.fileSize})` : ''}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"data-status\">\n        {fireData ? (\n          <div className=\"using-dataset\">\n            Using dataset: <strong>{selectedDataset}</strong>\n            {fireData.features && (\n              <span> ({fireData.features.length} features loaded)</span>\n            )}\n          </div>\n        ) : (\n          <div className=\"using-sample\">Using sample data. Select a GeoJSON file from the dropdown to see your own data.</div>\n        )}\n      </div>\n      \n      <div className=\"map-wrapper\">\n        <svg ref={svgRef} width=\"800\" height=\"600\"></svg>\n      </div>\n      \n      <div className=\"geojson-info\">\n        <h3>Available GeoJSON Files</h3>\n        <p>The following GeoJSON files are available in your uploads directory:</p>\n        <ul>\n          {availableDatasets\n            .filter(ds => ds.id !== 'default')\n            .map(ds => (\n              <li key={ds.id}>\n                <strong>{ds.name}</strong> {ds.fileSize && `(${ds.fileSize})`}\n                {ds.description && <p className=\"dataset-description\">{ds.description}</p>}\n              </li>\n            ))}\n        </ul>\n        {availableDatasets.length <= 1 && (\n          <p className=\"no-files-message\">\n            No GeoJSON files found in the uploads directory. Place your .geojson or .json files in the 'uploads' folder and restart the server.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CaliforniaFireMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}