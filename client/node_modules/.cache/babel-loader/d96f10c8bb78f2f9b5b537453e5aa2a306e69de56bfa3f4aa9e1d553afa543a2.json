{"ast":null,"code":"import React,{useEffect,useState}from'react';import{MainDashboard}from'./MainDashboard';import{EnhancedYearlyAnalysisDashboard}from'./YearlyAnalysisDashboard';import{FireCauseAnalysisDashboard}from'./FireCauseAnalysisDashboard';import{TemperatureFireCorrelation}from'./TemperatureFireCorrelation';import TableauDashboard from'./TableauDashboard';import'./FireDashboard.css';import'./TableauDashboard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FireDashboardSystem=_ref=>{let{containerId}=_ref;const[container,setContainer]=useState(null);const[activeTab,setActiveTab]=useState('main');const[yearlyData,setYearlyData]=useState([]);const[monthlyData,setMonthlyData]=useState([]);const[monthlyDataByYear,setMonthlyDataByYear]=useState({});const[causesData,setCausesData]=useState({});const[topCauses,setTopCauses]=useState([]);const[causeDefinitions,setCauseDefinitions]=useState({});const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[selectedYear,setSelectedYear]=useState(null);const[availableYears,setAvailableYears]=useState([]);const[summaryStats,setSummaryStats]=useState({totalFires:0,totalAcres:0,yearlyAcres:0,peakMonth:'',worstYear:'',worstYearAcres:0,recentYear:'',recentYearFires:0,recentYearAcres:0,avgAnnualFires:0,avgAnnualAcres:0});// Updated path to use public directory instead of backend server\nconst dataBaseUrl='/data';// Client-side implementation of mergeStatistics\nconst mergeStatistics=(statsData,newStatsData)=>{// Merge yearly data\nconst combinedYearlyData=[...statsData.yearlyData];// Add any new years from the new data\nnewStatsData.yearlyData.forEach(newYearData=>{const existingYearIndex=combinedYearlyData.findIndex(year=>year.year===newYearData.year);if(existingYearIndex===-1){// Year doesn't exist in original data, add it\ncombinedYearlyData.push(newYearData);}else{// Year exists, update with combined statistics\ncombinedYearlyData[existingYearIndex].fires+=newYearData.fires;combinedYearlyData[existingYearIndex].acres+=newYearData.acres;}});// Sort by year\ncombinedYearlyData.sort((a,b)=>parseInt(a.year)-parseInt(b.year));// Merge years array\nconst combinedYears=Array.from(new Set([...statsData.years,...newStatsData.years])).sort();// Merge monthly data by year\nconst combinedMonthlyData={...statsData.monthlyDataByYear};if(newStatsData.monthlyDataByYear){Object.entries(newStatsData.monthlyDataByYear).forEach(_ref2=>{let[year,monthlyData]=_ref2;if(!combinedMonthlyData[year]){// Year doesn't exist in original data, add all months\ncombinedMonthlyData[year]=monthlyData;}else{// Year exists, combine monthly data\nmonthlyData.forEach((newMonthData,index)=>{combinedMonthlyData[year][index].fires+=newMonthData.fires;combinedMonthlyData[year][index].acres+=newMonthData.acres;});}});}// Merge causes data by year\nconst combinedCausesData={...(statsData.causesDataByYear||{})};if(newStatsData.causesDataByYear){Object.entries(newStatsData.causesDataByYear).forEach(_ref3=>{let[year,causesData]=_ref3;if(!combinedCausesData[year]){// Year doesn't exist in original data, add all causes data\ncombinedCausesData[year]=causesData;}else{// Year exists, combine causes data\n// Merge causes array\nconst existingCauses=combinedCausesData[year].causes||[];const newCauses=causesData.causes||[];// Create a map of existing causes for easy access\nconst causesMap=new Map();existingCauses.forEach(cause=>{causesMap.set(cause.causeId,cause);});// Add or update causes\nnewCauses.forEach(newCause=>{if(causesMap.has(newCause.causeId)){// Update existing cause\nconst existingCause=causesMap.get(newCause.causeId);existingCause.fires+=newCause.fires;existingCause.acres+=newCause.acres;}else{// Add new cause\nexistingCauses.push(newCause);}});// Sort by fires in descending order\nexistingCauses.sort((a,b)=>b.fires-a.fires);// Update the causes array\ncombinedCausesData[year].causes=existingCauses;// Merge monthly breakdown if available\nif(causesData.monthlyBreakdown&&combinedCausesData[year].monthlyBreakdown){Object.entries(causesData.monthlyBreakdown).forEach(_ref4=>{let[month,causes]=_ref4;if(!combinedCausesData[year].monthlyBreakdown[month]){// Month doesn't exist, add all causes\ncombinedCausesData[year].monthlyBreakdown[month]=causes;}else{// Month exists, merge causes\nconst existingMonthCauses=combinedCausesData[year].monthlyBreakdown[month];const monthCausesMap=new Map();existingMonthCauses.forEach(cause=>{monthCausesMap.set(cause.causeId,cause);});causes.forEach(newCause=>{if(monthCausesMap.has(newCause.causeId)){// Update existing cause\nconst existingCause=monthCausesMap.get(newCause.causeId);existingCause.fires+=newCause.fires;existingCause.acres+=newCause.acres;}else{// Add new cause\nexistingMonthCauses.push(newCause);}});// Sort by fires in descending order\nexistingMonthCauses.sort((a,b)=>b.fires-a.fires);}});}}});}// Combine top causes across all data\nconst combinedTopCauses=[];const causeMap=new Map();// Add existing top causes to the map\nif(statsData.topCauses){statsData.topCauses.forEach(cause=>{causeMap.set(cause.causeId,cause);});}// Add or update with new top causes\nif(newStatsData.topCauses){newStatsData.topCauses.forEach(newCause=>{if(causeMap.has(newCause.causeId)){// Update existing cause\nconst existingCause=causeMap.get(newCause.causeId);existingCause.fires+=newCause.fires;existingCause.acres+=newCause.acres;}else{// Add new cause\ncauseMap.set(newCause.causeId,{...newCause});}});}// Convert map back to array\ncauseMap.forEach(cause=>{combinedTopCauses.push(cause);});// Sort by fires in descending order\ncombinedTopCauses.sort((a,b)=>b.fires-a.fires);// Recalculate percentages\nconst totalFiresTopCauses=combinedTopCauses.reduce((sum,cause)=>sum+cause.fires,0);combinedTopCauses.forEach(cause=>{cause.percentage=Math.round(cause.fires/totalFiresTopCauses*1000)/10;});// Combine cause definitions\nconst combinedCauseDefinitions={...(statsData.causeDefinitions||{}),...(newStatsData.causeDefinitions||{})};// Recalculate summary statistics\nconst totalFires=combinedYearlyData.reduce((sum,year)=>sum+year.fires,0);const totalAcres=combinedYearlyData.reduce((sum,year)=>sum+year.acres,0);// Find worst year\nlet worstYear=null;let maxAcres=0;combinedYearlyData.forEach(yearData=>{if(yearData.acres>maxAcres){maxAcres=yearData.acres;worstYear=yearData.year;}});return{yearlyData:combinedYearlyData,years:combinedYears,monthlyDataByYear:combinedMonthlyData,causesDataByYear:combinedCausesData,topCauses:combinedTopCauses,causeDefinitions:combinedCauseDefinitions,summary:{totalFires,totalAcres,worstYear,worstYearAcres:maxAcres}};};useEffect(()=>{setContainer(document.getElementById(containerId));fetchYearlyData();},[containerId]);const handleTabChange=tabName=>{setActiveTab(tabName);};const fetchYearlyData=async()=>{setLoading(true);setError(null);try{// First fetch the main stats file\nconst response=await fetch(`${dataBaseUrl}/firep23_1-stats.json`);if(!response.ok){// If we get a 404, it means the statistics file isn't available\nif(response.status===404){console.warn(\"Statistics file not found\");handleDataError(\"Statistics file not found in the public/data directory.\");return;}throw new Error(`Failed to fetch yearly data: ${response.statusText}`);}let statsData=await response.json();// Try to get the supplementary data\ntry{// Check for supplement file\nconst supplementResponse=await fetch(`${dataBaseUrl}/firep23_1-supplement-stats.json`);// If found, merge the data\nif(supplementResponse.ok){const supplementData=await supplementResponse.json();statsData=mergeStatistics(statsData,supplementData);console.log(\"Successfully merged supplementary data\");}}catch(suppErr){console.warn(\"No supplementary stats found or error loading:\",suppErr);// Continue with just the main data if supplement isn't available\n}setYearlyData(statsData.yearlyData);setAvailableYears(statsData.years);// Set fire cause data if available\nif(statsData.causesDataByYear){setCausesData(statsData.causesDataByYear);}if(statsData.topCauses){setTopCauses(statsData.topCauses);}if(statsData.causeDefinitions){setCauseDefinitions(statsData.causeDefinitions);}// Calculate additional statistics\nconst sortedYears=[...statsData.yearlyData].sort((a,b)=>parseInt(b.year)-parseInt(a.year));const recentYearData=sortedYears.length>0?sortedYears[0]:null;const totalFires=statsData.summary.totalFires;const totalAcres=statsData.summary.totalAcres;const yearCount=statsData.years.length;// Update summary stats\nsetSummaryStats({totalFires:totalFires,totalAcres:totalAcres,worstYear:statsData.summary.worstYear,worstYearAcres:statsData.summary.worstYearAcres,recentYear:recentYearData?recentYearData.year:'N/A',recentYearFires:recentYearData?recentYearData.fires:0,recentYearAcres:recentYearData?recentYearData.acres:0,avgAnnualFires:yearCount>0?Math.round(totalFires/yearCount):0,avgAnnualAcres:yearCount>0?Math.round(totalAcres/yearCount):0});// Set the most recent year as the default selected year\nif(statsData.years.length>0){const maxYear=Math.max(...statsData.years.map(y=>parseInt(y)));setSelectedYear(maxYear.toString());// Since we already have all the monthly data, store it\nif(statsData.monthlyDataByYear){setMonthlyDataByYear(statsData.monthlyDataByYear);// Set the data for the selected year\nif(statsData.monthlyDataByYear[maxYear.toString()]){setMonthlyData(statsData.monthlyDataByYear[maxYear.toString()]);// Calculate peak month for summary\nconst monthData=statsData.monthlyDataByYear[maxYear.toString()];const peakMonth=monthData.reduce((max,month)=>month.acres>max.acres?month:max,{acres:0});// Update summary stats with peak month\nsetSummaryStats(prevStats=>({...prevStats,peakMonth:peakMonth.month||'N/A'}));}else{setEmptyMonthlyData();}}else{// If no monthly data in the file, initialize empty\nsetEmptyMonthlyData();}}setLoading(false);}catch(err){console.error(\"Error fetching yearly fire data:\",err);handleDataError(\"Failed to load fire data. Please ensure data files are available in the public/data directory.\");}};// Load temperature-fire correlation data\nconst fetchTempFireData=async()=>{try{const response=await fetch(`${dataBaseUrl}/temperature-fire-correlation.json`);if(!response.ok){console.warn(\"Temperature-fire correlation data not found\");return null;}return await response.json();}catch(err){console.error(\"Error fetching temperature-fire correlation data:\",err);return null;}};const fetchMonthlyData=async year=>{if(error||!year){setEmptyMonthlyData();return;}try{// Check if we already have the data in our state\nif(monthlyDataByYear&&monthlyDataByYear[year]){setMonthlyData(monthlyDataByYear[year]);// Calculate summary stats\nconst monthData=monthlyDataByYear[year];const totalFires=monthData.reduce((sum,month)=>sum+month.fires,0);const totalAcres=monthData.reduce((sum,month)=>sum+month.acres,0);// Find peak month\nconst peakMonth=monthData.reduce((max,month)=>month.acres>max.acres?month:max,{acres:0});// Update summary stats\nsetSummaryStats(prevStats=>({...prevStats,yearlyAcres:totalAcres,peakMonth:peakMonth.month||'N/A'}));return;}// If we don't have it cached, try to load from data file\nconst wasEmpty=monthlyData.length===0;if(wasEmpty){setLoading(true);}try{// First check the main stats file\nconst response=await fetch(`${dataBaseUrl}/firep23_1-stats.json`);if(response.ok){const statsData=await response.json();if(statsData.monthlyDataByYear&&statsData.monthlyDataByYear[year]){// Found monthly data for this year\nconst monthlyData=statsData.monthlyDataByYear[year];setMonthlyData(monthlyData);// Calculate peak month\nconst peakMonth=monthlyData.reduce((max,month)=>month.acres>max.acres?month:max,{acres:0});// Update summary stats\nsetSummaryStats(prevStats=>({...prevStats,yearlyAcres:monthlyData.reduce((sum,month)=>sum+month.acres,0),peakMonth:peakMonth.month||'N/A'}));// Update monthly data by year cache\nsetMonthlyDataByYear(prevData=>({...prevData,[year]:monthlyData}));if(wasEmpty){setLoading(false);}return;}}// Check supplement file\nconst supplementResponse=await fetch(`${dataBaseUrl}/firep23_1-supplement-stats.json`);if(supplementResponse.ok){const supplementData=await supplementResponse.json();if(supplementData.monthlyDataByYear&&supplementData.monthlyDataByYear[year]){// Found monthly data in supplement\nconst monthlyData=supplementData.monthlyDataByYear[year];setMonthlyData(monthlyData);// Calculate peak month\nconst peakMonth=monthlyData.reduce((max,month)=>month.acres>max.acres?month:max,{acres:0});// Update summary stats\nsetSummaryStats(prevStats=>({...prevStats,yearlyAcres:monthlyData.reduce((sum,month)=>sum+month.acres,0),peakMonth:peakMonth.month||'N/A'}));// Update monthly data by year cache\nsetMonthlyDataByYear(prevData=>({...prevData,[year]:monthlyData}));if(wasEmpty){setLoading(false);}return;}}// If we get here, we couldn't find data for this year\nconsole.warn(`No monthly data found for year ${year}`);setEmptyMonthlyData();if(wasEmpty){setLoading(false);}}catch(err){console.error(`Error fetching monthly fire data for year ${year}:`,err);setError(`Failed to load monthly data for ${year}. Please check that data files are available.`);setEmptyMonthlyData();if(wasEmpty){setLoading(false);}}}catch(err){console.error(`Error setting monthly fire data for year ${year}:`,err);setError(`Failed to load monthly data for ${year}.`);setEmptyMonthlyData();}};const handleYearChange=year=>{setSelectedYear(year);fetchMonthlyData(year);};const handleDataError=errorMessage=>{setYearlyData([]);setAvailableYears([]);setSelectedYear(null);setCausesData({});setTopCauses([]);setError(errorMessage||\"Failed to load fire data. Please ensure data files are available in the public/data directory.\");setLoading(false);};const setEmptyMonthlyData=()=>{setMonthlyData([]);setSummaryStats(prevStats=>({...prevStats,yearlyAcres:0,peakMonth:'N/A'}));};// Render loading state\nif(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"dashboard-content\",children:/*#__PURE__*/_jsx(\"div\",{className:\"loading-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-spinner\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"div\",{className:\"loading-text\",children:\"Loading fire data...\"})]})})});}// Render error state\nif(error){return/*#__PURE__*/_jsx(\"div\",{className:\"dashboard-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"error-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"dashboard-header\",children:/*#__PURE__*/_jsx(\"h2\",{className:\"dashboard-title\",children:\"California Wildfire Dashboard\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex-shrink-0\",children:/*#__PURE__*/_jsx(\"svg\",{className:\"error-icon\",xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",clipRule:\"evenodd\"})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"ml-3\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"error-title\",children:\"Data Loading Error\"}),/*#__PURE__*/_jsx(\"div\",{className:\"error-details\",children:/*#__PURE__*/_jsx(\"p\",{children:error})}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{className:\"error-help\",children:\"To fix this issue:\"}),/*#__PURE__*/_jsxs(\"ol\",{className:\"error-list\",children:[/*#__PURE__*/_jsx(\"li\",{className:\"error-list-item\",children:\"Ensure your data files are in the public/data directory\"}),/*#__PURE__*/_jsx(\"li\",{className:\"error-list-item\",children:\"Check that file names match the expected format (firep23_1-stats.json, etc.)\"}),/*#__PURE__*/_jsx(\"li\",{className:\"error-list-item\",children:\"Verify the JSON files have the correct structure and are properly formatted\"})]})]})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"text-center\",children:/*#__PURE__*/_jsx(\"button\",{onClick:fetchYearlyData,className:\"error-retry-button\",children:\"Try Again\"})})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-system-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-tabs\",children:[/*#__PURE__*/_jsxs(\"button\",{className:`dashboard-tab ${activeTab==='main'?'active':''}`,onClick:()=>handleTabChange('main'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"tab-icon\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\"})}),\"Dashboard Overview\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`dashboard-tab ${activeTab==='yearly'?'active':''}`,onClick:()=>handleTabChange('yearly'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"tab-icon\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\",clipRule:\"evenodd\"})}),\"Yearly Analysis\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`dashboard-tab ${activeTab==='causes'?'active':''}`,onClick:()=>handleTabChange('causes'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"tab-icon\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z\",clipRule:\"evenodd\"})}),\"Fire Causes\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`dashboard-tab ${activeTab==='temperature'?'active':''}`,onClick:()=>handleTabChange('temperature'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"tab-icon\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M7 2a1 1 0 00-.707 1.707L7 4.414v3.758a1 1 0 01-.293.707l-4 4C.817 14.769 2.156 18 4.828 18h10.343c2.673 0 4.012-3.231 2.122-5.121l-4-4A1 1 0 0113 8.172V4.414l.707-.707A1 1 0 0013 2H7zm2 6.172V4h2v4.172a3 3 0 00.879 2.12l1.168 1.168a4 4 0 01-8.214 0l1.168-1.168A3 3 0 009 8.172z\",clipRule:\"evenodd\"})}),\"Temperature-Fire Analysis\"]}),/*#__PURE__*/_jsxs(\"button\",{className:`dashboard-tab ${activeTab==='tableau'?'active':''}`,onClick:()=>handleTabChange('tableau'),children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"tab-icon\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z\",clipRule:\"evenodd\"})}),\"Tableau Dashboard\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-content\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"main-dashboard\",className:`dashboard-tab-content ${activeTab==='main'?'active':''}`,children:activeTab==='main'&&/*#__PURE__*/_jsx(MainDashboard,{summaryStats:summaryStats,yearlyData:yearlyData,onRefresh:fetchYearlyData})}),/*#__PURE__*/_jsx(\"div\",{id:\"yearly-dashboard\",className:`dashboard-tab-content ${activeTab==='yearly'?'active':''}`,children:activeTab==='yearly'&&/*#__PURE__*/_jsx(EnhancedYearlyAnalysisDashboard,{yearlyData:yearlyData,monthlyData:monthlyData,monthlyDataByYear:monthlyDataByYear,selectedYear:selectedYear,availableYears:availableYears,summaryStats:summaryStats,onYearChange:handleYearChange,onRefresh:fetchYearlyData})}),/*#__PURE__*/_jsx(\"div\",{id:\"causes-dashboard\",className:`dashboard-tab-content ${activeTab==='causes'?'active':''}`,children:activeTab==='causes'&&/*#__PURE__*/_jsx(FireCauseAnalysisDashboard,{causesData:causesData,topCauses:topCauses,causeDefinitions:causeDefinitions,selectedYear:selectedYear,availableYears:availableYears,onYearChange:handleYearChange,onRefresh:fetchYearlyData})}),/*#__PURE__*/_jsx(\"div\",{id:\"temperature-dashboard\",className:`dashboard-tab-content ${activeTab==='temperature'?'active':''}`,children:activeTab==='temperature'&&/*#__PURE__*/_jsx(TemperatureFireCorrelation,{onRefresh:fetchYearlyData})}),/*#__PURE__*/_jsx(\"div\",{id:\"tableau-dashboard\",className:`dashboard-tab-content ${activeTab==='tableau'?'active':''}`,children:activeTab==='tableau'&&/*#__PURE__*/_jsx(TableauDashboard,{title:\"California Wildfire Tableau Dashboard\",description:\"Interactive visualization of California wildfire data using Tableau, providing in-depth analysis and insights.\"})})]})]});};export default FireDashboardSystem;","map":{"version":3,"names":["React","useEffect","useState","MainDashboard","EnhancedYearlyAnalysisDashboard","FireCauseAnalysisDashboard","TemperatureFireCorrelation","TableauDashboard","jsx","_jsx","jsxs","_jsxs","FireDashboardSystem","_ref","containerId","container","setContainer","activeTab","setActiveTab","yearlyData","setYearlyData","monthlyData","setMonthlyData","monthlyDataByYear","setMonthlyDataByYear","causesData","setCausesData","topCauses","setTopCauses","causeDefinitions","setCauseDefinitions","loading","setLoading","error","setError","selectedYear","setSelectedYear","availableYears","setAvailableYears","summaryStats","setSummaryStats","totalFires","totalAcres","yearlyAcres","peakMonth","worstYear","worstYearAcres","recentYear","recentYearFires","recentYearAcres","avgAnnualFires","avgAnnualAcres","dataBaseUrl","mergeStatistics","statsData","newStatsData","combinedYearlyData","forEach","newYearData","existingYearIndex","findIndex","year","push","fires","acres","sort","a","b","parseInt","combinedYears","Array","from","Set","years","combinedMonthlyData","Object","entries","_ref2","newMonthData","index","combinedCausesData","causesDataByYear","_ref3","existingCauses","causes","newCauses","causesMap","Map","cause","set","causeId","newCause","has","existingCause","get","monthlyBreakdown","_ref4","month","existingMonthCauses","monthCausesMap","combinedTopCauses","causeMap","totalFiresTopCauses","reduce","sum","percentage","Math","round","combinedCauseDefinitions","maxAcres","yearData","summary","document","getElementById","fetchYearlyData","handleTabChange","tabName","response","fetch","ok","status","console","warn","handleDataError","Error","statusText","json","supplementResponse","supplementData","log","suppErr","sortedYears","recentYearData","length","yearCount","maxYear","max","map","y","toString","monthData","prevStats","setEmptyMonthlyData","err","fetchTempFireData","fetchMonthlyData","wasEmpty","prevData","handleYearChange","errorMessage","className","children","xmlns","viewBox","fill","fillRule","d","clipRule","onClick","id","onRefresh","onYearChange","title","description"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard -frontend/california-wildfire-dashboard/client/src/components/FireDashboardSystem.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MainDashboard } from './MainDashboard';\nimport { EnhancedYearlyAnalysisDashboard } from './YearlyAnalysisDashboard';\nimport { FireCauseAnalysisDashboard } from './FireCauseAnalysisDashboard';\nimport { TemperatureFireCorrelation } from './TemperatureFireCorrelation';\nimport TableauDashboard from './TableauDashboard';\nimport './FireDashboard.css';\nimport './TableauDashboard.css';\n\nconst FireDashboardSystem = ({ containerId }) => {\n  const [container, setContainer] = useState(null);\n  const [activeTab, setActiveTab] = useState('main');\n  const [yearlyData, setYearlyData] = useState([]);\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [monthlyDataByYear, setMonthlyDataByYear] = useState({});\n  const [causesData, setCausesData] = useState({});\n  const [topCauses, setTopCauses] = useState([]);\n  const [causeDefinitions, setCauseDefinitions] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [summaryStats, setSummaryStats] = useState({\n    totalFires: 0,\n    totalAcres: 0,\n    yearlyAcres: 0,\n    peakMonth: '',\n    worstYear: '',\n    worstYearAcres: 0,\n    recentYear: '',\n    recentYearFires: 0,\n    recentYearAcres: 0,\n    avgAnnualFires: 0,\n    avgAnnualAcres: 0\n  });\n\n  // Updated path to use public directory instead of backend server\n  const dataBaseUrl = '/data';\n\n  // Client-side implementation of mergeStatistics\n  const mergeStatistics = (statsData, newStatsData) => {\n    // Merge yearly data\n    const combinedYearlyData = [...statsData.yearlyData];\n    \n    // Add any new years from the new data\n    newStatsData.yearlyData.forEach(newYearData => {\n      const existingYearIndex = combinedYearlyData.findIndex(year => year.year === newYearData.year);\n      if (existingYearIndex === -1) {\n        // Year doesn't exist in original data, add it\n        combinedYearlyData.push(newYearData);\n      } else {\n        // Year exists, update with combined statistics\n        combinedYearlyData[existingYearIndex].fires += newYearData.fires;\n        combinedYearlyData[existingYearIndex].acres += newYearData.acres;\n      }\n    });\n    \n    // Sort by year\n    combinedYearlyData.sort((a, b) => parseInt(a.year) - parseInt(b.year));\n    \n    // Merge years array\n    const combinedYears = Array.from(\n      new Set([...statsData.years, ...newStatsData.years])\n    ).sort();\n    \n    // Merge monthly data by year\n    const combinedMonthlyData = { ...statsData.monthlyDataByYear };\n    \n    if (newStatsData.monthlyDataByYear) {\n      Object.entries(newStatsData.monthlyDataByYear).forEach(([year, monthlyData]) => {\n        if (!combinedMonthlyData[year]) {\n          // Year doesn't exist in original data, add all months\n          combinedMonthlyData[year] = monthlyData;\n        } else {\n          // Year exists, combine monthly data\n          monthlyData.forEach((newMonthData, index) => {\n            combinedMonthlyData[year][index].fires += newMonthData.fires;\n            combinedMonthlyData[year][index].acres += newMonthData.acres;\n          });\n        }\n      });\n    }\n    \n    // Merge causes data by year\n    const combinedCausesData = { ...(statsData.causesDataByYear || {}) };\n    \n    if (newStatsData.causesDataByYear) {\n      Object.entries(newStatsData.causesDataByYear).forEach(([year, causesData]) => {\n        if (!combinedCausesData[year]) {\n          // Year doesn't exist in original data, add all causes data\n          combinedCausesData[year] = causesData;\n        } else {\n          // Year exists, combine causes data\n          // Merge causes array\n          const existingCauses = combinedCausesData[year].causes || [];\n          const newCauses = causesData.causes || [];\n          \n          // Create a map of existing causes for easy access\n          const causesMap = new Map();\n          existingCauses.forEach(cause => {\n            causesMap.set(cause.causeId, cause);\n          });\n          \n          // Add or update causes\n          newCauses.forEach(newCause => {\n            if (causesMap.has(newCause.causeId)) {\n              // Update existing cause\n              const existingCause = causesMap.get(newCause.causeId);\n              existingCause.fires += newCause.fires;\n              existingCause.acres += newCause.acres;\n            } else {\n              // Add new cause\n              existingCauses.push(newCause);\n            }\n          });\n          \n          // Sort by fires in descending order\n          existingCauses.sort((a, b) => b.fires - a.fires);\n          \n          // Update the causes array\n          combinedCausesData[year].causes = existingCauses;\n          \n          // Merge monthly breakdown if available\n          if (causesData.monthlyBreakdown && combinedCausesData[year].monthlyBreakdown) {\n            Object.entries(causesData.monthlyBreakdown).forEach(([month, causes]) => {\n              if (!combinedCausesData[year].monthlyBreakdown[month]) {\n                // Month doesn't exist, add all causes\n                combinedCausesData[year].monthlyBreakdown[month] = causes;\n              } else {\n                // Month exists, merge causes\n                const existingMonthCauses = combinedCausesData[year].monthlyBreakdown[month];\n                const monthCausesMap = new Map();\n                \n                existingMonthCauses.forEach(cause => {\n                  monthCausesMap.set(cause.causeId, cause);\n                });\n                \n                causes.forEach(newCause => {\n                  if (monthCausesMap.has(newCause.causeId)) {\n                    // Update existing cause\n                    const existingCause = monthCausesMap.get(newCause.causeId);\n                    existingCause.fires += newCause.fires;\n                    existingCause.acres += newCause.acres;\n                  } else {\n                    // Add new cause\n                    existingMonthCauses.push(newCause);\n                  }\n                });\n                \n                // Sort by fires in descending order\n                existingMonthCauses.sort((a, b) => b.fires - a.fires);\n              }\n            });\n          }\n        }\n      });\n    }\n    \n    // Combine top causes across all data\n    const combinedTopCauses = [];\n    const causeMap = new Map();\n    \n    // Add existing top causes to the map\n    if (statsData.topCauses) {\n      statsData.topCauses.forEach(cause => {\n        causeMap.set(cause.causeId, cause);\n      });\n    }\n    \n    // Add or update with new top causes\n    if (newStatsData.topCauses) {\n      newStatsData.topCauses.forEach(newCause => {\n        if (causeMap.has(newCause.causeId)) {\n          // Update existing cause\n          const existingCause = causeMap.get(newCause.causeId);\n          existingCause.fires += newCause.fires;\n          existingCause.acres += newCause.acres;\n        } else {\n          // Add new cause\n          causeMap.set(newCause.causeId, { ...newCause });\n        }\n      });\n    }\n    \n    // Convert map back to array\n    causeMap.forEach(cause => {\n      combinedTopCauses.push(cause);\n    });\n    \n    // Sort by fires in descending order\n    combinedTopCauses.sort((a, b) => b.fires - a.fires);\n    \n    // Recalculate percentages\n    const totalFiresTopCauses = combinedTopCauses.reduce((sum, cause) => sum + cause.fires, 0);\n    combinedTopCauses.forEach(cause => {\n      cause.percentage = Math.round((cause.fires / totalFiresTopCauses) * 1000) / 10;\n    });\n    \n    // Combine cause definitions\n    const combinedCauseDefinitions = {\n      ...(statsData.causeDefinitions || {}),\n      ...(newStatsData.causeDefinitions || {})\n    };\n    \n    // Recalculate summary statistics\n    const totalFires = combinedYearlyData.reduce((sum, year) => sum + year.fires, 0);\n    const totalAcres = combinedYearlyData.reduce((sum, year) => sum + year.acres, 0);\n    \n    // Find worst year\n    let worstYear = null;\n    let maxAcres = 0;\n    \n    combinedYearlyData.forEach(yearData => {\n      if (yearData.acres > maxAcres) {\n        maxAcres = yearData.acres;\n        worstYear = yearData.year;\n      }\n    });\n    \n    return {\n      yearlyData: combinedYearlyData,\n      years: combinedYears,\n      monthlyDataByYear: combinedMonthlyData,\n      causesDataByYear: combinedCausesData,\n      topCauses: combinedTopCauses,\n      causeDefinitions: combinedCauseDefinitions,\n      summary: {\n        totalFires,\n        totalAcres,\n        worstYear,\n        worstYearAcres: maxAcres\n      }\n    };\n  };\n\n  useEffect(() => {\n    setContainer(document.getElementById(containerId));\n    fetchYearlyData();\n  }, [containerId]);\n\n  const handleTabChange = (tabName) => {\n    setActiveTab(tabName);\n  };\n\n  const fetchYearlyData = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // First fetch the main stats file\n      const response = await fetch(`${dataBaseUrl}/firep23_1-stats.json`);\n\n      if (!response.ok) {\n        // If we get a 404, it means the statistics file isn't available\n        if (response.status === 404) {\n          console.warn(\"Statistics file not found\");\n          handleDataError(\"Statistics file not found in the public/data directory.\");\n          return;\n        }\n        throw new Error(`Failed to fetch yearly data: ${response.statusText}`);\n      }\n\n      let statsData = await response.json();\n      \n      // Try to get the supplementary data\n      try {\n        // Check for supplement file\n        const supplementResponse = await fetch(`${dataBaseUrl}/firep23_1-supplement-stats.json`);\n        \n        // If found, merge the data\n        if (supplementResponse.ok) {\n          const supplementData = await supplementResponse.json();\n          statsData = mergeStatistics(statsData, supplementData);\n          console.log(\"Successfully merged supplementary data\");\n        }\n      } catch (suppErr) {\n        console.warn(\"No supplementary stats found or error loading:\", suppErr);\n        // Continue with just the main data if supplement isn't available\n      }\n\n      setYearlyData(statsData.yearlyData);\n      setAvailableYears(statsData.years);\n\n      // Set fire cause data if available\n      if (statsData.causesDataByYear) {\n        setCausesData(statsData.causesDataByYear);\n      }\n\n      if (statsData.topCauses) {\n        setTopCauses(statsData.topCauses);\n      }\n\n      if (statsData.causeDefinitions) {\n        setCauseDefinitions(statsData.causeDefinitions);\n      }\n\n      // Calculate additional statistics\n      const sortedYears = [...statsData.yearlyData].sort((a, b) => parseInt(b.year) - parseInt(a.year));\n      const recentYearData = sortedYears.length > 0 ? sortedYears[0] : null;\n\n      const totalFires = statsData.summary.totalFires;\n      const totalAcres = statsData.summary.totalAcres;\n      const yearCount = statsData.years.length;\n\n      // Update summary stats\n      setSummaryStats({\n        totalFires: totalFires,\n        totalAcres: totalAcres,\n        worstYear: statsData.summary.worstYear,\n        worstYearAcres: statsData.summary.worstYearAcres,\n        recentYear: recentYearData ? recentYearData.year : 'N/A',\n        recentYearFires: recentYearData ? recentYearData.fires : 0,\n        recentYearAcres: recentYearData ? recentYearData.acres : 0,\n        avgAnnualFires: yearCount > 0 ? Math.round(totalFires / yearCount) : 0,\n        avgAnnualAcres: yearCount > 0 ? Math.round(totalAcres / yearCount) : 0\n      });\n\n      // Set the most recent year as the default selected year\n      if (statsData.years.length > 0) {\n        const maxYear = Math.max(...statsData.years.map(y => parseInt(y)));\n        setSelectedYear(maxYear.toString());\n\n        // Since we already have all the monthly data, store it\n        if (statsData.monthlyDataByYear) {\n          setMonthlyDataByYear(statsData.monthlyDataByYear);\n          \n          // Set the data for the selected year\n          if (statsData.monthlyDataByYear[maxYear.toString()]) {\n            setMonthlyData(statsData.monthlyDataByYear[maxYear.toString()]);\n            \n            // Calculate peak month for summary\n            const monthData = statsData.monthlyDataByYear[maxYear.toString()];\n            const peakMonth = monthData.reduce(\n              (max, month) => month.acres > max.acres ? month : max, \n              { acres: 0 }\n            );\n            \n            // Update summary stats with peak month\n            setSummaryStats(prevStats => ({\n              ...prevStats,\n              peakMonth: peakMonth.month || 'N/A'\n            }));\n          } else {\n            setEmptyMonthlyData();\n          }\n        } else {\n          // If no monthly data in the file, initialize empty\n          setEmptyMonthlyData();\n        }\n      }\n\n      setLoading(false);\n\n    } catch (err) {\n      console.error(\"Error fetching yearly fire data:\", err);\n      handleDataError(\"Failed to load fire data. Please ensure data files are available in the public/data directory.\");\n    }\n  };\n\n  // Load temperature-fire correlation data\n  const fetchTempFireData = async () => {\n    try {\n      const response = await fetch(`${dataBaseUrl}/temperature-fire-correlation.json`);\n      \n      if (!response.ok) {\n        console.warn(\"Temperature-fire correlation data not found\");\n        return null;\n      }\n      \n      return await response.json();\n    } catch (err) {\n      console.error(\"Error fetching temperature-fire correlation data:\", err);\n      return null;\n    }\n  };\n\n  const fetchMonthlyData = async (year) => {\n    if (error || !year) {\n      setEmptyMonthlyData();\n      return;\n    }\n\n    try {\n      // Check if we already have the data in our state\n      if (monthlyDataByYear && monthlyDataByYear[year]) {\n        setMonthlyData(monthlyDataByYear[year]);\n        \n        // Calculate summary stats\n        const monthData = monthlyDataByYear[year];\n        const totalFires = monthData.reduce((sum, month) => sum + month.fires, 0);\n        const totalAcres = monthData.reduce((sum, month) => sum + month.acres, 0);\n        \n        // Find peak month\n        const peakMonth = monthData.reduce(\n          (max, month) => month.acres > max.acres ? month : max, \n          { acres: 0 }\n        );\n        \n        // Update summary stats\n        setSummaryStats(prevStats => ({\n          ...prevStats,\n          yearlyAcres: totalAcres,\n          peakMonth: peakMonth.month || 'N/A'\n        }));\n        \n        return;\n      }\n      \n      // If we don't have it cached, try to load from data file\n      const wasEmpty = monthlyData.length === 0;\n      if (wasEmpty) {\n        setLoading(true);\n      }\n\n      try {\n        // First check the main stats file\n        const response = await fetch(`${dataBaseUrl}/firep23_1-stats.json`);\n        \n        if (response.ok) {\n          const statsData = await response.json();\n          \n          if (statsData.monthlyDataByYear && statsData.monthlyDataByYear[year]) {\n            // Found monthly data for this year\n            const monthlyData = statsData.monthlyDataByYear[year];\n            setMonthlyData(monthlyData);\n            \n            // Calculate peak month\n            const peakMonth = monthlyData.reduce(\n              (max, month) => month.acres > max.acres ? month : max, \n              { acres: 0 }\n            );\n            \n            // Update summary stats\n            setSummaryStats(prevStats => ({\n              ...prevStats,\n              yearlyAcres: monthlyData.reduce((sum, month) => sum + month.acres, 0),\n              peakMonth: peakMonth.month || 'N/A'\n            }));\n            \n            // Update monthly data by year cache\n            setMonthlyDataByYear(prevData => ({\n              ...prevData,\n              [year]: monthlyData\n            }));\n            \n            if (wasEmpty) {\n              setLoading(false);\n            }\n            \n            return;\n          }\n        }\n        \n        // Check supplement file\n        const supplementResponse = await fetch(`${dataBaseUrl}/firep23_1-supplement-stats.json`);\n        \n        if (supplementResponse.ok) {\n          const supplementData = await supplementResponse.json();\n          \n          if (supplementData.monthlyDataByYear && supplementData.monthlyDataByYear[year]) {\n            // Found monthly data in supplement\n            const monthlyData = supplementData.monthlyDataByYear[year];\n            setMonthlyData(monthlyData);\n            \n            // Calculate peak month\n            const peakMonth = monthlyData.reduce(\n              (max, month) => month.acres > max.acres ? month : max, \n              { acres: 0 }\n            );\n            \n            // Update summary stats\n            setSummaryStats(prevStats => ({\n              ...prevStats,\n              yearlyAcres: monthlyData.reduce((sum, month) => sum + month.acres, 0),\n              peakMonth: peakMonth.month || 'N/A'\n            }));\n            \n            // Update monthly data by year cache\n            setMonthlyDataByYear(prevData => ({\n              ...prevData,\n              [year]: monthlyData\n            }));\n            \n            if (wasEmpty) {\n              setLoading(false);\n            }\n            \n            return;\n          }\n        }\n        \n        // If we get here, we couldn't find data for this year\n        console.warn(`No monthly data found for year ${year}`);\n        setEmptyMonthlyData();\n        if (wasEmpty) {\n          setLoading(false);\n        }\n        \n      } catch (err) {\n        console.error(`Error fetching monthly fire data for year ${year}:`, err);\n        setError(`Failed to load monthly data for ${year}. Please check that data files are available.`);\n        setEmptyMonthlyData();\n        if (wasEmpty) {\n          setLoading(false);\n        }\n      }\n    } catch (err) {\n      console.error(`Error setting monthly fire data for year ${year}:`, err);\n      setError(`Failed to load monthly data for ${year}.`);\n      setEmptyMonthlyData();\n    }\n  };\n\n  const handleYearChange = (year) => {\n    setSelectedYear(year);\n    fetchMonthlyData(year);\n  };\n\n  const handleDataError = (errorMessage) => {\n    setYearlyData([]);\n    setAvailableYears([]);\n    setSelectedYear(null);\n    setCausesData({});\n    setTopCauses([]);\n    setError(errorMessage || \"Failed to load fire data. Please ensure data files are available in the public/data directory.\");\n    setLoading(false);\n  };\n\n  const setEmptyMonthlyData = () => {\n    setMonthlyData([]);\n    setSummaryStats(prevStats => ({\n      ...prevStats,\n      yearlyAcres: 0,\n      peakMonth: 'N/A'\n    }));\n  };\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div className=\"dashboard-content\">\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\">\n            <div className=\"spinner\"></div>\n            <div className=\"loading-text\">Loading fire data...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <div className=\"dashboard-content\">\n        <div className=\"error-container\">\n          <div className=\"dashboard-header\">\n            <h2 className=\"dashboard-title\">California Wildfire Dashboard</h2>\n          </div>\n\n          <div className=\"error-message\">\n            <div className=\"flex\">\n              <div className=\"flex-shrink-0\">\n                <svg className=\"error-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"error-title\">Data Loading Error</h3>\n                <div className=\"error-details\">\n                  <p>{error}</p>\n                </div>\n                <div>\n                  <p className=\"error-help\">To fix this issue:</p>\n                  <ol className=\"error-list\">\n                    <li className=\"error-list-item\">Ensure your data files are in the public/data directory</li>\n                    <li className=\"error-list-item\">Check that file names match the expected format (firep23_1-stats.json, etc.)</li>\n                    <li className=\"error-list-item\">Verify the JSON files have the correct structure and are properly formatted</li>\n                  </ol>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <button onClick={fetchYearlyData} className=\"error-retry-button\">\n              Try Again\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard-system-container\">\n      <div className=\"dashboard-tabs\">\n        <button\n          className={`dashboard-tab ${activeTab === 'main' ? 'active' : ''}`}\n          onClick={() => handleTabChange('main')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n          </svg>\n          Dashboard Overview\n        </button>\n        <button\n          className={`dashboard-tab ${activeTab === 'yearly' ? 'active' : ''}`}\n          onClick={() => handleTabChange('yearly')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\n          </svg>\n          Yearly Analysis\n        </button>\n        <button\n          className={`dashboard-tab ${activeTab === 'causes' ? 'active' : ''}`}\n          onClick={() => handleTabChange('causes')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z\" clipRule=\"evenodd\" />\n          </svg>\n          Fire Causes\n        </button>\n        <button\n          className={`dashboard-tab ${activeTab === 'temperature' ? 'active' : ''}`}\n          onClick={() => handleTabChange('temperature')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 00-.707 1.707L7 4.414v3.758a1 1 0 01-.293.707l-4 4C.817 14.769 2.156 18 4.828 18h10.343c2.673 0 4.012-3.231 2.122-5.121l-4-4A1 1 0 0113 8.172V4.414l.707-.707A1 1 0 0013 2H7zm2 6.172V4h2v4.172a3 3 0 00.879 2.12l1.168 1.168a4 4 0 01-8.214 0l1.168-1.168A3 3 0 009 8.172z\" clipRule=\"evenodd\" />\n          </svg>\n          Temperature-Fire Analysis\n        </button>\n        {/* Tableau Dashboard tab */}\n        <button\n          className={`dashboard-tab ${activeTab === 'tableau' ? 'active' : ''}`}\n          onClick={() => handleTabChange('tableau')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z\" clipRule=\"evenodd\" />\n          </svg>\n          Tableau Dashboard\n        </button>\n      </div>\n  \n      <div className=\"dashboard-content\">\n        <div id=\"main-dashboard\" className={`dashboard-tab-content ${activeTab === 'main' ? 'active' : ''}`}>\n          {activeTab === 'main' && (\n            <MainDashboard\n              summaryStats={summaryStats}\n              yearlyData={yearlyData}\n              onRefresh={fetchYearlyData}\n            />\n          )}\n        </div>\n        <div id=\"yearly-dashboard\" className={`dashboard-tab-content ${activeTab === 'yearly' ? 'active' : ''}`}>\n          {activeTab === 'yearly' && (\n            <EnhancedYearlyAnalysisDashboard\n              yearlyData={yearlyData}\n              monthlyData={monthlyData}\n              monthlyDataByYear={monthlyDataByYear}\n              selectedYear={selectedYear}\n              availableYears={availableYears}\n              summaryStats={summaryStats}\n              onYearChange={handleYearChange}\n              onRefresh={fetchYearlyData}\n            />\n          )}\n        </div>\n        <div id=\"causes-dashboard\" className={`dashboard-tab-content ${activeTab === 'causes' ? 'active' : ''}`}>\n          {activeTab === 'causes' && (\n            <FireCauseAnalysisDashboard\n              causesData={causesData}\n              topCauses={topCauses}\n              causeDefinitions={causeDefinitions}\n              selectedYear={selectedYear}\n              availableYears={availableYears}\n              onYearChange={handleYearChange}\n              onRefresh={fetchYearlyData}\n            />\n          )}\n        </div>\n        <div id=\"temperature-dashboard\" className={`dashboard-tab-content ${activeTab === 'temperature' ? 'active' : ''}`}>\n          {activeTab === 'temperature' && (\n            <TemperatureFireCorrelation\n              onRefresh={fetchYearlyData}\n            />\n          )}\n        </div>\n        {/* Tableau Dashboard tab content */}\n        <div id=\"tableau-dashboard\" className={`dashboard-tab-content ${activeTab === 'tableau' ? 'active' : ''}`}>\n          {activeTab === 'tableau' && (\n            <TableauDashboard\n              title=\"California Wildfire Tableau Dashboard\"\n              description=\"Interactive visualization of California wildfire data using Tableau, providing in-depth analysis and insights.\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n}\n\nexport default FireDashboardSystem;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,aAAa,KAAQ,iBAAiB,CAC/C,OAASC,+BAA+B,KAAQ,2BAA2B,CAC3E,OAASC,0BAA0B,KAAQ,8BAA8B,CACzE,OAASC,0BAA0B,KAAQ,8BAA8B,CACzE,MAAO,CAAAC,gBAAgB,KAAM,oBAAoB,CACjD,MAAO,qBAAqB,CAC5B,MAAO,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhC,KAAM,CAAAC,mBAAmB,CAAGC,IAAA,EAAqB,IAApB,CAAEC,WAAY,CAAC,CAAAD,IAAA,CAC1C,KAAM,CAACE,SAAS,CAAEC,YAAY,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACe,SAAS,CAAEC,YAAY,CAAC,CAAGhB,QAAQ,CAAC,MAAM,CAAC,CAClD,KAAM,CAACiB,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACmB,WAAW,CAAEC,cAAc,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACqB,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC9D,KAAM,CAACuB,UAAU,CAAEC,aAAa,CAAC,CAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAChD,KAAM,CAACyB,SAAS,CAAEC,YAAY,CAAC,CAAG1B,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAAC2B,gBAAgB,CAAEC,mBAAmB,CAAC,CAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC5D,KAAM,CAAC6B,OAAO,CAAEC,UAAU,CAAC,CAAG9B,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAAC+B,KAAK,CAAEC,QAAQ,CAAC,CAAGhC,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACiC,YAAY,CAAEC,eAAe,CAAC,CAAGlC,QAAQ,CAAC,IAAI,CAAC,CACtD,KAAM,CAACmC,cAAc,CAAEC,iBAAiB,CAAC,CAAGpC,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAACqC,YAAY,CAAEC,eAAe,CAAC,CAAGtC,QAAQ,CAAC,CAC/CuC,UAAU,CAAE,CAAC,CACbC,UAAU,CAAE,CAAC,CACbC,WAAW,CAAE,CAAC,CACdC,SAAS,CAAE,EAAE,CACbC,SAAS,CAAE,EAAE,CACbC,cAAc,CAAE,CAAC,CACjBC,UAAU,CAAE,EAAE,CACdC,eAAe,CAAE,CAAC,CAClBC,eAAe,CAAE,CAAC,CAClBC,cAAc,CAAE,CAAC,CACjBC,cAAc,CAAE,CAClB,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,WAAW,CAAG,OAAO,CAE3B;AACA,KAAM,CAAAC,eAAe,CAAGA,CAACC,SAAS,CAAEC,YAAY,GAAK,CACnD;AACA,KAAM,CAAAC,kBAAkB,CAAG,CAAC,GAAGF,SAAS,CAACnC,UAAU,CAAC,CAEpD;AACAoC,YAAY,CAACpC,UAAU,CAACsC,OAAO,CAACC,WAAW,EAAI,CAC7C,KAAM,CAAAC,iBAAiB,CAAGH,kBAAkB,CAACI,SAAS,CAACC,IAAI,EAAIA,IAAI,CAACA,IAAI,GAAKH,WAAW,CAACG,IAAI,CAAC,CAC9F,GAAIF,iBAAiB,GAAK,CAAC,CAAC,CAAE,CAC5B;AACAH,kBAAkB,CAACM,IAAI,CAACJ,WAAW,CAAC,CACtC,CAAC,IAAM,CACL;AACAF,kBAAkB,CAACG,iBAAiB,CAAC,CAACI,KAAK,EAAIL,WAAW,CAACK,KAAK,CAChEP,kBAAkB,CAACG,iBAAiB,CAAC,CAACK,KAAK,EAAIN,WAAW,CAACM,KAAK,CAClE,CACF,CAAC,CAAC,CAEF;AACAR,kBAAkB,CAACS,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKC,QAAQ,CAACF,CAAC,CAACL,IAAI,CAAC,CAAGO,QAAQ,CAACD,CAAC,CAACN,IAAI,CAAC,CAAC,CAEtE;AACA,KAAM,CAAAQ,aAAa,CAAGC,KAAK,CAACC,IAAI,CAC9B,GAAI,CAAAC,GAAG,CAAC,CAAC,GAAGlB,SAAS,CAACmB,KAAK,CAAE,GAAGlB,YAAY,CAACkB,KAAK,CAAC,CACrD,CAAC,CAACR,IAAI,CAAC,CAAC,CAER;AACA,KAAM,CAAAS,mBAAmB,CAAG,CAAE,GAAGpB,SAAS,CAAC/B,iBAAkB,CAAC,CAE9D,GAAIgC,YAAY,CAAChC,iBAAiB,CAAE,CAClCoD,MAAM,CAACC,OAAO,CAACrB,YAAY,CAAChC,iBAAiB,CAAC,CAACkC,OAAO,CAACoB,KAAA,EAAyB,IAAxB,CAAChB,IAAI,CAAExC,WAAW,CAAC,CAAAwD,KAAA,CACzE,GAAI,CAACH,mBAAmB,CAACb,IAAI,CAAC,CAAE,CAC9B;AACAa,mBAAmB,CAACb,IAAI,CAAC,CAAGxC,WAAW,CACzC,CAAC,IAAM,CACL;AACAA,WAAW,CAACoC,OAAO,CAAC,CAACqB,YAAY,CAAEC,KAAK,GAAK,CAC3CL,mBAAmB,CAACb,IAAI,CAAC,CAACkB,KAAK,CAAC,CAAChB,KAAK,EAAIe,YAAY,CAACf,KAAK,CAC5DW,mBAAmB,CAACb,IAAI,CAAC,CAACkB,KAAK,CAAC,CAACf,KAAK,EAAIc,YAAY,CAACd,KAAK,CAC9D,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CACJ,CAEA;AACA,KAAM,CAAAgB,kBAAkB,CAAG,CAAE,IAAI1B,SAAS,CAAC2B,gBAAgB,EAAI,CAAC,CAAC,CAAE,CAAC,CAEpE,GAAI1B,YAAY,CAAC0B,gBAAgB,CAAE,CACjCN,MAAM,CAACC,OAAO,CAACrB,YAAY,CAAC0B,gBAAgB,CAAC,CAACxB,OAAO,CAACyB,KAAA,EAAwB,IAAvB,CAACrB,IAAI,CAAEpC,UAAU,CAAC,CAAAyD,KAAA,CACvE,GAAI,CAACF,kBAAkB,CAACnB,IAAI,CAAC,CAAE,CAC7B;AACAmB,kBAAkB,CAACnB,IAAI,CAAC,CAAGpC,UAAU,CACvC,CAAC,IAAM,CACL;AACA;AACA,KAAM,CAAA0D,cAAc,CAAGH,kBAAkB,CAACnB,IAAI,CAAC,CAACuB,MAAM,EAAI,EAAE,CAC5D,KAAM,CAAAC,SAAS,CAAG5D,UAAU,CAAC2D,MAAM,EAAI,EAAE,CAEzC;AACA,KAAM,CAAAE,SAAS,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CAC3BJ,cAAc,CAAC1B,OAAO,CAAC+B,KAAK,EAAI,CAC9BF,SAAS,CAACG,GAAG,CAACD,KAAK,CAACE,OAAO,CAAEF,KAAK,CAAC,CACrC,CAAC,CAAC,CAEF;AACAH,SAAS,CAAC5B,OAAO,CAACkC,QAAQ,EAAI,CAC5B,GAAIL,SAAS,CAACM,GAAG,CAACD,QAAQ,CAACD,OAAO,CAAC,CAAE,CACnC;AACA,KAAM,CAAAG,aAAa,CAAGP,SAAS,CAACQ,GAAG,CAACH,QAAQ,CAACD,OAAO,CAAC,CACrDG,aAAa,CAAC9B,KAAK,EAAI4B,QAAQ,CAAC5B,KAAK,CACrC8B,aAAa,CAAC7B,KAAK,EAAI2B,QAAQ,CAAC3B,KAAK,CACvC,CAAC,IAAM,CACL;AACAmB,cAAc,CAACrB,IAAI,CAAC6B,QAAQ,CAAC,CAC/B,CACF,CAAC,CAAC,CAEF;AACAR,cAAc,CAAClB,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAACJ,KAAK,CAAGG,CAAC,CAACH,KAAK,CAAC,CAEhD;AACAiB,kBAAkB,CAACnB,IAAI,CAAC,CAACuB,MAAM,CAAGD,cAAc,CAEhD;AACA,GAAI1D,UAAU,CAACsE,gBAAgB,EAAIf,kBAAkB,CAACnB,IAAI,CAAC,CAACkC,gBAAgB,CAAE,CAC5EpB,MAAM,CAACC,OAAO,CAACnD,UAAU,CAACsE,gBAAgB,CAAC,CAACtC,OAAO,CAACuC,KAAA,EAAqB,IAApB,CAACC,KAAK,CAAEb,MAAM,CAAC,CAAAY,KAAA,CAClE,GAAI,CAAChB,kBAAkB,CAACnB,IAAI,CAAC,CAACkC,gBAAgB,CAACE,KAAK,CAAC,CAAE,CACrD;AACAjB,kBAAkB,CAACnB,IAAI,CAAC,CAACkC,gBAAgB,CAACE,KAAK,CAAC,CAAGb,MAAM,CAC3D,CAAC,IAAM,CACL;AACA,KAAM,CAAAc,mBAAmB,CAAGlB,kBAAkB,CAACnB,IAAI,CAAC,CAACkC,gBAAgB,CAACE,KAAK,CAAC,CAC5E,KAAM,CAAAE,cAAc,CAAG,GAAI,CAAAZ,GAAG,CAAC,CAAC,CAEhCW,mBAAmB,CAACzC,OAAO,CAAC+B,KAAK,EAAI,CACnCW,cAAc,CAACV,GAAG,CAACD,KAAK,CAACE,OAAO,CAAEF,KAAK,CAAC,CAC1C,CAAC,CAAC,CAEFJ,MAAM,CAAC3B,OAAO,CAACkC,QAAQ,EAAI,CACzB,GAAIQ,cAAc,CAACP,GAAG,CAACD,QAAQ,CAACD,OAAO,CAAC,CAAE,CACxC;AACA,KAAM,CAAAG,aAAa,CAAGM,cAAc,CAACL,GAAG,CAACH,QAAQ,CAACD,OAAO,CAAC,CAC1DG,aAAa,CAAC9B,KAAK,EAAI4B,QAAQ,CAAC5B,KAAK,CACrC8B,aAAa,CAAC7B,KAAK,EAAI2B,QAAQ,CAAC3B,KAAK,CACvC,CAAC,IAAM,CACL;AACAkC,mBAAmB,CAACpC,IAAI,CAAC6B,QAAQ,CAAC,CACpC,CACF,CAAC,CAAC,CAEF;AACAO,mBAAmB,CAACjC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAACJ,KAAK,CAAGG,CAAC,CAACH,KAAK,CAAC,CACvD,CACF,CAAC,CAAC,CACJ,CACF,CACF,CAAC,CAAC,CACJ,CAEA;AACA,KAAM,CAAAqC,iBAAiB,CAAG,EAAE,CAC5B,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAd,GAAG,CAAC,CAAC,CAE1B;AACA,GAAIjC,SAAS,CAAC3B,SAAS,CAAE,CACvB2B,SAAS,CAAC3B,SAAS,CAAC8B,OAAO,CAAC+B,KAAK,EAAI,CACnCa,QAAQ,CAACZ,GAAG,CAACD,KAAK,CAACE,OAAO,CAAEF,KAAK,CAAC,CACpC,CAAC,CAAC,CACJ,CAEA;AACA,GAAIjC,YAAY,CAAC5B,SAAS,CAAE,CAC1B4B,YAAY,CAAC5B,SAAS,CAAC8B,OAAO,CAACkC,QAAQ,EAAI,CACzC,GAAIU,QAAQ,CAACT,GAAG,CAACD,QAAQ,CAACD,OAAO,CAAC,CAAE,CAClC;AACA,KAAM,CAAAG,aAAa,CAAGQ,QAAQ,CAACP,GAAG,CAACH,QAAQ,CAACD,OAAO,CAAC,CACpDG,aAAa,CAAC9B,KAAK,EAAI4B,QAAQ,CAAC5B,KAAK,CACrC8B,aAAa,CAAC7B,KAAK,EAAI2B,QAAQ,CAAC3B,KAAK,CACvC,CAAC,IAAM,CACL;AACAqC,QAAQ,CAACZ,GAAG,CAACE,QAAQ,CAACD,OAAO,CAAE,CAAE,GAAGC,QAAS,CAAC,CAAC,CACjD,CACF,CAAC,CAAC,CACJ,CAEA;AACAU,QAAQ,CAAC5C,OAAO,CAAC+B,KAAK,EAAI,CACxBY,iBAAiB,CAACtC,IAAI,CAAC0B,KAAK,CAAC,CAC/B,CAAC,CAAC,CAEF;AACAY,iBAAiB,CAACnC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAACJ,KAAK,CAAGG,CAAC,CAACH,KAAK,CAAC,CAEnD;AACA,KAAM,CAAAuC,mBAAmB,CAAGF,iBAAiB,CAACG,MAAM,CAAC,CAACC,GAAG,CAAEhB,KAAK,GAAKgB,GAAG,CAAGhB,KAAK,CAACzB,KAAK,CAAE,CAAC,CAAC,CAC1FqC,iBAAiB,CAAC3C,OAAO,CAAC+B,KAAK,EAAI,CACjCA,KAAK,CAACiB,UAAU,CAAGC,IAAI,CAACC,KAAK,CAAEnB,KAAK,CAACzB,KAAK,CAAGuC,mBAAmB,CAAI,IAAI,CAAC,CAAG,EAAE,CAChF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAM,wBAAwB,CAAG,CAC/B,IAAItD,SAAS,CAACzB,gBAAgB,EAAI,CAAC,CAAC,CAAC,CACrC,IAAI0B,YAAY,CAAC1B,gBAAgB,EAAI,CAAC,CAAC,CACzC,CAAC,CAED;AACA,KAAM,CAAAY,UAAU,CAAGe,kBAAkB,CAAC+C,MAAM,CAAC,CAACC,GAAG,CAAE3C,IAAI,GAAK2C,GAAG,CAAG3C,IAAI,CAACE,KAAK,CAAE,CAAC,CAAC,CAChF,KAAM,CAAArB,UAAU,CAAGc,kBAAkB,CAAC+C,MAAM,CAAC,CAACC,GAAG,CAAE3C,IAAI,GAAK2C,GAAG,CAAG3C,IAAI,CAACG,KAAK,CAAE,CAAC,CAAC,CAEhF;AACA,GAAI,CAAAnB,SAAS,CAAG,IAAI,CACpB,GAAI,CAAAgE,QAAQ,CAAG,CAAC,CAEhBrD,kBAAkB,CAACC,OAAO,CAACqD,QAAQ,EAAI,CACrC,GAAIA,QAAQ,CAAC9C,KAAK,CAAG6C,QAAQ,CAAE,CAC7BA,QAAQ,CAAGC,QAAQ,CAAC9C,KAAK,CACzBnB,SAAS,CAAGiE,QAAQ,CAACjD,IAAI,CAC3B,CACF,CAAC,CAAC,CAEF,MAAO,CACL1C,UAAU,CAAEqC,kBAAkB,CAC9BiB,KAAK,CAAEJ,aAAa,CACpB9C,iBAAiB,CAAEmD,mBAAmB,CACtCO,gBAAgB,CAAED,kBAAkB,CACpCrD,SAAS,CAAEyE,iBAAiB,CAC5BvE,gBAAgB,CAAE+E,wBAAwB,CAC1CG,OAAO,CAAE,CACPtE,UAAU,CACVC,UAAU,CACVG,SAAS,CACTC,cAAc,CAAE+D,QAClB,CACF,CAAC,CACH,CAAC,CAED5G,SAAS,CAAC,IAAM,CACde,YAAY,CAACgG,QAAQ,CAACC,cAAc,CAACnG,WAAW,CAAC,CAAC,CAClDoG,eAAe,CAAC,CAAC,CACnB,CAAC,CAAE,CAACpG,WAAW,CAAC,CAAC,CAEjB,KAAM,CAAAqG,eAAe,CAAIC,OAAO,EAAK,CACnClG,YAAY,CAACkG,OAAO,CAAC,CACvB,CAAC,CAED,KAAM,CAAAF,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClClF,UAAU,CAAC,IAAI,CAAC,CAChBE,QAAQ,CAAC,IAAI,CAAC,CAEd,GAAI,CACF;AACA,KAAM,CAAAmF,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGlE,WAAW,uBAAuB,CAAC,CAEnE,GAAI,CAACiE,QAAQ,CAACE,EAAE,CAAE,CAChB;AACA,GAAIF,QAAQ,CAACG,MAAM,GAAK,GAAG,CAAE,CAC3BC,OAAO,CAACC,IAAI,CAAC,2BAA2B,CAAC,CACzCC,eAAe,CAAC,yDAAyD,CAAC,CAC1E,OACF,CACA,KAAM,IAAI,CAAAC,KAAK,CAAC,gCAAgCP,QAAQ,CAACQ,UAAU,EAAE,CAAC,CACxE,CAEA,GAAI,CAAAvE,SAAS,CAAG,KAAM,CAAA+D,QAAQ,CAACS,IAAI,CAAC,CAAC,CAErC;AACA,GAAI,CACF;AACA,KAAM,CAAAC,kBAAkB,CAAG,KAAM,CAAAT,KAAK,CAAC,GAAGlE,WAAW,kCAAkC,CAAC,CAExF;AACA,GAAI2E,kBAAkB,CAACR,EAAE,CAAE,CACzB,KAAM,CAAAS,cAAc,CAAG,KAAM,CAAAD,kBAAkB,CAACD,IAAI,CAAC,CAAC,CACtDxE,SAAS,CAAGD,eAAe,CAACC,SAAS,CAAE0E,cAAc,CAAC,CACtDP,OAAO,CAACQ,GAAG,CAAC,wCAAwC,CAAC,CACvD,CACF,CAAE,MAAOC,OAAO,CAAE,CAChBT,OAAO,CAACC,IAAI,CAAC,gDAAgD,CAAEQ,OAAO,CAAC,CACvE;AACF,CAEA9G,aAAa,CAACkC,SAAS,CAACnC,UAAU,CAAC,CACnCmB,iBAAiB,CAACgB,SAAS,CAACmB,KAAK,CAAC,CAElC;AACA,GAAInB,SAAS,CAAC2B,gBAAgB,CAAE,CAC9BvD,aAAa,CAAC4B,SAAS,CAAC2B,gBAAgB,CAAC,CAC3C,CAEA,GAAI3B,SAAS,CAAC3B,SAAS,CAAE,CACvBC,YAAY,CAAC0B,SAAS,CAAC3B,SAAS,CAAC,CACnC,CAEA,GAAI2B,SAAS,CAACzB,gBAAgB,CAAE,CAC9BC,mBAAmB,CAACwB,SAAS,CAACzB,gBAAgB,CAAC,CACjD,CAEA;AACA,KAAM,CAAAsG,WAAW,CAAG,CAAC,GAAG7E,SAAS,CAACnC,UAAU,CAAC,CAAC8C,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKC,QAAQ,CAACD,CAAC,CAACN,IAAI,CAAC,CAAGO,QAAQ,CAACF,CAAC,CAACL,IAAI,CAAC,CAAC,CACjG,KAAM,CAAAuE,cAAc,CAAGD,WAAW,CAACE,MAAM,CAAG,CAAC,CAAGF,WAAW,CAAC,CAAC,CAAC,CAAG,IAAI,CAErE,KAAM,CAAA1F,UAAU,CAAGa,SAAS,CAACyD,OAAO,CAACtE,UAAU,CAC/C,KAAM,CAAAC,UAAU,CAAGY,SAAS,CAACyD,OAAO,CAACrE,UAAU,CAC/C,KAAM,CAAA4F,SAAS,CAAGhF,SAAS,CAACmB,KAAK,CAAC4D,MAAM,CAExC;AACA7F,eAAe,CAAC,CACdC,UAAU,CAAEA,UAAU,CACtBC,UAAU,CAAEA,UAAU,CACtBG,SAAS,CAAES,SAAS,CAACyD,OAAO,CAAClE,SAAS,CACtCC,cAAc,CAAEQ,SAAS,CAACyD,OAAO,CAACjE,cAAc,CAChDC,UAAU,CAAEqF,cAAc,CAAGA,cAAc,CAACvE,IAAI,CAAG,KAAK,CACxDb,eAAe,CAAEoF,cAAc,CAAGA,cAAc,CAACrE,KAAK,CAAG,CAAC,CAC1Dd,eAAe,CAAEmF,cAAc,CAAGA,cAAc,CAACpE,KAAK,CAAG,CAAC,CAC1Dd,cAAc,CAAEoF,SAAS,CAAG,CAAC,CAAG5B,IAAI,CAACC,KAAK,CAAClE,UAAU,CAAG6F,SAAS,CAAC,CAAG,CAAC,CACtEnF,cAAc,CAAEmF,SAAS,CAAG,CAAC,CAAG5B,IAAI,CAACC,KAAK,CAACjE,UAAU,CAAG4F,SAAS,CAAC,CAAG,CACvE,CAAC,CAAC,CAEF;AACA,GAAIhF,SAAS,CAACmB,KAAK,CAAC4D,MAAM,CAAG,CAAC,CAAE,CAC9B,KAAM,CAAAE,OAAO,CAAG7B,IAAI,CAAC8B,GAAG,CAAC,GAAGlF,SAAS,CAACmB,KAAK,CAACgE,GAAG,CAACC,CAAC,EAAItE,QAAQ,CAACsE,CAAC,CAAC,CAAC,CAAC,CAClEtG,eAAe,CAACmG,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC,CAEnC;AACA,GAAIrF,SAAS,CAAC/B,iBAAiB,CAAE,CAC/BC,oBAAoB,CAAC8B,SAAS,CAAC/B,iBAAiB,CAAC,CAEjD;AACA,GAAI+B,SAAS,CAAC/B,iBAAiB,CAACgH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAE,CACnDrH,cAAc,CAACgC,SAAS,CAAC/B,iBAAiB,CAACgH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAE/D;AACA,KAAM,CAAAC,SAAS,CAAGtF,SAAS,CAAC/B,iBAAiB,CAACgH,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC,CACjE,KAAM,CAAA/F,SAAS,CAAGgG,SAAS,CAACrC,MAAM,CAChC,CAACiC,GAAG,CAAEvC,KAAK,GAAKA,KAAK,CAACjC,KAAK,CAAGwE,GAAG,CAACxE,KAAK,CAAGiC,KAAK,CAAGuC,GAAG,CACrD,CAAExE,KAAK,CAAE,CAAE,CACb,CAAC,CAED;AACAxB,eAAe,CAACqG,SAAS,GAAK,CAC5B,GAAGA,SAAS,CACZjG,SAAS,CAAEA,SAAS,CAACqD,KAAK,EAAI,KAChC,CAAC,CAAC,CAAC,CACL,CAAC,IAAM,CACL6C,mBAAmB,CAAC,CAAC,CACvB,CACF,CAAC,IAAM,CACL;AACAA,mBAAmB,CAAC,CAAC,CACvB,CACF,CAEA9G,UAAU,CAAC,KAAK,CAAC,CAEnB,CAAE,MAAO+G,GAAG,CAAE,CACZtB,OAAO,CAACxF,KAAK,CAAC,kCAAkC,CAAE8G,GAAG,CAAC,CACtDpB,eAAe,CAAC,gGAAgG,CAAC,CACnH,CACF,CAAC,CAED;AACA,KAAM,CAAAqB,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CACpC,GAAI,CACF,KAAM,CAAA3B,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGlE,WAAW,oCAAoC,CAAC,CAEhF,GAAI,CAACiE,QAAQ,CAACE,EAAE,CAAE,CAChBE,OAAO,CAACC,IAAI,CAAC,6CAA6C,CAAC,CAC3D,MAAO,KAAI,CACb,CAEA,MAAO,MAAM,CAAAL,QAAQ,CAACS,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOiB,GAAG,CAAE,CACZtB,OAAO,CAACxF,KAAK,CAAC,mDAAmD,CAAE8G,GAAG,CAAC,CACvE,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAE,gBAAgB,CAAG,KAAO,CAAApF,IAAI,EAAK,CACvC,GAAI5B,KAAK,EAAI,CAAC4B,IAAI,CAAE,CAClBiF,mBAAmB,CAAC,CAAC,CACrB,OACF,CAEA,GAAI,CACF;AACA,GAAIvH,iBAAiB,EAAIA,iBAAiB,CAACsC,IAAI,CAAC,CAAE,CAChDvC,cAAc,CAACC,iBAAiB,CAACsC,IAAI,CAAC,CAAC,CAEvC;AACA,KAAM,CAAA+E,SAAS,CAAGrH,iBAAiB,CAACsC,IAAI,CAAC,CACzC,KAAM,CAAApB,UAAU,CAAGmG,SAAS,CAACrC,MAAM,CAAC,CAACC,GAAG,CAAEP,KAAK,GAAKO,GAAG,CAAGP,KAAK,CAAClC,KAAK,CAAE,CAAC,CAAC,CACzE,KAAM,CAAArB,UAAU,CAAGkG,SAAS,CAACrC,MAAM,CAAC,CAACC,GAAG,CAAEP,KAAK,GAAKO,GAAG,CAAGP,KAAK,CAACjC,KAAK,CAAE,CAAC,CAAC,CAEzE;AACA,KAAM,CAAApB,SAAS,CAAGgG,SAAS,CAACrC,MAAM,CAChC,CAACiC,GAAG,CAAEvC,KAAK,GAAKA,KAAK,CAACjC,KAAK,CAAGwE,GAAG,CAACxE,KAAK,CAAGiC,KAAK,CAAGuC,GAAG,CACrD,CAAExE,KAAK,CAAE,CAAE,CACb,CAAC,CAED;AACAxB,eAAe,CAACqG,SAAS,GAAK,CAC5B,GAAGA,SAAS,CACZlG,WAAW,CAAED,UAAU,CACvBE,SAAS,CAAEA,SAAS,CAACqD,KAAK,EAAI,KAChC,CAAC,CAAC,CAAC,CAEH,OACF,CAEA;AACA,KAAM,CAAAiD,QAAQ,CAAG7H,WAAW,CAACgH,MAAM,GAAK,CAAC,CACzC,GAAIa,QAAQ,CAAE,CACZlH,UAAU,CAAC,IAAI,CAAC,CAClB,CAEA,GAAI,CACF;AACA,KAAM,CAAAqF,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGlE,WAAW,uBAAuB,CAAC,CAEnE,GAAIiE,QAAQ,CAACE,EAAE,CAAE,CACf,KAAM,CAAAjE,SAAS,CAAG,KAAM,CAAA+D,QAAQ,CAACS,IAAI,CAAC,CAAC,CAEvC,GAAIxE,SAAS,CAAC/B,iBAAiB,EAAI+B,SAAS,CAAC/B,iBAAiB,CAACsC,IAAI,CAAC,CAAE,CACpE;AACA,KAAM,CAAAxC,WAAW,CAAGiC,SAAS,CAAC/B,iBAAiB,CAACsC,IAAI,CAAC,CACrDvC,cAAc,CAACD,WAAW,CAAC,CAE3B;AACA,KAAM,CAAAuB,SAAS,CAAGvB,WAAW,CAACkF,MAAM,CAClC,CAACiC,GAAG,CAAEvC,KAAK,GAAKA,KAAK,CAACjC,KAAK,CAAGwE,GAAG,CAACxE,KAAK,CAAGiC,KAAK,CAAGuC,GAAG,CACrD,CAAExE,KAAK,CAAE,CAAE,CACb,CAAC,CAED;AACAxB,eAAe,CAACqG,SAAS,GAAK,CAC5B,GAAGA,SAAS,CACZlG,WAAW,CAAEtB,WAAW,CAACkF,MAAM,CAAC,CAACC,GAAG,CAAEP,KAAK,GAAKO,GAAG,CAAGP,KAAK,CAACjC,KAAK,CAAE,CAAC,CAAC,CACrEpB,SAAS,CAAEA,SAAS,CAACqD,KAAK,EAAI,KAChC,CAAC,CAAC,CAAC,CAEH;AACAzE,oBAAoB,CAAC2H,QAAQ,GAAK,CAChC,GAAGA,QAAQ,CACX,CAACtF,IAAI,EAAGxC,WACV,CAAC,CAAC,CAAC,CAEH,GAAI6H,QAAQ,CAAE,CACZlH,UAAU,CAAC,KAAK,CAAC,CACnB,CAEA,OACF,CACF,CAEA;AACA,KAAM,CAAA+F,kBAAkB,CAAG,KAAM,CAAAT,KAAK,CAAC,GAAGlE,WAAW,kCAAkC,CAAC,CAExF,GAAI2E,kBAAkB,CAACR,EAAE,CAAE,CACzB,KAAM,CAAAS,cAAc,CAAG,KAAM,CAAAD,kBAAkB,CAACD,IAAI,CAAC,CAAC,CAEtD,GAAIE,cAAc,CAACzG,iBAAiB,EAAIyG,cAAc,CAACzG,iBAAiB,CAACsC,IAAI,CAAC,CAAE,CAC9E;AACA,KAAM,CAAAxC,WAAW,CAAG2G,cAAc,CAACzG,iBAAiB,CAACsC,IAAI,CAAC,CAC1DvC,cAAc,CAACD,WAAW,CAAC,CAE3B;AACA,KAAM,CAAAuB,SAAS,CAAGvB,WAAW,CAACkF,MAAM,CAClC,CAACiC,GAAG,CAAEvC,KAAK,GAAKA,KAAK,CAACjC,KAAK,CAAGwE,GAAG,CAACxE,KAAK,CAAGiC,KAAK,CAAGuC,GAAG,CACrD,CAAExE,KAAK,CAAE,CAAE,CACb,CAAC,CAED;AACAxB,eAAe,CAACqG,SAAS,GAAK,CAC5B,GAAGA,SAAS,CACZlG,WAAW,CAAEtB,WAAW,CAACkF,MAAM,CAAC,CAACC,GAAG,CAAEP,KAAK,GAAKO,GAAG,CAAGP,KAAK,CAACjC,KAAK,CAAE,CAAC,CAAC,CACrEpB,SAAS,CAAEA,SAAS,CAACqD,KAAK,EAAI,KAChC,CAAC,CAAC,CAAC,CAEH;AACAzE,oBAAoB,CAAC2H,QAAQ,GAAK,CAChC,GAAGA,QAAQ,CACX,CAACtF,IAAI,EAAGxC,WACV,CAAC,CAAC,CAAC,CAEH,GAAI6H,QAAQ,CAAE,CACZlH,UAAU,CAAC,KAAK,CAAC,CACnB,CAEA,OACF,CACF,CAEA;AACAyF,OAAO,CAACC,IAAI,CAAC,kCAAkC7D,IAAI,EAAE,CAAC,CACtDiF,mBAAmB,CAAC,CAAC,CACrB,GAAII,QAAQ,CAAE,CACZlH,UAAU,CAAC,KAAK,CAAC,CACnB,CAEF,CAAE,MAAO+G,GAAG,CAAE,CACZtB,OAAO,CAACxF,KAAK,CAAC,6CAA6C4B,IAAI,GAAG,CAAEkF,GAAG,CAAC,CACxE7G,QAAQ,CAAC,mCAAmC2B,IAAI,+CAA+C,CAAC,CAChGiF,mBAAmB,CAAC,CAAC,CACrB,GAAII,QAAQ,CAAE,CACZlH,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CACF,CAAE,MAAO+G,GAAG,CAAE,CACZtB,OAAO,CAACxF,KAAK,CAAC,4CAA4C4B,IAAI,GAAG,CAAEkF,GAAG,CAAC,CACvE7G,QAAQ,CAAC,mCAAmC2B,IAAI,GAAG,CAAC,CACpDiF,mBAAmB,CAAC,CAAC,CACvB,CACF,CAAC,CAED,KAAM,CAAAM,gBAAgB,CAAIvF,IAAI,EAAK,CACjCzB,eAAe,CAACyB,IAAI,CAAC,CACrBoF,gBAAgB,CAACpF,IAAI,CAAC,CACxB,CAAC,CAED,KAAM,CAAA8D,eAAe,CAAI0B,YAAY,EAAK,CACxCjI,aAAa,CAAC,EAAE,CAAC,CACjBkB,iBAAiB,CAAC,EAAE,CAAC,CACrBF,eAAe,CAAC,IAAI,CAAC,CACrBV,aAAa,CAAC,CAAC,CAAC,CAAC,CACjBE,YAAY,CAAC,EAAE,CAAC,CAChBM,QAAQ,CAACmH,YAAY,EAAI,gGAAgG,CAAC,CAC1HrH,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAED,KAAM,CAAA8G,mBAAmB,CAAGA,CAAA,GAAM,CAChCxH,cAAc,CAAC,EAAE,CAAC,CAClBkB,eAAe,CAACqG,SAAS,GAAK,CAC5B,GAAGA,SAAS,CACZlG,WAAW,CAAE,CAAC,CACdC,SAAS,CAAE,KACb,CAAC,CAAC,CAAC,CACL,CAAC,CAED;AACA,GAAIb,OAAO,CAAE,CACX,mBACEtB,IAAA,QAAK6I,SAAS,CAAC,mBAAmB,CAAAC,QAAA,cAChC9I,IAAA,QAAK6I,SAAS,CAAC,mBAAmB,CAAAC,QAAA,cAChC5I,KAAA,QAAK2I,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B9I,IAAA,QAAK6I,SAAS,CAAC,SAAS,CAAM,CAAC,cAC/B7I,IAAA,QAAK6I,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,sBAAoB,CAAK,CAAC,EACrD,CAAC,CACH,CAAC,CACH,CAAC,CAEV,CAEA;AACA,GAAItH,KAAK,CAAE,CACT,mBACExB,IAAA,QAAK6I,SAAS,CAAC,mBAAmB,CAAAC,QAAA,cAChC5I,KAAA,QAAK2I,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAC9B9I,IAAA,QAAK6I,SAAS,CAAC,kBAAkB,CAAAC,QAAA,cAC/B9I,IAAA,OAAI6I,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,+BAA6B,CAAI,CAAC,CAC/D,CAAC,cAEN9I,IAAA,QAAK6I,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5B5I,KAAA,QAAK2I,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnB9I,IAAA,QAAK6I,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5B9I,IAAA,QAAK6I,SAAS,CAAC,YAAY,CAACE,KAAK,CAAC,4BAA4B,CAACC,OAAO,CAAC,WAAW,CAACC,IAAI,CAAC,cAAc,CAAAH,QAAA,cACpG9I,IAAA,SAAMkJ,QAAQ,CAAC,SAAS,CAACC,CAAC,CAAC,yNAAyN,CAACC,QAAQ,CAAC,SAAS,CAAE,CAAC,CACvQ,CAAC,CACH,CAAC,cACNlJ,KAAA,QAAK2I,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnB9I,IAAA,OAAI6I,SAAS,CAAC,aAAa,CAAAC,QAAA,CAAC,oBAAkB,CAAI,CAAC,cACnD9I,IAAA,QAAK6I,SAAS,CAAC,eAAe,CAAAC,QAAA,cAC5B9I,IAAA,MAAA8I,QAAA,CAAItH,KAAK,CAAI,CAAC,CACX,CAAC,cACNtB,KAAA,QAAA4I,QAAA,eACE9I,IAAA,MAAG6I,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,oBAAkB,CAAG,CAAC,cAChD5I,KAAA,OAAI2I,SAAS,CAAC,YAAY,CAAAC,QAAA,eACxB9I,IAAA,OAAI6I,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,yDAAuD,CAAI,CAAC,cAC5F9I,IAAA,OAAI6I,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,8EAA4E,CAAI,CAAC,cACjH9I,IAAA,OAAI6I,SAAS,CAAC,iBAAiB,CAAAC,QAAA,CAAC,6EAA2E,CAAI,CAAC,EAC9G,CAAC,EACF,CAAC,EACH,CAAC,EACH,CAAC,CACH,CAAC,cAEN9I,IAAA,QAAK6I,SAAS,CAAC,aAAa,CAAAC,QAAA,cAC1B9I,IAAA,WAAQqJ,OAAO,CAAE5C,eAAgB,CAACoC,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAC,WAEjE,CAAQ,CAAC,CACN,CAAC,EACH,CAAC,CACH,CAAC,CAEV,CAEA,mBACE5I,KAAA,QAAK2I,SAAS,CAAC,4BAA4B,CAAAC,QAAA,eACzC5I,KAAA,QAAK2I,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B5I,KAAA,WACE2I,SAAS,CAAE,iBAAiBrI,SAAS,GAAK,MAAM,CAAG,QAAQ,CAAG,EAAE,EAAG,CACnE6I,OAAO,CAAEA,CAAA,GAAM3C,eAAe,CAAC,MAAM,CAAE,CAAAoC,QAAA,eAEvC9I,IAAA,QAAK+I,KAAK,CAAC,4BAA4B,CAACF,SAAS,CAAC,UAAU,CAACG,OAAO,CAAC,WAAW,CAACC,IAAI,CAAC,cAAc,CAAAH,QAAA,cAClG9I,IAAA,SAAMmJ,CAAC,CAAC,kMAAkM,CAAE,CAAC,CAC1M,CAAC,qBAER,EAAQ,CAAC,cACTjJ,KAAA,WACE2I,SAAS,CAAE,iBAAiBrI,SAAS,GAAK,QAAQ,CAAG,QAAQ,CAAG,EAAE,EAAG,CACrE6I,OAAO,CAAEA,CAAA,GAAM3C,eAAe,CAAC,QAAQ,CAAE,CAAAoC,QAAA,eAEzC9I,IAAA,QAAK+I,KAAK,CAAC,4BAA4B,CAACF,SAAS,CAAC,UAAU,CAACG,OAAO,CAAC,WAAW,CAACC,IAAI,CAAC,cAAc,CAAAH,QAAA,cAClG9I,IAAA,SAAMkJ,QAAQ,CAAC,SAAS,CAACC,CAAC,CAAC,wJAAwJ,CAACC,QAAQ,CAAC,SAAS,CAAE,CAAC,CACtM,CAAC,kBAER,EAAQ,CAAC,cACTlJ,KAAA,WACE2I,SAAS,CAAE,iBAAiBrI,SAAS,GAAK,QAAQ,CAAG,QAAQ,CAAG,EAAE,EAAG,CACrE6I,OAAO,CAAEA,CAAA,GAAM3C,eAAe,CAAC,QAAQ,CAAE,CAAAoC,QAAA,eAEzC9I,IAAA,QAAK+I,KAAK,CAAC,4BAA4B,CAACF,SAAS,CAAC,UAAU,CAACG,OAAO,CAAC,WAAW,CAACC,IAAI,CAAC,cAAc,CAAAH,QAAA,cAClG9I,IAAA,SAAMkJ,QAAQ,CAAC,SAAS,CAACC,CAAC,CAAC,ycAAyc,CAACC,QAAQ,CAAC,SAAS,CAAE,CAAC,CACvf,CAAC,cAER,EAAQ,CAAC,cACTlJ,KAAA,WACE2I,SAAS,CAAE,iBAAiBrI,SAAS,GAAK,aAAa,CAAG,QAAQ,CAAG,EAAE,EAAG,CAC1E6I,OAAO,CAAEA,CAAA,GAAM3C,eAAe,CAAC,aAAa,CAAE,CAAAoC,QAAA,eAE9C9I,IAAA,QAAK+I,KAAK,CAAC,4BAA4B,CAACF,SAAS,CAAC,UAAU,CAACG,OAAO,CAAC,WAAW,CAACC,IAAI,CAAC,cAAc,CAAAH,QAAA,cAClG9I,IAAA,SAAMkJ,QAAQ,CAAC,SAAS,CAACC,CAAC,CAAC,wRAAwR,CAACC,QAAQ,CAAC,SAAS,CAAE,CAAC,CACtU,CAAC,4BAER,EAAQ,CAAC,cAETlJ,KAAA,WACE2I,SAAS,CAAE,iBAAiBrI,SAAS,GAAK,SAAS,CAAG,QAAQ,CAAG,EAAE,EAAG,CACtE6I,OAAO,CAAEA,CAAA,GAAM3C,eAAe,CAAC,SAAS,CAAE,CAAAoC,QAAA,eAE1C9I,IAAA,QAAK+I,KAAK,CAAC,4BAA4B,CAACF,SAAS,CAAC,UAAU,CAACG,OAAO,CAAC,WAAW,CAACC,IAAI,CAAC,cAAc,CAAAH,QAAA,cAClG9I,IAAA,SAAMkJ,QAAQ,CAAC,SAAS,CAACC,CAAC,CAAC,uKAAuK,CAACC,QAAQ,CAAC,SAAS,CAAE,CAAC,CACrN,CAAC,oBAER,EAAQ,CAAC,EACN,CAAC,cAENlJ,KAAA,QAAK2I,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChC9I,IAAA,QAAKsJ,EAAE,CAAC,gBAAgB,CAACT,SAAS,CAAE,yBAAyBrI,SAAS,GAAK,MAAM,CAAG,QAAQ,CAAG,EAAE,EAAG,CAAAsI,QAAA,CACjGtI,SAAS,GAAK,MAAM,eACnBR,IAAA,CAACN,aAAa,EACZoC,YAAY,CAAEA,YAAa,CAC3BpB,UAAU,CAAEA,UAAW,CACvB6I,SAAS,CAAE9C,eAAgB,CAC5B,CACF,CACE,CAAC,cACNzG,IAAA,QAAKsJ,EAAE,CAAC,kBAAkB,CAACT,SAAS,CAAE,yBAAyBrI,SAAS,GAAK,QAAQ,CAAG,QAAQ,CAAG,EAAE,EAAG,CAAAsI,QAAA,CACrGtI,SAAS,GAAK,QAAQ,eACrBR,IAAA,CAACL,+BAA+B,EAC9Be,UAAU,CAAEA,UAAW,CACvBE,WAAW,CAAEA,WAAY,CACzBE,iBAAiB,CAAEA,iBAAkB,CACrCY,YAAY,CAAEA,YAAa,CAC3BE,cAAc,CAAEA,cAAe,CAC/BE,YAAY,CAAEA,YAAa,CAC3B0H,YAAY,CAAEb,gBAAiB,CAC/BY,SAAS,CAAE9C,eAAgB,CAC5B,CACF,CACE,CAAC,cACNzG,IAAA,QAAKsJ,EAAE,CAAC,kBAAkB,CAACT,SAAS,CAAE,yBAAyBrI,SAAS,GAAK,QAAQ,CAAG,QAAQ,CAAG,EAAE,EAAG,CAAAsI,QAAA,CACrGtI,SAAS,GAAK,QAAQ,eACrBR,IAAA,CAACJ,0BAA0B,EACzBoB,UAAU,CAAEA,UAAW,CACvBE,SAAS,CAAEA,SAAU,CACrBE,gBAAgB,CAAEA,gBAAiB,CACnCM,YAAY,CAAEA,YAAa,CAC3BE,cAAc,CAAEA,cAAe,CAC/B4H,YAAY,CAAEb,gBAAiB,CAC/BY,SAAS,CAAE9C,eAAgB,CAC5B,CACF,CACE,CAAC,cACNzG,IAAA,QAAKsJ,EAAE,CAAC,uBAAuB,CAACT,SAAS,CAAE,yBAAyBrI,SAAS,GAAK,aAAa,CAAG,QAAQ,CAAG,EAAE,EAAG,CAAAsI,QAAA,CAC/GtI,SAAS,GAAK,aAAa,eAC1BR,IAAA,CAACH,0BAA0B,EACzB0J,SAAS,CAAE9C,eAAgB,CAC5B,CACF,CACE,CAAC,cAENzG,IAAA,QAAKsJ,EAAE,CAAC,mBAAmB,CAACT,SAAS,CAAE,yBAAyBrI,SAAS,GAAK,SAAS,CAAG,QAAQ,CAAG,EAAE,EAAG,CAAAsI,QAAA,CACvGtI,SAAS,GAAK,SAAS,eACtBR,IAAA,CAACF,gBAAgB,EACf2J,KAAK,CAAC,uCAAuC,CAC7CC,WAAW,CAAC,gHAAgH,CAC7H,CACF,CACE,CAAC,EACH,CAAC,EACH,CAAC,CAGV,CAAC,CAED,cAAe,CAAAvJ,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}