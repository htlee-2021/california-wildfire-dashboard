{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireMap.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport * as d3 from 'd3';\nimport './CaliforniaFireMap.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CaliforniaFireMap = ({\n  dataset\n}) => {\n  _s();\n  const [countyData, setCountyData] = useState(null);\n  const [fireData, setFireData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const svgRef = useRef(null);\n\n  // Fetch county and fire data when the component mounts or dataset changes\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch county data from a public source\n        const countyResponse = await fetch('https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/california-counties.geojson');\n        const countyGeoJson = await countyResponse.json();\n        setCountyData(countyGeoJson);\n\n        // If a dataset ID is provided, fetch that data\n        if (dataset) {\n          try {\n            const fireResponse = await fetch(`http://localhost:5000/api/data/${dataset}`);\n            if (fireResponse.ok) {\n              const fireGeoJson = await fireResponse.json();\n              setFireData(fireGeoJson.geoData || null);\n            }\n          } catch (fireError) {\n            console.error(\"Failed to load fire data:\", fireError);\n            // Continue with county data even if fire data fails\n          }\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching data:\", err);\n        setError(\"Failed to load map data. Please try again later.\");\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [dataset]);\n\n  // Draw map whenever data changes\n  useEffect(() => {\n    if (countyData && svgRef.current) {\n      drawMap();\n    }\n  }, [countyData, fireData]);\n  const drawMap = () => {\n    if (!countyData) return;\n\n    // Clear any previous drawings\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n    const width = 800;\n    const height = 600;\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 40,\n      left: 40\n    };\n\n    // Create SVG\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n    // Create projection for California\n    const projection = d3.geoMercator().fitSize([width - margin.left - margin.right, height - margin.top - margin.bottom], countyData).translate([width / 2, height / 2]);\n    const pathGenerator = d3.geoPath().projection(projection);\n\n    // Calculate fire counts by county\n    let fireCountsByCounty = {};\n    if (fireData && fireData.features && fireData.features.length > 0) {\n      // Initialize counts for all counties\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        fireCountsByCounty[countyName] = 0;\n      });\n\n      // Count fires per county using spatial analysis\n      // This is a simplified approach for demonstration\n      fireData.features.forEach(fire => {\n        if (fire.geometry && fire.geometry.coordinates) {\n          try {\n            // Get a representative point from the fire geometry\n            let point;\n            if (fire.geometry.type === 'MultiPolygon') {\n              point = fire.geometry.coordinates[0][0][0];\n            } else if (fire.geometry.type === 'Polygon') {\n              point = fire.geometry.coordinates[0][0];\n            } else {\n              return; // Skip non-polygon geometries\n            }\n\n            // Find which county contains this point\n            // This is a simplification - real applications would use proper spatial analysis\n            countyData.features.forEach(county => {\n              const countyName = county.properties.name;\n\n              // Use D3's path.contains for point-in-polygon test\n              const projectedPoint = projection(point);\n              if (projectedPoint) {\n                const path = pathGenerator(county);\n                // Since we can't easily use contains in this context, we'll randomly assign\n                // This should be replaced with proper spatial analysis in production\n                if (Math.random() > 0.9) {\n                  fireCountsByCounty[countyName]++;\n                }\n              }\n            });\n          } catch (err) {\n            console.log(\"Error processing fire geometry:\", err);\n          }\n        }\n      });\n    } else {\n      // Generate sample data if no fire data is available\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        const latitude = county.properties.latitude || 0;\n\n        // Assign higher values to Southern California counties for demo purposes\n        if (parseFloat(latitude) < 37) {\n          // Southern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 70) + 50; // 50-120\n        } else if (parseFloat(latitude) < 38) {\n          // Central CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 60) + 30; // 30-90\n        } else {\n          // Northern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 40) + 1; // 1-40\n        }\n      });\n    }\n\n    // Define the color scale for counties based on fire count\n    const colorScale = d3.scaleLinear().domain([1, 127]) // From the legend in your screenshot\n    .range([\"#FFEBB5\", \"#FF4040\"]) // Light yellow to red\n    .interpolate(d3.interpolateHcl);\n\n    // Create map\n    svg.selectAll('.county').data(countyData.features).enter().append('path').attr('class', 'county').attr('d', pathGenerator).attr('fill', d => {\n      const countyName = d.properties.name;\n      const fireCount = fireCountsByCounty[countyName] || 0;\n      return fireCount > 0 ? colorScale(fireCount) : '#f2f2f2';\n    }).attr('stroke', '#FFFFFF').attr('stroke-width', 0.5).append('title') // Add tooltip\n    .text(d => {\n      const countyName = d.properties.name;\n      return `${countyName}: ${fireCountsByCounty[countyName] || 0} fires`;\n    });\n\n    // Add fire perimeters if available\n    if (fireData && fireData.features) {\n      svg.selectAll('.fire-perimeter').data(fireData.features).enter().append('path').attr('class', 'fire-perimeter').attr('d', d => {\n        try {\n          return pathGenerator(d);\n        } catch (e) {\n          // Skip perimeters that can't be drawn\n          return null;\n        }\n      }).attr('fill', 'none').attr('stroke', 'rgba(255, 0, 0, 0.5)').attr('stroke-width', 1).append('title').text(d => `Fire: ${d.properties.incident_n || d.properties.FIRE_NAME || 'Unnamed'}`);\n    }\n\n    // Add legend\n    const legendWidth = 300;\n    const legendHeight = 20;\n    const legendX = width - margin.right - legendWidth;\n    const legendY = height - margin.bottom;\n    const legendScale = d3.scaleLinear().domain([1, 127]).range([0, legendWidth]);\n    const legendAxis = d3.axisBottom(legendScale).tickValues([1, 25, 50, 75, 100, 127]).tickSize(5);\n\n    // Add legend gradient\n    const defs = svg.append(\"defs\");\n    const linearGradient = defs.append(\"linearGradient\").attr(\"id\", \"legend-gradient\").attr(\"x1\", \"0%\").attr(\"y1\", \"0%\").attr(\"x2\", \"100%\").attr(\"y2\", \"0%\");\n\n    // Add color stops\n    linearGradient.append(\"stop\").attr(\"offset\", \"0%\").attr(\"stop-color\", colorScale(1));\n    linearGradient.append(\"stop\").attr(\"offset\", \"100%\").attr(\"stop-color\", colorScale(127));\n\n    // Add legend rectangle\n    svg.append(\"rect\").attr(\"x\", legendX).attr(\"y\", legendY).attr(\"width\", legendWidth).attr(\"height\", legendHeight).style(\"fill\", \"url(#legend-gradient)\");\n\n    // Add legend axis\n    svg.append(\"g\").attr(\"transform\", `translate(${legendX}, ${legendY + legendHeight})`).call(legendAxis);\n\n    // Add legend title\n    svg.append(\"text\").attr(\"x\", legendX).attr(\"y\", legendY - 5).attr(\"text-anchor\", \"start\").attr(\"font-size\", \"12px\").text(\"CNT(firep23_1_geojson)\");\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: \"Loading map data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-container\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"map-title\",\n      children: \"Area of each County\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef,\n        width: \"800\",\n        height: \"600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s(CaliforniaFireMap, \"0flH+CECkpyHqJcB62O19Xp2ToQ=\");\n_c = CaliforniaFireMap;\nexport default CaliforniaFireMap;\nvar _c;\n$RefreshReg$(_c, \"CaliforniaFireMap\");","map":{"version":3,"names":["React","useEffect","useState","useRef","d3","jsxDEV","_jsxDEV","CaliforniaFireMap","dataset","_s","countyData","setCountyData","fireData","setFireData","loading","setLoading","error","setError","svgRef","fetchData","countyResponse","fetch","countyGeoJson","json","fireResponse","ok","fireGeoJson","geoData","fireError","console","err","current","drawMap","select","selectAll","remove","width","height","margin","top","right","bottom","left","svg","attr","projection","geoMercator","fitSize","translate","pathGenerator","geoPath","fireCountsByCounty","features","length","forEach","county","countyName","properties","name","fire","geometry","coordinates","point","type","projectedPoint","path","Math","random","log","latitude","parseFloat","floor","colorScale","scaleLinear","domain","range","interpolate","interpolateHcl","data","enter","append","d","fireCount","text","e","incident_n","FIRE_NAME","legendWidth","legendHeight","legendX","legendY","legendScale","legendAxis","axisBottom","tickValues","tickSize","defs","linearGradient","style","call","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/CaliforniaFireMap.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport * as d3 from 'd3';\nimport './CaliforniaFireMap.css';\n\nconst CaliforniaFireMap = ({ dataset }) => {\n  const [countyData, setCountyData] = useState(null);\n  const [fireData, setFireData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const svgRef = useRef(null);\n\n  // Fetch county and fire data when the component mounts or dataset changes\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        // Fetch county data from a public source\n        const countyResponse = await fetch('https://raw.githubusercontent.com/codeforamerica/click_that_hood/master/public/data/california-counties.geojson');\n        const countyGeoJson = await countyResponse.json();\n        setCountyData(countyGeoJson);\n        \n        // If a dataset ID is provided, fetch that data\n        if (dataset) {\n          try {\n            const fireResponse = await fetch(`http://localhost:5000/api/data/${dataset}`);\n            if (fireResponse.ok) {\n              const fireGeoJson = await fireResponse.json();\n              setFireData(fireGeoJson.geoData || null);\n            }\n          } catch (fireError) {\n            console.error(\"Failed to load fire data:\", fireError);\n            // Continue with county data even if fire data fails\n          }\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error(\"Error fetching data:\", err);\n        setError(\"Failed to load map data. Please try again later.\");\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [dataset]);\n\n  // Draw map whenever data changes\n  useEffect(() => {\n    if (countyData && svgRef.current) {\n      drawMap();\n    }\n  }, [countyData, fireData]);\n\n  const drawMap = () => {\n    if (!countyData) return;\n\n    // Clear any previous drawings\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    const width = 800;\n    const height = 600;\n    const margin = { top: 20, right: 20, bottom: 40, left: 40 };\n    \n    // Create SVG\n    const svg = d3.select(svgRef.current)\n      .attr('width', width)\n      .attr('height', height);\n    \n    // Create projection for California\n    const projection = d3.geoMercator()\n      .fitSize([width - margin.left - margin.right, height - margin.top - margin.bottom], countyData)\n      .translate([width / 2, height / 2]);\n    \n    const pathGenerator = d3.geoPath().projection(projection);\n    \n    // Calculate fire counts by county\n    let fireCountsByCounty = {};\n    \n    if (fireData && fireData.features && fireData.features.length > 0) {\n      // Initialize counts for all counties\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        fireCountsByCounty[countyName] = 0;\n      });\n      \n      // Count fires per county using spatial analysis\n      // This is a simplified approach for demonstration\n      fireData.features.forEach(fire => {\n        if (fire.geometry && fire.geometry.coordinates) {\n          try {\n            // Get a representative point from the fire geometry\n            let point;\n            if (fire.geometry.type === 'MultiPolygon') {\n              point = fire.geometry.coordinates[0][0][0];\n            } else if (fire.geometry.type === 'Polygon') {\n              point = fire.geometry.coordinates[0][0];\n            } else {\n              return; // Skip non-polygon geometries\n            }\n            \n            // Find which county contains this point\n            // This is a simplification - real applications would use proper spatial analysis\n            countyData.features.forEach(county => {\n              const countyName = county.properties.name;\n              \n              // Use D3's path.contains for point-in-polygon test\n              const projectedPoint = projection(point);\n              if (projectedPoint) {\n                const path = pathGenerator(county);\n                // Since we can't easily use contains in this context, we'll randomly assign\n                // This should be replaced with proper spatial analysis in production\n                if (Math.random() > 0.9) {\n                  fireCountsByCounty[countyName]++;\n                }\n              }\n            });\n          } catch (err) {\n            console.log(\"Error processing fire geometry:\", err);\n          }\n        }\n      });\n    } else {\n      // Generate sample data if no fire data is available\n      countyData.features.forEach(county => {\n        const countyName = county.properties.name;\n        const latitude = county.properties.latitude || 0;\n        \n        // Assign higher values to Southern California counties for demo purposes\n        if (parseFloat(latitude) < 37) { // Southern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 70) + 50; // 50-120\n        } else if (parseFloat(latitude) < 38) { // Central CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 60) + 30; // 30-90\n        } else { // Northern CA\n          fireCountsByCounty[countyName] = Math.floor(Math.random() * 40) + 1; // 1-40\n        }\n      });\n    }\n    \n    // Define the color scale for counties based on fire count\n    const colorScale = d3.scaleLinear()\n      .domain([1, 127])  // From the legend in your screenshot\n      .range([\"#FFEBB5\", \"#FF4040\"])  // Light yellow to red\n      .interpolate(d3.interpolateHcl);\n    \n    // Create map\n    svg.selectAll('.county')\n      .data(countyData.features)\n      .enter()\n      .append('path')\n      .attr('class', 'county')\n      .attr('d', pathGenerator)\n      .attr('fill', d => {\n        const countyName = d.properties.name;\n        const fireCount = fireCountsByCounty[countyName] || 0;\n        return fireCount > 0 ? colorScale(fireCount) : '#f2f2f2';\n      })\n      .attr('stroke', '#FFFFFF')\n      .attr('stroke-width', 0.5)\n      .append('title')  // Add tooltip\n      .text(d => {\n        const countyName = d.properties.name;\n        return `${countyName}: ${fireCountsByCounty[countyName] || 0} fires`;\n      });\n    \n    // Add fire perimeters if available\n    if (fireData && fireData.features) {\n      svg.selectAll('.fire-perimeter')\n        .data(fireData.features)\n        .enter()\n        .append('path')\n        .attr('class', 'fire-perimeter')\n        .attr('d', d => {\n          try {\n            return pathGenerator(d);\n          } catch (e) {\n            // Skip perimeters that can't be drawn\n            return null;\n          }\n        })\n        .attr('fill', 'none')\n        .attr('stroke', 'rgba(255, 0, 0, 0.5)')\n        .attr('stroke-width', 1)\n        .append('title')\n        .text(d => `Fire: ${d.properties.incident_n || d.properties.FIRE_NAME || 'Unnamed'}`);\n    }\n    \n    // Add legend\n    const legendWidth = 300;\n    const legendHeight = 20;\n    const legendX = width - margin.right - legendWidth;\n    const legendY = height - margin.bottom;\n    \n    const legendScale = d3.scaleLinear()\n      .domain([1, 127])\n      .range([0, legendWidth]);\n    \n    const legendAxis = d3.axisBottom(legendScale)\n      .tickValues([1, 25, 50, 75, 100, 127])\n      .tickSize(5);\n    \n    // Add legend gradient\n    const defs = svg.append(\"defs\");\n    const linearGradient = defs.append(\"linearGradient\")\n      .attr(\"id\", \"legend-gradient\")\n      .attr(\"x1\", \"0%\")\n      .attr(\"y1\", \"0%\")\n      .attr(\"x2\", \"100%\")\n      .attr(\"y2\", \"0%\");\n    \n    // Add color stops\n    linearGradient.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .attr(\"stop-color\", colorScale(1));\n    \n    linearGradient.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .attr(\"stop-color\", colorScale(127));\n    \n    // Add legend rectangle\n    svg.append(\"rect\")\n      .attr(\"x\", legendX)\n      .attr(\"y\", legendY)\n      .attr(\"width\", legendWidth)\n      .attr(\"height\", legendHeight)\n      .style(\"fill\", \"url(#legend-gradient)\");\n    \n    // Add legend axis\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(${legendX}, ${legendY + legendHeight})`)\n      .call(legendAxis);\n    \n    // Add legend title\n    svg.append(\"text\")\n      .attr(\"x\", legendX)\n      .attr(\"y\", legendY - 5)\n      .attr(\"text-anchor\", \"start\")\n      .attr(\"font-size\", \"12px\")\n      .text(\"CNT(firep23_1_geojson)\");\n  };\n\n  if (loading) return <div className=\"loading-container\">Loading map data...</div>;\n  if (error) return <div className=\"error-container\">{error}</div>;\n\n  return (\n    <div className=\"map-container\">\n      <h2 className=\"map-title\">Area of each County</h2>\n      <div className=\"map-wrapper\">\n        <svg ref={svgRef} width=\"800\" height=\"600\"></svg>\n      </div>\n    </div>\n  );\n};\n\nexport default CaliforniaFireMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}