{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard -frontend/california-wildfire-dashboard/client/src/components/FireDashboardSystem.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MainDashboard } from './MainDashboard';\nimport { EnhancedYearlyAnalysisDashboard } from './YearlyAnalysisDashboard';\nimport { FireCauseAnalysisDashboard } from './FireCauseAnalysisDashboard';\nimport { TemperatureFireCorrelation } from './TemperatureFireCorrelation';\nimport TableauDashboard from './TableauDashboard';\nimport './FireDashboard.css';\nimport './TableauDashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FireDashboardSystem = ({\n  containerId\n}) => {\n  _s();\n  const [container, setContainer] = useState(null);\n  const [activeTab, setActiveTab] = useState('main');\n  const [yearlyData, setYearlyData] = useState([]);\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [monthlyDataByYear, setMonthlyDataByYear] = useState({});\n  const [causesData, setCausesData] = useState({});\n  const [topCauses, setTopCauses] = useState([]);\n  const [causeDefinitions, setCauseDefinitions] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [summaryStats, setSummaryStats] = useState({\n    totalFires: 0,\n    totalAcres: 0,\n    yearlyAcres: 0,\n    peakMonth: '',\n    worstYear: '',\n    worstYearAcres: 0,\n    recentYear: '',\n    recentYearFires: 0,\n    recentYearAcres: 0,\n    avgAnnualFires: 0,\n    avgAnnualAcres: 0\n  });\n\n  // Updated path to use public directory instead of backend server\n  const dataBaseUrl = '/data';\n\n  // Client-side implementation of mergeStatistics\n  const mergeStatistics = (statsData, newStatsData) => {\n    // Merge yearly data\n    const combinedYearlyData = [...statsData.yearlyData];\n\n    // Add any new years from the new data\n    newStatsData.yearlyData.forEach(newYearData => {\n      const existingYearIndex = combinedYearlyData.findIndex(year => year.year === newYearData.year);\n      if (existingYearIndex === -1) {\n        // Year doesn't exist in original data, add it\n        combinedYearlyData.push(newYearData);\n      } else {\n        // Year exists, update with combined statistics\n        combinedYearlyData[existingYearIndex].fires += newYearData.fires;\n        combinedYearlyData[existingYearIndex].acres += newYearData.acres;\n      }\n    });\n\n    // Sort by year\n    combinedYearlyData.sort((a, b) => parseInt(a.year) - parseInt(b.year));\n\n    // Merge years array\n    const combinedYears = Array.from(new Set([...statsData.years, ...newStatsData.years])).sort();\n\n    // Merge monthly data by year\n    const combinedMonthlyData = {\n      ...statsData.monthlyDataByYear\n    };\n    if (newStatsData.monthlyDataByYear) {\n      Object.entries(newStatsData.monthlyDataByYear).forEach(([year, monthlyData]) => {\n        if (!combinedMonthlyData[year]) {\n          // Year doesn't exist in original data, add all months\n          combinedMonthlyData[year] = monthlyData;\n        } else {\n          // Year exists, combine monthly data\n          monthlyData.forEach((newMonthData, index) => {\n            combinedMonthlyData[year][index].fires += newMonthData.fires;\n            combinedMonthlyData[year][index].acres += newMonthData.acres;\n          });\n        }\n      });\n    }\n\n    // Merge causes data by year\n    const combinedCausesData = {\n      ...(statsData.causesDataByYear || {})\n    };\n    if (newStatsData.causesDataByYear) {\n      Object.entries(newStatsData.causesDataByYear).forEach(([year, causesData]) => {\n        if (!combinedCausesData[year]) {\n          // Year doesn't exist in original data, add all causes data\n          combinedCausesData[year] = causesData;\n        } else {\n          // Year exists, combine causes data\n          // Merge causes array\n          const existingCauses = combinedCausesData[year].causes || [];\n          const newCauses = causesData.causes || [];\n\n          // Create a map of existing causes for easy access\n          const causesMap = new Map();\n          existingCauses.forEach(cause => {\n            causesMap.set(cause.causeId, cause);\n          });\n\n          // Add or update causes\n          newCauses.forEach(newCause => {\n            if (causesMap.has(newCause.causeId)) {\n              // Update existing cause\n              const existingCause = causesMap.get(newCause.causeId);\n              existingCause.fires += newCause.fires;\n              existingCause.acres += newCause.acres;\n            } else {\n              // Add new cause\n              existingCauses.push(newCause);\n            }\n          });\n\n          // Sort by fires in descending order\n          existingCauses.sort((a, b) => b.fires - a.fires);\n\n          // Update the causes array\n          combinedCausesData[year].causes = existingCauses;\n\n          // Merge monthly breakdown if available\n          if (causesData.monthlyBreakdown && combinedCausesData[year].monthlyBreakdown) {\n            Object.entries(causesData.monthlyBreakdown).forEach(([month, causes]) => {\n              if (!combinedCausesData[year].monthlyBreakdown[month]) {\n                // Month doesn't exist, add all causes\n                combinedCausesData[year].monthlyBreakdown[month] = causes;\n              } else {\n                // Month exists, merge causes\n                const existingMonthCauses = combinedCausesData[year].monthlyBreakdown[month];\n                const monthCausesMap = new Map();\n                existingMonthCauses.forEach(cause => {\n                  monthCausesMap.set(cause.causeId, cause);\n                });\n                causes.forEach(newCause => {\n                  if (monthCausesMap.has(newCause.causeId)) {\n                    // Update existing cause\n                    const existingCause = monthCausesMap.get(newCause.causeId);\n                    existingCause.fires += newCause.fires;\n                    existingCause.acres += newCause.acres;\n                  } else {\n                    // Add new cause\n                    existingMonthCauses.push(newCause);\n                  }\n                });\n\n                // Sort by fires in descending order\n                existingMonthCauses.sort((a, b) => b.fires - a.fires);\n              }\n            });\n          }\n        }\n      });\n    }\n\n    // Combine top causes across all data\n    const combinedTopCauses = [];\n    const causeMap = new Map();\n\n    // Add existing top causes to the map\n    if (statsData.topCauses) {\n      statsData.topCauses.forEach(cause => {\n        causeMap.set(cause.causeId, cause);\n      });\n    }\n\n    // Add or update with new top causes\n    if (newStatsData.topCauses) {\n      newStatsData.topCauses.forEach(newCause => {\n        if (causeMap.has(newCause.causeId)) {\n          // Update existing cause\n          const existingCause = causeMap.get(newCause.causeId);\n          existingCause.fires += newCause.fires;\n          existingCause.acres += newCause.acres;\n        } else {\n          // Add new cause\n          causeMap.set(newCause.causeId, {\n            ...newCause\n          });\n        }\n      });\n    }\n\n    // Convert map back to array\n    causeMap.forEach(cause => {\n      combinedTopCauses.push(cause);\n    });\n\n    // Sort by fires in descending order\n    combinedTopCauses.sort((a, b) => b.fires - a.fires);\n\n    // Recalculate percentages\n    const totalFiresTopCauses = combinedTopCauses.reduce((sum, cause) => sum + cause.fires, 0);\n    combinedTopCauses.forEach(cause => {\n      cause.percentage = Math.round(cause.fires / totalFiresTopCauses * 1000) / 10;\n    });\n\n    // Combine cause definitions\n    const combinedCauseDefinitions = {\n      ...(statsData.causeDefinitions || {}),\n      ...(newStatsData.causeDefinitions || {})\n    };\n\n    // Recalculate summary statistics\n    const totalFires = combinedYearlyData.reduce((sum, year) => sum + year.fires, 0);\n    const totalAcres = combinedYearlyData.reduce((sum, year) => sum + year.acres, 0);\n\n    // Find worst year\n    let worstYear = null;\n    let maxAcres = 0;\n    combinedYearlyData.forEach(yearData => {\n      if (yearData.acres > maxAcres) {\n        maxAcres = yearData.acres;\n        worstYear = yearData.year;\n      }\n    });\n    return {\n      yearlyData: combinedYearlyData,\n      years: combinedYears,\n      monthlyDataByYear: combinedMonthlyData,\n      causesDataByYear: combinedCausesData,\n      topCauses: combinedTopCauses,\n      causeDefinitions: combinedCauseDefinitions,\n      summary: {\n        totalFires,\n        totalAcres,\n        worstYear,\n        worstYearAcres: maxAcres\n      }\n    };\n  };\n  useEffect(() => {\n    const container = document.getElementById(containerId);\n    setContainer(container);\n    fetchYearlyData();\n  }, [containerId, fetchYearlyData]);\n  const handleTabChange = tabName => {\n    setActiveTab(tabName);\n  };\n  const fetchYearlyData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      // First fetch the main stats file\n      const response = await fetch(`${dataBaseUrl}/firep23_1-stats.json`);\n      if (!response.ok) {\n        // If we get a 404, it means the statistics file isn't available\n        if (response.status === 404) {\n          console.warn(\"Statistics file not found\");\n          handleDataError(\"Statistics file not found in the public/data directory.\");\n          return;\n        }\n        throw new Error(`Failed to fetch yearly data: ${response.statusText}`);\n      }\n      let statsData = await response.json();\n\n      // Try to get the supplementary data\n      try {\n        // Check for supplement file\n        const supplementResponse = await fetch(`${dataBaseUrl}/firep23_1-supplement-stats.json`);\n\n        // If found, merge the data\n        if (supplementResponse.ok) {\n          const supplementData = await supplementResponse.json();\n          statsData = mergeStatistics(statsData, supplementData);\n          console.log(\"Successfully merged supplementary data\");\n        }\n      } catch (suppErr) {\n        console.warn(\"No supplementary stats found or error loading:\", suppErr);\n        // Continue with just the main data if supplement isn't available\n      }\n      setYearlyData(statsData.yearlyData);\n      setAvailableYears(statsData.years);\n\n      // Set fire cause data if available\n      if (statsData.causesDataByYear) {\n        setCausesData(statsData.causesDataByYear);\n      }\n      if (statsData.topCauses) {\n        setTopCauses(statsData.topCauses);\n      }\n      if (statsData.causeDefinitions) {\n        setCauseDefinitions(statsData.causeDefinitions);\n      }\n\n      // Calculate additional statistics\n      const sortedYears = [...statsData.yearlyData].sort((a, b) => parseInt(b.year) - parseInt(a.year));\n      const recentYearData = sortedYears.length > 0 ? sortedYears[0] : null;\n      const totalFires = statsData.summary.totalFires;\n      const totalAcres = statsData.summary.totalAcres;\n      const yearCount = statsData.years.length;\n\n      // Update summary stats\n      setSummaryStats({\n        totalFires: totalFires,\n        totalAcres: totalAcres,\n        worstYear: statsData.summary.worstYear,\n        worstYearAcres: statsData.summary.worstYearAcres,\n        recentYear: recentYearData ? recentYearData.year : 'N/A',\n        recentYearFires: recentYearData ? recentYearData.fires : 0,\n        recentYearAcres: recentYearData ? recentYearData.acres : 0,\n        avgAnnualFires: yearCount > 0 ? Math.round(totalFires / yearCount) : 0,\n        avgAnnualAcres: yearCount > 0 ? Math.round(totalAcres / yearCount) : 0\n      });\n\n      // Set the most recent year as the default selected year\n      if (statsData.years.length > 0) {\n        const maxYear = Math.max(...statsData.years.map(y => parseInt(y)));\n        setSelectedYear(maxYear.toString());\n\n        // Since we already have all the monthly data, store it\n        if (statsData.monthlyDataByYear) {\n          setMonthlyDataByYear(statsData.monthlyDataByYear);\n\n          // Set the data for the selected year\n          if (statsData.monthlyDataByYear[maxYear.toString()]) {\n            setMonthlyData(statsData.monthlyDataByYear[maxYear.toString()]);\n\n            // Calculate peak month for summary\n            const monthData = statsData.monthlyDataByYear[maxYear.toString()];\n            const peakMonth = monthData.reduce((max, month) => month.acres > max.acres ? month : max, {\n              acres: 0\n            });\n\n            // Update summary stats with peak month\n            setSummaryStats(prevStats => ({\n              ...prevStats,\n              peakMonth: peakMonth.month || 'N/A'\n            }));\n          } else {\n            setEmptyMonthlyData();\n          }\n        } else {\n          // If no monthly data in the file, initialize empty\n          setEmptyMonthlyData();\n        }\n      }\n      setLoading(false);\n    } catch (err) {\n      console.error(\"Error fetching yearly fire data:\", err);\n      handleDataError(\"Failed to load fire data. Please ensure data files are available in the public/data directory.\");\n    }\n  };\n\n  // Load temperature-fire correlation data\n  const fetchTempFireData = async () => {\n    try {\n      const response = await fetch(`${dataBaseUrl}/temperature-fire-correlation.json`);\n      if (!response.ok) {\n        console.warn(\"Temperature-fire correlation data not found\");\n        return null;\n      }\n      return await response.json();\n    } catch (err) {\n      console.error(\"Error fetching temperature-fire correlation data:\", err);\n      return null;\n    }\n  };\n  const fetchMonthlyData = async year => {\n    if (error || !year) {\n      setEmptyMonthlyData();\n      return;\n    }\n    try {\n      // Check if we already have the data in our state\n      if (monthlyDataByYear && monthlyDataByYear[year]) {\n        setMonthlyData(monthlyDataByYear[year]);\n\n        // Calculate summary stats\n        const monthData = monthlyDataByYear[year];\n        const totalFires = monthData.reduce((sum, month) => sum + month.fires, 0);\n        const totalAcres = monthData.reduce((sum, month) => sum + month.acres, 0);\n\n        // Find peak month\n        const peakMonth = monthData.reduce((max, month) => month.acres > max.acres ? month : max, {\n          acres: 0\n        });\n\n        // Update summary stats\n        setSummaryStats(prevStats => ({\n          ...prevStats,\n          yearlyAcres: totalAcres,\n          peakMonth: peakMonth.month || 'N/A'\n        }));\n        return;\n      }\n\n      // If we don't have it cached, try to load from data file\n      const wasEmpty = monthlyData.length === 0;\n      if (wasEmpty) {\n        setLoading(true);\n      }\n      try {\n        // First check the main stats file\n        const response = await fetch(`${dataBaseUrl}/firep23_1-stats.json`);\n        if (response.ok) {\n          const statsData = await response.json();\n          if (statsData.monthlyDataByYear && statsData.monthlyDataByYear[year]) {\n            // Found monthly data for this year\n            const monthlyData = statsData.monthlyDataByYear[year];\n            setMonthlyData(monthlyData);\n\n            // Calculate peak month\n            const peakMonth = monthlyData.reduce((max, month) => month.acres > max.acres ? month : max, {\n              acres: 0\n            });\n\n            // Update summary stats\n            setSummaryStats(prevStats => ({\n              ...prevStats,\n              yearlyAcres: monthlyData.reduce((sum, month) => sum + month.acres, 0),\n              peakMonth: peakMonth.month || 'N/A'\n            }));\n\n            // Update monthly data by year cache\n            setMonthlyDataByYear(prevData => ({\n              ...prevData,\n              [year]: monthlyData\n            }));\n            if (wasEmpty) {\n              setLoading(false);\n            }\n            return;\n          }\n        }\n\n        // Check supplement file\n        const supplementResponse = await fetch(`${dataBaseUrl}/firep23_1-supplement-stats.json`);\n        if (supplementResponse.ok) {\n          const supplementData = await supplementResponse.json();\n          if (supplementData.monthlyDataByYear && supplementData.monthlyDataByYear[year]) {\n            // Found monthly data in supplement\n            const monthlyData = supplementData.monthlyDataByYear[year];\n            setMonthlyData(monthlyData);\n\n            // Calculate peak month\n            const peakMonth = monthlyData.reduce((max, month) => month.acres > max.acres ? month : max, {\n              acres: 0\n            });\n\n            // Update summary stats\n            setSummaryStats(prevStats => ({\n              ...prevStats,\n              yearlyAcres: monthlyData.reduce((sum, month) => sum + month.acres, 0),\n              peakMonth: peakMonth.month || 'N/A'\n            }));\n\n            // Update monthly data by year cache\n            setMonthlyDataByYear(prevData => ({\n              ...prevData,\n              [year]: monthlyData\n            }));\n            if (wasEmpty) {\n              setLoading(false);\n            }\n            return;\n          }\n        }\n\n        // If we get here, we couldn't find data for this year\n        console.warn(`No monthly data found for year ${year}`);\n        setEmptyMonthlyData();\n        if (wasEmpty) {\n          setLoading(false);\n        }\n      } catch (err) {\n        console.error(`Error fetching monthly fire data for year ${year}:`, err);\n        setError(`Failed to load monthly data for ${year}. Please check that data files are available.`);\n        setEmptyMonthlyData();\n        if (wasEmpty) {\n          setLoading(false);\n        }\n      }\n    } catch (err) {\n      console.error(`Error setting monthly fire data for year ${year}:`, err);\n      setError(`Failed to load monthly data for ${year}.`);\n      setEmptyMonthlyData();\n    }\n  };\n  const handleYearChange = year => {\n    setSelectedYear(year);\n    fetchMonthlyData(year);\n  };\n  const handleDataError = errorMessage => {\n    setYearlyData([]);\n    setAvailableYears([]);\n    setSelectedYear(null);\n    setCausesData({});\n    setTopCauses([]);\n    setError(errorMessage || \"Failed to load fire data. Please ensure data files are available in the public/data directory.\");\n    setLoading(false);\n  };\n  const setEmptyMonthlyData = () => {\n    setMonthlyData([]);\n    setSummaryStats(prevStats => ({\n      ...prevStats,\n      yearlyAcres: 0,\n      peakMonth: 'N/A'\n    }));\n  };\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-text\",\n            children: \"Loading fire data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dashboard-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"dashboard-title\",\n            children: \"California Wildfire Dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-shrink-0\",\n              children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                className: \"error-icon\",\n                xmlns: \"http://www.w3.org/2000/svg\",\n                viewBox: \"0 0 20 20\",\n                fill: \"currentColor\",\n                children: /*#__PURE__*/_jsxDEV(\"path\", {\n                  fillRule: \"evenodd\",\n                  d: \"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\",\n                  clipRule: \"evenodd\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 566,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 565,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ml-3\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"error-title\",\n                children: \"Data Loading Error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"error-details\",\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"error-help\",\n                  children: \"To fix this issue:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 575,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n                  className: \"error-list\",\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"error-list-item\",\n                    children: \"Ensure your data files are in the public/data directory\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 577,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"error-list-item\",\n                    children: \"Check that file names match the expected format (firep23_1-stats.json, etc.)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 578,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"error-list-item\",\n                    children: \"Verify the JSON files have the correct structure and are properly formatted\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 579,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 576,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: fetchYearlyData,\n            className: \"error-retry-button\",\n            children: \"Try Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-system-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'main' ? 'active' : ''}`,\n        onClick: () => handleTabChange('main'),\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"tab-icon\",\n          viewBox: \"0 0 20 20\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this), \"Dashboard Overview\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'yearly' ? 'active' : ''}`,\n        onClick: () => handleTabChange('yearly'),\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"tab-icon\",\n          viewBox: \"0 0 20 20\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\",\n            clipRule: \"evenodd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this), \"Yearly Analysis\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'causes' ? 'active' : ''}`,\n        onClick: () => handleTabChange('causes'),\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"tab-icon\",\n          viewBox: \"0 0 20 20\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z\",\n            clipRule: \"evenodd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 11\n        }, this), \"Fire Causes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'temperature' ? 'active' : ''}`,\n        onClick: () => handleTabChange('temperature'),\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"tab-icon\",\n          viewBox: \"0 0 20 20\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M7 2a1 1 0 00-.707 1.707L7 4.414v3.758a1 1 0 01-.293.707l-4 4C.817 14.769 2.156 18 4.828 18h10.343c2.673 0 4.012-3.231 2.122-5.121l-4-4A1 1 0 0113 8.172V4.414l.707-.707A1 1 0 0013 2H7zm2 6.172V4h2v4.172a3 3 0 00.879 2.12l1.168 1.168a4 4 0 01-8.214 0l1.168-1.168A3 3 0 009 8.172z\",\n            clipRule: \"evenodd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 631,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 11\n        }, this), \"Temperature-Fire Analysis\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `dashboard-tab ${activeTab === 'tableau' ? 'active' : ''}`,\n        onClick: () => handleTabChange('tableau'),\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"tab-icon\",\n          viewBox: \"0 0 20 20\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z\",\n            clipRule: \"evenodd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 11\n        }, this), \"Tableau Dashboard\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main-dashboard\",\n        className: `dashboard-tab-content ${activeTab === 'main' ? 'active' : ''}`,\n        children: activeTab === 'main' && /*#__PURE__*/_jsxDEV(MainDashboard, {\n          summaryStats: summaryStats,\n          yearlyData: yearlyData,\n          onRefresh: fetchYearlyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"yearly-dashboard\",\n        className: `dashboard-tab-content ${activeTab === 'yearly' ? 'active' : ''}`,\n        children: activeTab === 'yearly' && /*#__PURE__*/_jsxDEV(EnhancedYearlyAnalysisDashboard, {\n          yearlyData: yearlyData,\n          monthlyData: monthlyData,\n          monthlyDataByYear: monthlyDataByYear,\n          selectedYear: selectedYear,\n          availableYears: availableYears,\n          summaryStats: summaryStats,\n          onYearChange: handleYearChange,\n          onRefresh: fetchYearlyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"causes-dashboard\",\n        className: `dashboard-tab-content ${activeTab === 'causes' ? 'active' : ''}`,\n        children: activeTab === 'causes' && /*#__PURE__*/_jsxDEV(FireCauseAnalysisDashboard, {\n          causesData: causesData,\n          topCauses: topCauses,\n          causeDefinitions: causeDefinitions,\n          selectedYear: selectedYear,\n          availableYears: availableYears,\n          onYearChange: handleYearChange,\n          onRefresh: fetchYearlyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"temperature-dashboard\",\n        className: `dashboard-tab-content ${activeTab === 'temperature' ? 'active' : ''}`,\n        children: activeTab === 'temperature' && /*#__PURE__*/_jsxDEV(TemperatureFireCorrelation, {\n          onRefresh: fetchYearlyData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"tableau-dashboard\",\n        className: `dashboard-tab-content ${activeTab === 'tableau' ? 'active' : ''}`,\n        children: activeTab === 'tableau' && /*#__PURE__*/_jsxDEV(TableauDashboard, {\n          title: \"California Wildfire Tableau Dashboard\",\n          description: \"Interactive visualization of California wildfire data using Tableau, providing in-depth analysis and insights.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 692,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 597,\n    columnNumber: 5\n  }, this);\n};\n_s(FireDashboardSystem, \"d6PoA0DxHS+dR99eGFyn3OslYeo=\");\n_c = FireDashboardSystem;\nexport default FireDashboardSystem;\nvar _c;\n$RefreshReg$(_c, \"FireDashboardSystem\");","map":{"version":3,"names":["React","useEffect","useState","MainDashboard","EnhancedYearlyAnalysisDashboard","FireCauseAnalysisDashboard","TemperatureFireCorrelation","TableauDashboard","jsxDEV","_jsxDEV","FireDashboardSystem","containerId","_s","container","setContainer","activeTab","setActiveTab","yearlyData","setYearlyData","monthlyData","setMonthlyData","monthlyDataByYear","setMonthlyDataByYear","causesData","setCausesData","topCauses","setTopCauses","causeDefinitions","setCauseDefinitions","loading","setLoading","error","setError","selectedYear","setSelectedYear","availableYears","setAvailableYears","summaryStats","setSummaryStats","totalFires","totalAcres","yearlyAcres","peakMonth","worstYear","worstYearAcres","recentYear","recentYearFires","recentYearAcres","avgAnnualFires","avgAnnualAcres","dataBaseUrl","mergeStatistics","statsData","newStatsData","combinedYearlyData","forEach","newYearData","existingYearIndex","findIndex","year","push","fires","acres","sort","a","b","parseInt","combinedYears","Array","from","Set","years","combinedMonthlyData","Object","entries","newMonthData","index","combinedCausesData","causesDataByYear","existingCauses","causes","newCauses","causesMap","Map","cause","set","causeId","newCause","has","existingCause","get","monthlyBreakdown","month","existingMonthCauses","monthCausesMap","combinedTopCauses","causeMap","totalFiresTopCauses","reduce","sum","percentage","Math","round","combinedCauseDefinitions","maxAcres","yearData","summary","document","getElementById","fetchYearlyData","handleTabChange","tabName","response","fetch","ok","status","console","warn","handleDataError","Error","statusText","json","supplementResponse","supplementData","log","suppErr","sortedYears","recentYearData","length","yearCount","maxYear","max","map","y","toString","monthData","prevStats","setEmptyMonthlyData","err","fetchTempFireData","fetchMonthlyData","wasEmpty","prevData","handleYearChange","errorMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","xmlns","viewBox","fill","fillRule","d","clipRule","onClick","id","onRefresh","onYearChange","title","description","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard -frontend/california-wildfire-dashboard/client/src/components/FireDashboardSystem.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { MainDashboard } from './MainDashboard';\nimport { EnhancedYearlyAnalysisDashboard } from './YearlyAnalysisDashboard';\nimport { FireCauseAnalysisDashboard } from './FireCauseAnalysisDashboard';\nimport { TemperatureFireCorrelation } from './TemperatureFireCorrelation';\nimport TableauDashboard from './TableauDashboard';\nimport './FireDashboard.css';\nimport './TableauDashboard.css';\n\nconst FireDashboardSystem = ({ containerId }) => {\n  const [container, setContainer] = useState(null);\n  const [activeTab, setActiveTab] = useState('main');\n  const [yearlyData, setYearlyData] = useState([]);\n  const [monthlyData, setMonthlyData] = useState([]);\n  const [monthlyDataByYear, setMonthlyDataByYear] = useState({});\n  const [causesData, setCausesData] = useState({});\n  const [topCauses, setTopCauses] = useState([]);\n  const [causeDefinitions, setCauseDefinitions] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [availableYears, setAvailableYears] = useState([]);\n  const [summaryStats, setSummaryStats] = useState({\n    totalFires: 0,\n    totalAcres: 0,\n    yearlyAcres: 0,\n    peakMonth: '',\n    worstYear: '',\n    worstYearAcres: 0,\n    recentYear: '',\n    recentYearFires: 0,\n    recentYearAcres: 0,\n    avgAnnualFires: 0,\n    avgAnnualAcres: 0\n  });\n\n  // Updated path to use public directory instead of backend server\n  const dataBaseUrl = '/data';\n\n  // Client-side implementation of mergeStatistics\n  const mergeStatistics = (statsData, newStatsData) => {\n    // Merge yearly data\n    const combinedYearlyData = [...statsData.yearlyData];\n    \n    // Add any new years from the new data\n    newStatsData.yearlyData.forEach(newYearData => {\n      const existingYearIndex = combinedYearlyData.findIndex(year => year.year === newYearData.year);\n      if (existingYearIndex === -1) {\n        // Year doesn't exist in original data, add it\n        combinedYearlyData.push(newYearData);\n      } else {\n        // Year exists, update with combined statistics\n        combinedYearlyData[existingYearIndex].fires += newYearData.fires;\n        combinedYearlyData[existingYearIndex].acres += newYearData.acres;\n      }\n    });\n    \n    // Sort by year\n    combinedYearlyData.sort((a, b) => parseInt(a.year) - parseInt(b.year));\n    \n    // Merge years array\n    const combinedYears = Array.from(\n      new Set([...statsData.years, ...newStatsData.years])\n    ).sort();\n    \n    // Merge monthly data by year\n    const combinedMonthlyData = { ...statsData.monthlyDataByYear };\n    \n    if (newStatsData.monthlyDataByYear) {\n      Object.entries(newStatsData.monthlyDataByYear).forEach(([year, monthlyData]) => {\n        if (!combinedMonthlyData[year]) {\n          // Year doesn't exist in original data, add all months\n          combinedMonthlyData[year] = monthlyData;\n        } else {\n          // Year exists, combine monthly data\n          monthlyData.forEach((newMonthData, index) => {\n            combinedMonthlyData[year][index].fires += newMonthData.fires;\n            combinedMonthlyData[year][index].acres += newMonthData.acres;\n          });\n        }\n      });\n    }\n    \n    // Merge causes data by year\n    const combinedCausesData = { ...(statsData.causesDataByYear || {}) };\n    \n    if (newStatsData.causesDataByYear) {\n      Object.entries(newStatsData.causesDataByYear).forEach(([year, causesData]) => {\n        if (!combinedCausesData[year]) {\n          // Year doesn't exist in original data, add all causes data\n          combinedCausesData[year] = causesData;\n        } else {\n          // Year exists, combine causes data\n          // Merge causes array\n          const existingCauses = combinedCausesData[year].causes || [];\n          const newCauses = causesData.causes || [];\n          \n          // Create a map of existing causes for easy access\n          const causesMap = new Map();\n          existingCauses.forEach(cause => {\n            causesMap.set(cause.causeId, cause);\n          });\n          \n          // Add or update causes\n          newCauses.forEach(newCause => {\n            if (causesMap.has(newCause.causeId)) {\n              // Update existing cause\n              const existingCause = causesMap.get(newCause.causeId);\n              existingCause.fires += newCause.fires;\n              existingCause.acres += newCause.acres;\n            } else {\n              // Add new cause\n              existingCauses.push(newCause);\n            }\n          });\n          \n          // Sort by fires in descending order\n          existingCauses.sort((a, b) => b.fires - a.fires);\n          \n          // Update the causes array\n          combinedCausesData[year].causes = existingCauses;\n          \n          // Merge monthly breakdown if available\n          if (causesData.monthlyBreakdown && combinedCausesData[year].monthlyBreakdown) {\n            Object.entries(causesData.monthlyBreakdown).forEach(([month, causes]) => {\n              if (!combinedCausesData[year].monthlyBreakdown[month]) {\n                // Month doesn't exist, add all causes\n                combinedCausesData[year].monthlyBreakdown[month] = causes;\n              } else {\n                // Month exists, merge causes\n                const existingMonthCauses = combinedCausesData[year].monthlyBreakdown[month];\n                const monthCausesMap = new Map();\n                \n                existingMonthCauses.forEach(cause => {\n                  monthCausesMap.set(cause.causeId, cause);\n                });\n                \n                causes.forEach(newCause => {\n                  if (monthCausesMap.has(newCause.causeId)) {\n                    // Update existing cause\n                    const existingCause = monthCausesMap.get(newCause.causeId);\n                    existingCause.fires += newCause.fires;\n                    existingCause.acres += newCause.acres;\n                  } else {\n                    // Add new cause\n                    existingMonthCauses.push(newCause);\n                  }\n                });\n                \n                // Sort by fires in descending order\n                existingMonthCauses.sort((a, b) => b.fires - a.fires);\n              }\n            });\n          }\n        }\n      });\n    }\n    \n    // Combine top causes across all data\n    const combinedTopCauses = [];\n    const causeMap = new Map();\n    \n    // Add existing top causes to the map\n    if (statsData.topCauses) {\n      statsData.topCauses.forEach(cause => {\n        causeMap.set(cause.causeId, cause);\n      });\n    }\n    \n    // Add or update with new top causes\n    if (newStatsData.topCauses) {\n      newStatsData.topCauses.forEach(newCause => {\n        if (causeMap.has(newCause.causeId)) {\n          // Update existing cause\n          const existingCause = causeMap.get(newCause.causeId);\n          existingCause.fires += newCause.fires;\n          existingCause.acres += newCause.acres;\n        } else {\n          // Add new cause\n          causeMap.set(newCause.causeId, { ...newCause });\n        }\n      });\n    }\n    \n    // Convert map back to array\n    causeMap.forEach(cause => {\n      combinedTopCauses.push(cause);\n    });\n    \n    // Sort by fires in descending order\n    combinedTopCauses.sort((a, b) => b.fires - a.fires);\n    \n    // Recalculate percentages\n    const totalFiresTopCauses = combinedTopCauses.reduce((sum, cause) => sum + cause.fires, 0);\n    combinedTopCauses.forEach(cause => {\n      cause.percentage = Math.round((cause.fires / totalFiresTopCauses) * 1000) / 10;\n    });\n    \n    // Combine cause definitions\n    const combinedCauseDefinitions = {\n      ...(statsData.causeDefinitions || {}),\n      ...(newStatsData.causeDefinitions || {})\n    };\n    \n    // Recalculate summary statistics\n    const totalFires = combinedYearlyData.reduce((sum, year) => sum + year.fires, 0);\n    const totalAcres = combinedYearlyData.reduce((sum, year) => sum + year.acres, 0);\n    \n    // Find worst year\n    let worstYear = null;\n    let maxAcres = 0;\n    \n    combinedYearlyData.forEach(yearData => {\n      if (yearData.acres > maxAcres) {\n        maxAcres = yearData.acres;\n        worstYear = yearData.year;\n      }\n    });\n    \n    return {\n      yearlyData: combinedYearlyData,\n      years: combinedYears,\n      monthlyDataByYear: combinedMonthlyData,\n      causesDataByYear: combinedCausesData,\n      topCauses: combinedTopCauses,\n      causeDefinitions: combinedCauseDefinitions,\n      summary: {\n        totalFires,\n        totalAcres,\n        worstYear,\n        worstYearAcres: maxAcres\n      }\n    };\n  };\n\n  useEffect(() => {\n    const container = document.getElementById(containerId);\n    setContainer(container);\n    fetchYearlyData();\n  }, [containerId, fetchYearlyData]);\n\n  const handleTabChange = (tabName) => {\n    setActiveTab(tabName);\n  };\n\n  const fetchYearlyData = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      // First fetch the main stats file\n      const response = await fetch(`${dataBaseUrl}/firep23_1-stats.json`);\n\n      if (!response.ok) {\n        // If we get a 404, it means the statistics file isn't available\n        if (response.status === 404) {\n          console.warn(\"Statistics file not found\");\n          handleDataError(\"Statistics file not found in the public/data directory.\");\n          return;\n        }\n        throw new Error(`Failed to fetch yearly data: ${response.statusText}`);\n      }\n\n      let statsData = await response.json();\n      \n      // Try to get the supplementary data\n      try {\n        // Check for supplement file\n        const supplementResponse = await fetch(`${dataBaseUrl}/firep23_1-supplement-stats.json`);\n        \n        // If found, merge the data\n        if (supplementResponse.ok) {\n          const supplementData = await supplementResponse.json();\n          statsData = mergeStatistics(statsData, supplementData);\n          console.log(\"Successfully merged supplementary data\");\n        }\n      } catch (suppErr) {\n        console.warn(\"No supplementary stats found or error loading:\", suppErr);\n        // Continue with just the main data if supplement isn't available\n      }\n\n      setYearlyData(statsData.yearlyData);\n      setAvailableYears(statsData.years);\n\n      // Set fire cause data if available\n      if (statsData.causesDataByYear) {\n        setCausesData(statsData.causesDataByYear);\n      }\n\n      if (statsData.topCauses) {\n        setTopCauses(statsData.topCauses);\n      }\n\n      if (statsData.causeDefinitions) {\n        setCauseDefinitions(statsData.causeDefinitions);\n      }\n\n      // Calculate additional statistics\n      const sortedYears = [...statsData.yearlyData].sort((a, b) => parseInt(b.year) - parseInt(a.year));\n      const recentYearData = sortedYears.length > 0 ? sortedYears[0] : null;\n\n      const totalFires = statsData.summary.totalFires;\n      const totalAcres = statsData.summary.totalAcres;\n      const yearCount = statsData.years.length;\n\n      // Update summary stats\n      setSummaryStats({\n        totalFires: totalFires,\n        totalAcres: totalAcres,\n        worstYear: statsData.summary.worstYear,\n        worstYearAcres: statsData.summary.worstYearAcres,\n        recentYear: recentYearData ? recentYearData.year : 'N/A',\n        recentYearFires: recentYearData ? recentYearData.fires : 0,\n        recentYearAcres: recentYearData ? recentYearData.acres : 0,\n        avgAnnualFires: yearCount > 0 ? Math.round(totalFires / yearCount) : 0,\n        avgAnnualAcres: yearCount > 0 ? Math.round(totalAcres / yearCount) : 0\n      });\n\n      // Set the most recent year as the default selected year\n      if (statsData.years.length > 0) {\n        const maxYear = Math.max(...statsData.years.map(y => parseInt(y)));\n        setSelectedYear(maxYear.toString());\n\n        // Since we already have all the monthly data, store it\n        if (statsData.monthlyDataByYear) {\n          setMonthlyDataByYear(statsData.monthlyDataByYear);\n          \n          // Set the data for the selected year\n          if (statsData.monthlyDataByYear[maxYear.toString()]) {\n            setMonthlyData(statsData.monthlyDataByYear[maxYear.toString()]);\n            \n            // Calculate peak month for summary\n            const monthData = statsData.monthlyDataByYear[maxYear.toString()];\n            const peakMonth = monthData.reduce(\n              (max, month) => month.acres > max.acres ? month : max, \n              { acres: 0 }\n            );\n            \n            // Update summary stats with peak month\n            setSummaryStats(prevStats => ({\n              ...prevStats,\n              peakMonth: peakMonth.month || 'N/A'\n            }));\n          } else {\n            setEmptyMonthlyData();\n          }\n        } else {\n          // If no monthly data in the file, initialize empty\n          setEmptyMonthlyData();\n        }\n      }\n\n      setLoading(false);\n\n    } catch (err) {\n      console.error(\"Error fetching yearly fire data:\", err);\n      handleDataError(\"Failed to load fire data. Please ensure data files are available in the public/data directory.\");\n    }\n  };\n\n  // Load temperature-fire correlation data\n  const fetchTempFireData = async () => {\n    try {\n      const response = await fetch(`${dataBaseUrl}/temperature-fire-correlation.json`);\n      \n      if (!response.ok) {\n        console.warn(\"Temperature-fire correlation data not found\");\n        return null;\n      }\n      \n      return await response.json();\n    } catch (err) {\n      console.error(\"Error fetching temperature-fire correlation data:\", err);\n      return null;\n    }\n  };\n\n  const fetchMonthlyData = async (year) => {\n    if (error || !year) {\n      setEmptyMonthlyData();\n      return;\n    }\n\n    try {\n      // Check if we already have the data in our state\n      if (monthlyDataByYear && monthlyDataByYear[year]) {\n        setMonthlyData(monthlyDataByYear[year]);\n        \n        // Calculate summary stats\n        const monthData = monthlyDataByYear[year];\n        const totalFires = monthData.reduce((sum, month) => sum + month.fires, 0);\n        const totalAcres = monthData.reduce((sum, month) => sum + month.acres, 0);\n        \n        // Find peak month\n        const peakMonth = monthData.reduce(\n          (max, month) => month.acres > max.acres ? month : max, \n          { acres: 0 }\n        );\n        \n        // Update summary stats\n        setSummaryStats(prevStats => ({\n          ...prevStats,\n          yearlyAcres: totalAcres,\n          peakMonth: peakMonth.month || 'N/A'\n        }));\n        \n        return;\n      }\n      \n      // If we don't have it cached, try to load from data file\n      const wasEmpty = monthlyData.length === 0;\n      if (wasEmpty) {\n        setLoading(true);\n      }\n\n      try {\n        // First check the main stats file\n        const response = await fetch(`${dataBaseUrl}/firep23_1-stats.json`);\n        \n        if (response.ok) {\n          const statsData = await response.json();\n          \n          if (statsData.monthlyDataByYear && statsData.monthlyDataByYear[year]) {\n            // Found monthly data for this year\n            const monthlyData = statsData.monthlyDataByYear[year];\n            setMonthlyData(monthlyData);\n            \n            // Calculate peak month\n            const peakMonth = monthlyData.reduce(\n              (max, month) => month.acres > max.acres ? month : max, \n              { acres: 0 }\n            );\n            \n            // Update summary stats\n            setSummaryStats(prevStats => ({\n              ...prevStats,\n              yearlyAcres: monthlyData.reduce((sum, month) => sum + month.acres, 0),\n              peakMonth: peakMonth.month || 'N/A'\n            }));\n            \n            // Update monthly data by year cache\n            setMonthlyDataByYear(prevData => ({\n              ...prevData,\n              [year]: monthlyData\n            }));\n            \n            if (wasEmpty) {\n              setLoading(false);\n            }\n            \n            return;\n          }\n        }\n        \n        // Check supplement file\n        const supplementResponse = await fetch(`${dataBaseUrl}/firep23_1-supplement-stats.json`);\n        \n        if (supplementResponse.ok) {\n          const supplementData = await supplementResponse.json();\n          \n          if (supplementData.monthlyDataByYear && supplementData.monthlyDataByYear[year]) {\n            // Found monthly data in supplement\n            const monthlyData = supplementData.monthlyDataByYear[year];\n            setMonthlyData(monthlyData);\n            \n            // Calculate peak month\n            const peakMonth = monthlyData.reduce(\n              (max, month) => month.acres > max.acres ? month : max, \n              { acres: 0 }\n            );\n            \n            // Update summary stats\n            setSummaryStats(prevStats => ({\n              ...prevStats,\n              yearlyAcres: monthlyData.reduce((sum, month) => sum + month.acres, 0),\n              peakMonth: peakMonth.month || 'N/A'\n            }));\n            \n            // Update monthly data by year cache\n            setMonthlyDataByYear(prevData => ({\n              ...prevData,\n              [year]: monthlyData\n            }));\n            \n            if (wasEmpty) {\n              setLoading(false);\n            }\n            \n            return;\n          }\n        }\n        \n        // If we get here, we couldn't find data for this year\n        console.warn(`No monthly data found for year ${year}`);\n        setEmptyMonthlyData();\n        if (wasEmpty) {\n          setLoading(false);\n        }\n        \n      } catch (err) {\n        console.error(`Error fetching monthly fire data for year ${year}:`, err);\n        setError(`Failed to load monthly data for ${year}. Please check that data files are available.`);\n        setEmptyMonthlyData();\n        if (wasEmpty) {\n          setLoading(false);\n        }\n      }\n    } catch (err) {\n      console.error(`Error setting monthly fire data for year ${year}:`, err);\n      setError(`Failed to load monthly data for ${year}.`);\n      setEmptyMonthlyData();\n    }\n  };\n\n  const handleYearChange = (year) => {\n    setSelectedYear(year);\n    fetchMonthlyData(year);\n  };\n\n  const handleDataError = (errorMessage) => {\n    setYearlyData([]);\n    setAvailableYears([]);\n    setSelectedYear(null);\n    setCausesData({});\n    setTopCauses([]);\n    setError(errorMessage || \"Failed to load fire data. Please ensure data files are available in the public/data directory.\");\n    setLoading(false);\n  };\n\n  const setEmptyMonthlyData = () => {\n    setMonthlyData([]);\n    setSummaryStats(prevStats => ({\n      ...prevStats,\n      yearlyAcres: 0,\n      peakMonth: 'N/A'\n    }));\n  };\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div className=\"dashboard-content\">\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\">\n            <div className=\"spinner\"></div>\n            <div className=\"loading-text\">Loading fire data...</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <div className=\"dashboard-content\">\n        <div className=\"error-container\">\n          <div className=\"dashboard-header\">\n            <h2 className=\"dashboard-title\">California Wildfire Dashboard</h2>\n          </div>\n\n          <div className=\"error-message\">\n            <div className=\"flex\">\n              <div className=\"flex-shrink-0\">\n                <svg className=\"error-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <div className=\"ml-3\">\n                <h3 className=\"error-title\">Data Loading Error</h3>\n                <div className=\"error-details\">\n                  <p>{error}</p>\n                </div>\n                <div>\n                  <p className=\"error-help\">To fix this issue:</p>\n                  <ol className=\"error-list\">\n                    <li className=\"error-list-item\">Ensure your data files are in the public/data directory</li>\n                    <li className=\"error-list-item\">Check that file names match the expected format (firep23_1-stats.json, etc.)</li>\n                    <li className=\"error-list-item\">Verify the JSON files have the correct structure and are properly formatted</li>\n                  </ol>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"text-center\">\n            <button onClick={fetchYearlyData} className=\"error-retry-button\">\n              Try Again\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard-system-container\">\n      <div className=\"dashboard-tabs\">\n        <button\n          className={`dashboard-tab ${activeTab === 'main' ? 'active' : ''}`}\n          onClick={() => handleTabChange('main')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n          </svg>\n          Dashboard Overview\n        </button>\n        <button\n          className={`dashboard-tab ${activeTab === 'yearly' ? 'active' : ''}`}\n          onClick={() => handleTabChange('yearly')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clipRule=\"evenodd\" />\n          </svg>\n          Yearly Analysis\n        </button>\n        <button\n          className={`dashboard-tab ${activeTab === 'causes' ? 'active' : ''}`}\n          onClick={() => handleTabChange('causes')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z\" clipRule=\"evenodd\" />\n          </svg>\n          Fire Causes\n        </button>\n        <button\n          className={`dashboard-tab ${activeTab === 'temperature' ? 'active' : ''}`}\n          onClick={() => handleTabChange('temperature')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M7 2a1 1 0 00-.707 1.707L7 4.414v3.758a1 1 0 01-.293.707l-4 4C.817 14.769 2.156 18 4.828 18h10.343c2.673 0 4.012-3.231 2.122-5.121l-4-4A1 1 0 0113 8.172V4.414l.707-.707A1 1 0 0013 2H7zm2 6.172V4h2v4.172a3 3 0 00.879 2.12l1.168 1.168a4 4 0 01-8.214 0l1.168-1.168A3 3 0 009 8.172z\" clipRule=\"evenodd\" />\n          </svg>\n          Temperature-Fire Analysis\n        </button>\n        {/* Tableau Dashboard tab */}\n        <button\n          className={`dashboard-tab ${activeTab === 'tableau' ? 'active' : ''}`}\n          onClick={() => handleTabChange('tableau')}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fillRule=\"evenodd\" d=\"M3 5a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2h-2.22l.123.489.804.804A1 1 0 0113 18H7a1 1 0 01-.707-1.707l.804-.804L7.22 15H5a2 2 0 01-2-2V5zm5.771 7H5V5h10v7H8.771z\" clipRule=\"evenodd\" />\n          </svg>\n          Tableau Dashboard\n        </button>\n      </div>\n  \n      <div className=\"dashboard-content\">\n        <div id=\"main-dashboard\" className={`dashboard-tab-content ${activeTab === 'main' ? 'active' : ''}`}>\n          {activeTab === 'main' && (\n            <MainDashboard\n              summaryStats={summaryStats}\n              yearlyData={yearlyData}\n              onRefresh={fetchYearlyData}\n            />\n          )}\n        </div>\n        <div id=\"yearly-dashboard\" className={`dashboard-tab-content ${activeTab === 'yearly' ? 'active' : ''}`}>\n          {activeTab === 'yearly' && (\n            <EnhancedYearlyAnalysisDashboard\n              yearlyData={yearlyData}\n              monthlyData={monthlyData}\n              monthlyDataByYear={monthlyDataByYear}\n              selectedYear={selectedYear}\n              availableYears={availableYears}\n              summaryStats={summaryStats}\n              onYearChange={handleYearChange}\n              onRefresh={fetchYearlyData}\n            />\n          )}\n        </div>\n        <div id=\"causes-dashboard\" className={`dashboard-tab-content ${activeTab === 'causes' ? 'active' : ''}`}>\n          {activeTab === 'causes' && (\n            <FireCauseAnalysisDashboard\n              causesData={causesData}\n              topCauses={topCauses}\n              causeDefinitions={causeDefinitions}\n              selectedYear={selectedYear}\n              availableYears={availableYears}\n              onYearChange={handleYearChange}\n              onRefresh={fetchYearlyData}\n            />\n          )}\n        </div>\n        <div id=\"temperature-dashboard\" className={`dashboard-tab-content ${activeTab === 'temperature' ? 'active' : ''}`}>\n          {activeTab === 'temperature' && (\n            <TemperatureFireCorrelation\n              onRefresh={fetchYearlyData}\n            />\n          )}\n        </div>\n        {/* Tableau Dashboard tab content */}\n        <div id=\"tableau-dashboard\" className={`dashboard-tab-content ${activeTab === 'tableau' ? 'active' : ''}`}>\n          {activeTab === 'tableau' && (\n            <TableauDashboard\n              title=\"California Wildfire Tableau Dashboard\"\n              description=\"Interactive visualization of California wildfire data using Tableau, providing in-depth analysis and insights.\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n}\n\nexport default FireDashboardSystem;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}