{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CaliforniaFireMap from './CaliforniaFireMap';\nimport LayerControls from './LayerControls';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  initialDataset\n}) => {\n  _s();\n  var _baseData$metrics, _baseData$metrics$tot, _baseData$metrics2, _baseData$metrics2$av, _baseData$metrics3, _baseData$metrics3$ma, _baseData$metrics4, _baseData$metrics4$mi;\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [availableDatasets, setAvailableDatasets] = useState([]);\n  const [selectedBaseDataset, setSelectedBaseDataset] = useState('default');\n  const [baseData, setBaseData] = useState(null);\n  const [overlays, setOverlays] = useState([]);\n  const [availableOverlays, setAvailableOverlays] = useState([]);\n\n  // Load available datasets when the component mounts\n  useEffect(() => {\n    const fetchDatasets = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/datasets');\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const datasets = await response.json();\n        setAvailableDatasets(datasets);\n\n        // Set initial dataset if provided, otherwise use default\n        if (initialDataset) {\n          setSelectedBaseDataset(initialDataset);\n        }\n\n        // Update available overlays (all datasets except the currently selected base)\n        updateAvailableOverlays(datasets, initialDataset || 'default');\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching datasets:', err);\n        setError('Failed to load datasets. Please try again later.');\n        setLoading(false);\n      }\n    };\n    fetchDatasets();\n  }, [initialDataset]);\n\n  // Update available overlays when base dataset changes\n  const updateAvailableOverlays = (datasets, baseId) => {\n    const filteredOverlays = datasets.filter(dataset => dataset.id !== baseId);\n    setAvailableOverlays(filteredOverlays);\n  };\n\n  // Fetch base dataset when selection changes\n  useEffect(() => {\n    if (selectedBaseDataset) {\n      fetchBaseData(selectedBaseDataset);\n\n      // Update available overlays when base dataset changes\n      updateAvailableOverlays(availableDatasets, selectedBaseDataset);\n\n      // Clear current overlays when base dataset changes\n      setOverlays([]);\n    }\n  }, [selectedBaseDataset]);\n\n  // Fetch base dataset data\n  const fetchBaseData = async datasetId => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`http://localhost:5000/api/data/${datasetId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const result = await response.json();\n      setBaseData(result);\n      setLoading(false);\n    } catch (err) {\n      setError(`Error loading dataset: ${err.message}`);\n      setLoading(false);\n    }\n  };\n\n  // Toggle an overlay dataset\n  const toggleOverlay = async datasetId => {\n    // Check if the overlay is already added\n    const existingOverlayIndex = overlays.findIndex(o => o.id === datasetId);\n    if (existingOverlayIndex >= 0) {\n      // Remove the overlay if it's already added\n      setOverlays(overlays.filter(o => o.id !== datasetId));\n    } else {\n      // Add the overlay\n      try {\n        setLoading(true);\n        const response = await fetch(`http://localhost:5000/api/data/${datasetId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n\n        // Add to overlays with default settings\n        setOverlays([...overlays, {\n          id: datasetId,\n          data: result,\n          visible: true,\n          opacity: 0.7,\n          colorScale: 'viridis',\n          // Default color scale\n          zIndex: overlays.length // Set z-index based on current overlay count\n        }]);\n        setLoading(false);\n      } catch (err) {\n        setError(`Error loading overlay: ${err.message}`);\n        setLoading(false);\n      }\n    }\n  };\n\n  // Update overlay settings\n  const updateOverlay = (datasetId, updates) => {\n    setOverlays(overlays.map(overlay => overlay.id === datasetId ? {\n      ...overlay,\n      ...updates\n    } : overlay));\n  };\n\n  // Analyze layers (spatial operations between base and overlay)\n  const analyzeLayer = async (overlayId, operation) => {\n    try {\n      setLoading(true);\n      const response = await fetch(`http://localhost:5000/api/layers/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          baseLayerId: selectedBaseDataset,\n          overlayLayerId: overlayId,\n          operation\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.success) {\n        // Fetch the new dataset\n        await fetchBaseData(result.datasetId);\n        // Update the available datasets list\n        const datasetsResponse = await fetch(`http://localhost:5000/api/datasets`);\n        if (datasetsResponse.ok) {\n          const datasets = await datasetsResponse.json();\n          setAvailableDatasets(datasets);\n\n          // Set the new analysis dataset as the base dataset\n          setSelectedBaseDataset(result.datasetId);\n        }\n        setLoading(false);\n      } else {\n        throw new Error(result.error || 'Analysis operation failed');\n      }\n    } catch (err) {\n      setError(`Error performing analysis: ${err.message}`);\n      setLoading(false);\n    }\n  };\n  if (loading && !baseData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading dashboard data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 12\n    }, this);\n  }\n  if (error && !baseData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"dashboard-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Data Visualization Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataset-select\",\n          children: \"Base Dataset:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"dataset-select\",\n          value: selectedBaseDataset,\n          onChange: e => setSelectedBaseDataset(e.target.value),\n          children: availableDatasets.map(dataset => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: dataset.id,\n            children: dataset.name\n          }, dataset.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(LayerControls, {\n        availableOverlays: availableOverlays,\n        activeOverlays: overlays,\n        onToggleOverlay: toggleOverlay,\n        onUpdateOverlay: updateOverlay,\n        onAnalyzeLayer: analyzeLayer,\n        baseDatasetId: selectedBaseDataset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CaliforniaFireMap, {\n        dataset: selectedBaseDataset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widget-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"widget\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Base Data Trends\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chart-container\",\n            children: baseData && baseData.csvData && baseData.csvData.length > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Chart visualization would go here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No chart data available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"widget\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Base Data Metrics\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metrics-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"metric-value\",\n                children: (baseData === null || baseData === void 0 ? void 0 : (_baseData$metrics = baseData.metrics) === null || _baseData$metrics === void 0 ? void 0 : (_baseData$metrics$tot = _baseData$metrics.total) === null || _baseData$metrics$tot === void 0 ? void 0 : _baseData$metrics$tot.toLocaleString()) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Average\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"metric-value\",\n                children: (baseData === null || baseData === void 0 ? void 0 : (_baseData$metrics2 = baseData.metrics) === null || _baseData$metrics2 === void 0 ? void 0 : (_baseData$metrics2$av = _baseData$metrics2.average) === null || _baseData$metrics2$av === void 0 ? void 0 : _baseData$metrics2$av.toFixed(2)) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Maximum\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"metric-value\",\n                children: (baseData === null || baseData === void 0 ? void 0 : (_baseData$metrics3 = baseData.metrics) === null || _baseData$metrics3 === void 0 ? void 0 : (_baseData$metrics3$ma = _baseData$metrics3.maximum) === null || _baseData$metrics3$ma === void 0 ? void 0 : _baseData$metrics3$ma.toLocaleString()) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"metric-card\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Minimum\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"metric-value\",\n                children: (baseData === null || baseData === void 0 ? void 0 : (_baseData$metrics4 = baseData.metrics) === null || _baseData$metrics4 === void 0 ? void 0 : (_baseData$metrics4$mi = _baseData$metrics4.minimum) === null || _baseData$metrics4$mi === void 0 ? void 0 : _baseData$metrics4$mi.toLocaleString()) || 'N/A'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"Sj9zEi4LBgLfbGhX3sVs72loLV0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","CaliforniaFireMap","LayerControls","jsxDEV","_jsxDEV","Dashboard","initialDataset","_s","_baseData$metrics","_baseData$metrics$tot","_baseData$metrics2","_baseData$metrics2$av","_baseData$metrics3","_baseData$metrics3$ma","_baseData$metrics4","_baseData$metrics4$mi","loading","setLoading","error","setError","availableDatasets","setAvailableDatasets","selectedBaseDataset","setSelectedBaseDataset","baseData","setBaseData","overlays","setOverlays","availableOverlays","setAvailableOverlays","fetchDatasets","response","fetch","ok","Error","status","datasets","json","updateAvailableOverlays","err","console","baseId","filteredOverlays","filter","dataset","id","fetchBaseData","datasetId","result","message","toggleOverlay","existingOverlayIndex","findIndex","o","data","visible","opacity","colorScale","zIndex","length","updateOverlay","updates","map","overlay","analyzeLayer","overlayId","operation","method","headers","body","JSON","stringify","baseLayerId","overlayLayerId","success","datasetsResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","value","onChange","e","target","name","activeOverlays","onToggleOverlay","onUpdateOverlay","onAnalyzeLayer","baseDatasetId","csvData","metrics","total","toLocaleString","average","toFixed","maximum","minimum","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CaliforniaFireMap from './CaliforniaFireMap';\nimport LayerControls from './LayerControls';\nimport './Dashboard.css';\n\nconst Dashboard = ({ initialDataset }) => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [availableDatasets, setAvailableDatasets] = useState([]);\n  const [selectedBaseDataset, setSelectedBaseDataset] = useState('default');\n  const [baseData, setBaseData] = useState(null);\n  const [overlays, setOverlays] = useState([]);\n  const [availableOverlays, setAvailableOverlays] = useState([]);\n\n  // Load available datasets when the component mounts\n  useEffect(() => {\n    const fetchDatasets = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/datasets');\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const datasets = await response.json();\n        setAvailableDatasets(datasets);\n        \n        // Set initial dataset if provided, otherwise use default\n        if (initialDataset) {\n          setSelectedBaseDataset(initialDataset);\n        }\n        \n        // Update available overlays (all datasets except the currently selected base)\n        updateAvailableOverlays(datasets, initialDataset || 'default');\n        \n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching datasets:', err);\n        setError('Failed to load datasets. Please try again later.');\n        setLoading(false);\n      }\n    };\n    \n    fetchDatasets();\n  }, [initialDataset]);\n\n  // Update available overlays when base dataset changes\n  const updateAvailableOverlays = (datasets, baseId) => {\n    const filteredOverlays = datasets.filter(dataset => dataset.id !== baseId);\n    setAvailableOverlays(filteredOverlays);\n  };\n\n  // Fetch base dataset when selection changes\n  useEffect(() => {\n    if (selectedBaseDataset) {\n      fetchBaseData(selectedBaseDataset);\n      \n      // Update available overlays when base dataset changes\n      updateAvailableOverlays(availableDatasets, selectedBaseDataset);\n      \n      // Clear current overlays when base dataset changes\n      setOverlays([]);\n    }\n  }, [selectedBaseDataset]);\n\n  // Fetch base dataset data\n  const fetchBaseData = async (datasetId) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`http://localhost:5000/api/data/${datasetId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const result = await response.json();\n      setBaseData(result);\n      setLoading(false);\n    } catch (err) {\n      setError(`Error loading dataset: ${err.message}`);\n      setLoading(false);\n    }\n  };\n\n  // Toggle an overlay dataset\n  const toggleOverlay = async (datasetId) => {\n    // Check if the overlay is already added\n    const existingOverlayIndex = overlays.findIndex(o => o.id === datasetId);\n    \n    if (existingOverlayIndex >= 0) {\n      // Remove the overlay if it's already added\n      setOverlays(overlays.filter(o => o.id !== datasetId));\n    } else {\n      // Add the overlay\n      try {\n        setLoading(true);\n        const response = await fetch(`http://localhost:5000/api/data/${datasetId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        \n        // Add to overlays with default settings\n        setOverlays([...overlays, {\n          id: datasetId,\n          data: result,\n          visible: true,\n          opacity: 0.7,\n          colorScale: 'viridis', // Default color scale\n          zIndex: overlays.length // Set z-index based on current overlay count\n        }]);\n        setLoading(false);\n      } catch (err) {\n        setError(`Error loading overlay: ${err.message}`);\n        setLoading(false);\n      }\n    }\n  };\n\n  // Update overlay settings\n  const updateOverlay = (datasetId, updates) => {\n    setOverlays(overlays.map(overlay => \n      overlay.id === datasetId ? { ...overlay, ...updates } : overlay\n    ));\n  };\n\n  // Analyze layers (spatial operations between base and overlay)\n  const analyzeLayer = async (overlayId, operation) => {\n    try {\n      setLoading(true);\n      \n      const response = await fetch(`http://localhost:5000/api/layers/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          baseLayerId: selectedBaseDataset,\n          overlayLayerId: overlayId,\n          operation\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      \n      const result = await response.json();\n      \n      if (result.success) {\n        // Fetch the new dataset\n        await fetchBaseData(result.datasetId);\n        // Update the available datasets list\n        const datasetsResponse = await fetch(`http://localhost:5000/api/datasets`);\n        if (datasetsResponse.ok) {\n          const datasets = await datasetsResponse.json();\n          setAvailableDatasets(datasets);\n          \n          // Set the new analysis dataset as the base dataset\n          setSelectedBaseDataset(result.datasetId);\n        }\n        setLoading(false);\n      } else {\n        throw new Error(result.error || 'Analysis operation failed');\n      }\n    } catch (err) {\n      setError(`Error performing analysis: ${err.message}`);\n      setLoading(false);\n    }\n  };\n\n  if (loading && !baseData) {\n    return <div className=\"loading\">Loading dashboard data...</div>;\n  }\n\n  if (error && !baseData) {\n    return <div className=\"error\">{error}</div>;\n  }\n\n  return (\n    <div className=\"dashboard-container\">\n      <header className=\"dashboard-header\">\n        <h1>Data Visualization Dashboard</h1>\n        <div className=\"controls\">\n          <label htmlFor=\"dataset-select\">Base Dataset:</label>\n          <select \n            id=\"dataset-select\" \n            value={selectedBaseDataset}\n            onChange={(e) => setSelectedBaseDataset(e.target.value)}\n          >\n            {availableDatasets.map(dataset => (\n              <option key={dataset.id} value={dataset.id}>\n                {dataset.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </header>\n\n      {loading && <div className=\"loading\">Loading data...</div>}\n      {error && <div className=\"error\">{error}</div>}\n\n      <div className=\"dashboard-content\">\n        {/* Layer Controls */}\n        <LayerControls \n          availableOverlays={availableOverlays}\n          activeOverlays={overlays}\n          onToggleOverlay={toggleOverlay}\n          onUpdateOverlay={updateOverlay}\n          onAnalyzeLayer={analyzeLayer}\n          baseDatasetId={selectedBaseDataset}\n        />\n        \n        {/* California Fire Map */}\n        <CaliforniaFireMap dataset={selectedBaseDataset} />\n        \n        {/* Additional Visualizations */}\n        <div className=\"widget-row\">\n          <div className=\"widget\">\n            <h2>Base Data Trends</h2>\n            <div className=\"chart-container\">\n              {baseData && baseData.csvData && baseData.csvData.length > 0 ? (\n                <p>Chart visualization would go here</p>\n              ) : (\n                <p>No chart data available</p>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"widget\">\n            <h2>Base Data Metrics</h2>\n            <div className=\"metrics-container\">\n              <div className=\"metric-card\">\n                <h3>Total</h3>\n                <p className=\"metric-value\">{baseData?.metrics?.total?.toLocaleString() || 'N/A'}</p>\n              </div>\n              <div className=\"metric-card\">\n                <h3>Average</h3>\n                <p className=\"metric-value\">{baseData?.metrics?.average?.toFixed(2) || 'N/A'}</p>\n              </div>\n              <div className=\"metric-card\">\n                <h3>Maximum</h3>\n                <p className=\"metric-value\">{baseData?.metrics?.maximum?.toLocaleString() || 'N/A'}</p>\n              </div>\n              <div className=\"metric-card\">\n                <h3>Minimum</h3>\n                <p className=\"metric-value\">{baseData?.metrics?.minimum?.toLocaleString() || 'N/A'}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}