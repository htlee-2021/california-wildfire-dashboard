{"ast":null,"code":"import { MainDashboardD3 } from './MainDashboard.js';\nimport { YearlyAnalysisDashboardD3 } from './YearlyAnalysisDashboard.js';\nclass FireDashboardSystemD3 {\n  constructor(containerId) {\n    this.container = document.getElementById(containerId);\n    this.activeTab = 'main';\n    this.yearlyData = [];\n    this.monthlyData = [];\n    this.loading = true;\n    this.error = null;\n    this.selectedYear = null;\n    this.availableYears = [];\n    this.summaryStats = {\n      totalFires: 0,\n      totalAcres: 0,\n      yearlyAcres: 0,\n      peakMonth: '',\n      worstYear: '',\n      worstYearAcres: 0,\n      recentYear: '',\n      recentYearFires: 0,\n      recentYearAcres: 0,\n      avgAnnualFires: 0,\n      avgAnnualAcres: 0\n    };\n    this.backendBaseUrl = 'http://localhost:8000';\n    this.mainDashboard = null;\n    this.yearlyAnalysisDashboard = null;\n    this.init();\n  }\n  init() {\n    this.createStructure();\n    this.fetchYearlyData();\n    this.setupEventListeners();\n  }\n  createStructure() {\n    // Create the main structure\n    this.container.innerHTML = `\n      <div class=\"dashboard-system-container\">\n        <div class=\"dashboard-tabs\">\n          <button class=\"dashboard-tab active\" data-tab=\"main\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n            </svg>\n            Dashboard Overview\n          </button>\n          <button class=\"dashboard-tab\" data-tab=\"yearly\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clip-rule=\"evenodd\" />\n            </svg>\n            Yearly Analysis\n          </button>\n          <button class=\"dashboard-tab\" data-tab=\"map\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clip-rule=\"evenodd\" />\n            </svg>\n            Fire Map\n          </button>\n        </div>\n        \n        <div class=\"dashboard-content\">\n          <div id=\"main-dashboard\" class=\"dashboard-tab-content active\"></div>\n          <div id=\"yearly-dashboard\" class=\"dashboard-tab-content\"></div>\n          <div id=\"map-dashboard\" class=\"dashboard-tab-content\">\n            <div class=\"map-placeholder\">\n              <h3>California Fire Map</h3>\n              <p>Map component would be loaded here.</p>\n              <p>This tab would contain your existing CaliforniaFireMap component.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Initialize loading state\n    this.showLoading();\n  }\n  setupEventListeners() {\n    // Set up tab switching\n    const tabs = this.container.querySelectorAll('.dashboard-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', e => {\n        const tabName = e.currentTarget.getAttribute('data-tab');\n        this.handleTabChange(tabName);\n      });\n    });\n  }\n  handleTabChange(tabName) {\n    this.activeTab = tabName;\n\n    // Update active tab styling\n    const tabs = this.container.querySelectorAll('.dashboard-tab');\n    tabs.forEach(tab => {\n      if (tab.getAttribute('data-tab') === tabName) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n\n    // Update visible content\n    const contents = this.container.querySelectorAll('.dashboard-tab-content');\n    contents.forEach(content => {\n      content.classList.remove('active');\n    });\n    const activeContent = this.container.querySelector(`#${tabName}-dashboard`);\n    if (activeContent) {\n      activeContent.classList.add('active');\n    }\n\n    // Initialize the appropriate dashboard if needed\n    this.initActiveDashboard();\n  }\n  initActiveDashboard() {\n    if (this.activeTab === 'main' && !this.mainDashboard && !this.loading && !this.error) {\n      this.mainDashboard = new MainDashboardD3('main-dashboard', this.summaryStats, this.yearlyData, () => this.fetchYearlyData());\n    } else if (this.activeTab === 'yearly' && !this.yearlyAnalysisDashboard && !this.loading && !this.error) {\n      this.yearlyAnalysisDashboard = new YearlyAnalysisDashboardD3('yearly-dashboard', this.yearlyData, this.monthlyData, this.selectedYear, this.availableYears, this.summaryStats, year => this.handleYearChange(year), () => this.fetchYearlyData());\n    }\n  }\n  async fetchYearlyData() {\n    this.loading = true;\n    this.error = null;\n    this.showLoading();\n    try {\n      const response = await fetch(`${this.backendBaseUrl}/api/stats/yearly?dataset=firep23_1`);\n      if (!response.ok) {\n        // If we get a 404, it means the statistics file isn't available\n        if (response.status === 404) {\n          console.warn(\"Statistics file not found\");\n          this.handleDataError(\"Statistics file not found. Please run the preprocessor script first.\");\n          return;\n        }\n        throw new Error(`Failed to fetch yearly data: ${response.statusText}`);\n      }\n      const data = await response.json();\n      this.yearlyData = data.yearlyData;\n      this.availableYears = data.years;\n\n      // Calculate additional statistics\n      const sortedYears = [...data.yearlyData].sort((a, b) => parseInt(b.year) - parseInt(a.year));\n      const recentYearData = sortedYears.length > 0 ? sortedYears[0] : null;\n      const totalFires = data.summary.totalFires;\n      const totalAcres = data.summary.totalAcres;\n      const yearCount = data.years.length;\n\n      // Update summary stats\n      this.summaryStats = {\n        ...this.summaryStats,\n        totalFires: totalFires,\n        totalAcres: totalAcres,\n        worstYear: data.summary.worstYear,\n        worstYearAcres: data.summary.worstYearAcres,\n        recentYear: recentYearData ? recentYearData.year : 'N/A',\n        recentYearFires: recentYearData ? recentYearData.fires : 0,\n        recentYearAcres: recentYearData ? recentYearData.acres : 0,\n        avgAnnualFires: yearCount > 0 ? Math.round(totalFires / yearCount) : 0,\n        avgAnnualAcres: yearCount > 0 ? Math.round(totalAcres / yearCount) : 0\n      };\n\n      // Set the most recent year as the default selected year\n      if (data.years.length > 0) {\n        const maxYear = Math.max(...data.years.map(y => parseInt(y)));\n        this.selectedYear = maxYear.toString();\n\n        // Fetch monthly data for the selected year\n        this.fetchMonthlyData(this.selectedYear);\n      }\n      this.loading = false;\n      this.initActiveDashboard();\n    } catch (err) {\n      console.error(\"Error fetching yearly fire data:\", err);\n      this.handleDataError(\"Failed to load fire data. Please check server connection and run the preprocessor script.\");\n    }\n  }\n  async fetchMonthlyData(year) {\n    if (this.error || !year) {\n      this.setEmptyMonthlyData();\n      return;\n    }\n    try {\n      // Only show loading indicator for initial data load, not for year changes\n      const wasEmpty = this.monthlyData.length === 0;\n      if (wasEmpty) {\n        this.loading = true;\n        this.showLoading();\n      }\n      const response = await fetch(`${this.backendBaseUrl}/api/stats/monthly?dataset=firep23_1&year=${year}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.warn(\"Monthly statistics not found\");\n          this.error = \"Monthly statistics for this year not found. Please run the preprocessor script first.\";\n          this.setEmptyMonthlyData();\n          return;\n        }\n        throw new Error(`Failed to fetch monthly data: ${response.statusText}`);\n      }\n      const data = await response.json();\n      this.monthlyData = data.monthlyData;\n\n      // Update summary stats for the selected year\n      this.summaryStats = {\n        ...this.summaryStats,\n        yearlyAcres: data.summary.totalAcres,\n        peakMonth: data.summary.peakMonth\n      };\n      this.loading = false;\n\n      // Update the yearly dashboard if it exists\n      if (this.yearlyAnalysisDashboard) {\n        this.yearlyAnalysisDashboard.updateData(this.yearlyData, this.monthlyData, this.selectedYear, this.availableYears, this.summaryStats);\n      }\n    } catch (err) {\n      console.error(`Error fetching monthly fire data for year ${year}:`, err);\n      this.error = `Failed to load monthly data for ${year}. Please check server connection.`;\n      this.setEmptyMonthlyData();\n    } finally {\n      if (wasEmpty) {\n        this.loading = false;\n        this.initActiveDashboard();\n      }\n    }\n  }\n  handleYearChange(year) {\n    this.selectedYear = year;\n    this.fetchMonthlyData(year);\n  }\n  handleDataError(errorMessage) {\n    this.yearlyData = [];\n    this.availableYears = [];\n    this.selectedYear = null;\n    this.error = errorMessage || \"Failed to load fire data. Please run the preprocessor script first.\";\n    this.showError();\n  }\n  setEmptyMonthlyData() {\n    this.monthlyData = [];\n    this.summaryStats = {\n      ...this.summaryStats,\n      yearlyAcres: 0,\n      peakMonth: 'N/A'\n    };\n  }\n  showLoading() {\n    if (this.yearlyData.length === 0) {\n      const content = this.container.querySelector('.dashboard-content');\n      content.innerHTML = `\n        <div class=\"loading-container\">\n          <div class=\"loading-spinner\">\n            <div class=\"spinner\"></div>\n            <div class=\"loading-text\">Loading fire data...</div>\n          </div>\n        </div>\n      `;\n    }\n  }\n  showError() {\n    const content = this.container.querySelector('.dashboard-content');\n    content.innerHTML = `\n      <div class=\"error-container\">\n        <div class=\"dashboard-header\">\n          <h2 class=\"dashboard-title\">California Wildfire Dashboard</h2>\n        </div>\n        \n        <div class=\"error-message\">\n          <div class=\"flex\">\n            <div class=\"flex-shrink-0\">\n              <svg class=\"error-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\n              </svg>\n            </div>\n            <div class=\"ml-3\">\n              <h3 class=\"error-title\">Data Loading Error</h3>\n              <div class=\"error-details\">\n                <p>${this.error}</p>\n              </div>\n              <div>\n                <p class=\"error-help\">To fix this issue:</p>\n                <ol class=\"error-list\">\n                  <li class=\"error-list-item\">Make sure the server is running at ${this.backendBaseUrl}</li>\n                  <li class=\"error-list-item\">Ensure your GeoJSON files are placed in the 'uploads' directory</li>\n                  <li class=\"error-list-item\">Run the preprocessor script to generate statistics files:</li>\n                </ol>\n                <div class=\"error-command\">\n                  <code>node preprocessor.js</code>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"text-center\">\n          <button id=\"retry-button\" class=\"error-retry-button\">\n            Try Again\n          </button>\n        </div>\n      </div>\n    `;\n\n    // Add event listener for retry button\n    const retryButton = document.getElementById('retry-button');\n    if (retryButton) {\n      retryButton.addEventListener('click', () => this.fetchYearlyData());\n    }\n  }\n}","map":{"version":3,"names":["MainDashboardD3","YearlyAnalysisDashboardD3","FireDashboardSystemD3","constructor","containerId","container","document","getElementById","activeTab","yearlyData","monthlyData","loading","error","selectedYear","availableYears","summaryStats","totalFires","totalAcres","yearlyAcres","peakMonth","worstYear","worstYearAcres","recentYear","recentYearFires","recentYearAcres","avgAnnualFires","avgAnnualAcres","backendBaseUrl","mainDashboard","yearlyAnalysisDashboard","init","createStructure","fetchYearlyData","setupEventListeners","innerHTML","showLoading","tabs","querySelectorAll","forEach","tab","addEventListener","e","tabName","currentTarget","getAttribute","handleTabChange","classList","add","remove","contents","content","activeContent","querySelector","initActiveDashboard","year","handleYearChange","response","fetch","ok","status","console","warn","handleDataError","Error","statusText","data","json","years","sortedYears","sort","a","b","parseInt","recentYearData","length","summary","yearCount","fires","acres","Math","round","maxYear","max","map","y","toString","fetchMonthlyData","err","setEmptyMonthlyData","wasEmpty","updateData","errorMessage","showError","retryButton"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/FireDashboardSystem.js"],"sourcesContent":["import { MainDashboardD3 } from './MainDashboard.js';\nimport { YearlyAnalysisDashboardD3 } from './YearlyAnalysisDashboard.js';\n\nclass FireDashboardSystemD3 {\n  constructor(containerId) {\n    this.container = document.getElementById(containerId);\n    this.activeTab = 'main';\n    this.yearlyData = [];\n    this.monthlyData = [];\n    this.loading = true;\n    this.error = null;\n    this.selectedYear = null;\n    this.availableYears = [];\n    this.summaryStats = {\n      totalFires: 0,\n      totalAcres: 0,\n      yearlyAcres: 0,\n      peakMonth: '',\n      worstYear: '',\n      worstYearAcres: 0,\n      recentYear: '',\n      recentYearFires: 0,\n      recentYearAcres: 0,\n      avgAnnualFires: 0,\n      avgAnnualAcres: 0\n    };\n    \n    this.backendBaseUrl = 'http://localhost:8000';\n    this.mainDashboard = null;\n    this.yearlyAnalysisDashboard = null;\n    \n    this.init();\n  }\n  \n  init() {\n    this.createStructure();\n    this.fetchYearlyData();\n    this.setupEventListeners();\n  }\n  \n  createStructure() {\n    // Create the main structure\n    this.container.innerHTML = `\n      <div class=\"dashboard-system-container\">\n        <div class=\"dashboard-tabs\">\n          <button class=\"dashboard-tab active\" data-tab=\"main\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path d=\"M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z\" />\n            </svg>\n            Dashboard Overview\n          </button>\n          <button class=\"dashboard-tab\" data-tab=\"yearly\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z\" clip-rule=\"evenodd\" />\n            </svg>\n            Yearly Analysis\n          </button>\n          <button class=\"dashboard-tab\" data-tab=\"map\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"tab-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M12 1.586l-4 4v12.828l4-4V1.586zM3.707 3.293A1 1 0 002 4v10a1 1 0 00.293.707L6 18.414V5.586L3.707 3.293zM17.707 5.293L14 1.586v12.828l2.293 2.293A1 1 0 0018 16V6a1 1 0 00-.293-.707z\" clip-rule=\"evenodd\" />\n            </svg>\n            Fire Map\n          </button>\n        </div>\n        \n        <div class=\"dashboard-content\">\n          <div id=\"main-dashboard\" class=\"dashboard-tab-content active\"></div>\n          <div id=\"yearly-dashboard\" class=\"dashboard-tab-content\"></div>\n          <div id=\"map-dashboard\" class=\"dashboard-tab-content\">\n            <div class=\"map-placeholder\">\n              <h3>California Fire Map</h3>\n              <p>Map component would be loaded here.</p>\n              <p>This tab would contain your existing CaliforniaFireMap component.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    // Initialize loading state\n    this.showLoading();\n  }\n  \n  setupEventListeners() {\n    // Set up tab switching\n    const tabs = this.container.querySelectorAll('.dashboard-tab');\n    tabs.forEach(tab => {\n      tab.addEventListener('click', (e) => {\n        const tabName = e.currentTarget.getAttribute('data-tab');\n        this.handleTabChange(tabName);\n      });\n    });\n  }\n  \n  handleTabChange(tabName) {\n    this.activeTab = tabName;\n    \n    // Update active tab styling\n    const tabs = this.container.querySelectorAll('.dashboard-tab');\n    tabs.forEach(tab => {\n      if (tab.getAttribute('data-tab') === tabName) {\n        tab.classList.add('active');\n      } else {\n        tab.classList.remove('active');\n      }\n    });\n    \n    // Update visible content\n    const contents = this.container.querySelectorAll('.dashboard-tab-content');\n    contents.forEach(content => {\n      content.classList.remove('active');\n    });\n    \n    const activeContent = this.container.querySelector(`#${tabName}-dashboard`);\n    if (activeContent) {\n      activeContent.classList.add('active');\n    }\n    \n    // Initialize the appropriate dashboard if needed\n    this.initActiveDashboard();\n  }\n  \n  initActiveDashboard() {\n    if (this.activeTab === 'main' && !this.mainDashboard && !this.loading && !this.error) {\n      this.mainDashboard = new MainDashboardD3(\n        'main-dashboard', \n        this.summaryStats, \n        this.yearlyData, \n        () => this.fetchYearlyData()\n      );\n    } else if (this.activeTab === 'yearly' && !this.yearlyAnalysisDashboard && !this.loading && !this.error) {\n      this.yearlyAnalysisDashboard = new YearlyAnalysisDashboardD3(\n        'yearly-dashboard',\n        this.yearlyData,\n        this.monthlyData,\n        this.selectedYear,\n        this.availableYears,\n        this.summaryStats,\n        (year) => this.handleYearChange(year),\n        () => this.fetchYearlyData()\n      );\n    }\n  }\n  \n  async fetchYearlyData() {\n    this.loading = true;\n    this.error = null;\n    this.showLoading();\n    \n    try {\n      const response = await fetch(`${this.backendBaseUrl}/api/stats/yearly?dataset=firep23_1`);\n      \n      if (!response.ok) {\n        // If we get a 404, it means the statistics file isn't available\n        if (response.status === 404) {\n          console.warn(\"Statistics file not found\");\n          this.handleDataError(\"Statistics file not found. Please run the preprocessor script first.\");\n          return;\n        }\n        throw new Error(`Failed to fetch yearly data: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      this.yearlyData = data.yearlyData;\n      this.availableYears = data.years;\n      \n      // Calculate additional statistics\n      const sortedYears = [...data.yearlyData].sort((a, b) => parseInt(b.year) - parseInt(a.year));\n      const recentYearData = sortedYears.length > 0 ? sortedYears[0] : null;\n      \n      const totalFires = data.summary.totalFires;\n      const totalAcres = data.summary.totalAcres;\n      const yearCount = data.years.length;\n      \n      // Update summary stats\n      this.summaryStats = {\n        ...this.summaryStats,\n        totalFires: totalFires,\n        totalAcres: totalAcres,\n        worstYear: data.summary.worstYear,\n        worstYearAcres: data.summary.worstYearAcres,\n        recentYear: recentYearData ? recentYearData.year : 'N/A',\n        recentYearFires: recentYearData ? recentYearData.fires : 0,\n        recentYearAcres: recentYearData ? recentYearData.acres : 0,\n        avgAnnualFires: yearCount > 0 ? Math.round(totalFires / yearCount) : 0,\n        avgAnnualAcres: yearCount > 0 ? Math.round(totalAcres / yearCount) : 0\n      };\n      \n      // Set the most recent year as the default selected year\n      if (data.years.length > 0) {\n        const maxYear = Math.max(...data.years.map(y => parseInt(y)));\n        this.selectedYear = maxYear.toString();\n        \n        // Fetch monthly data for the selected year\n        this.fetchMonthlyData(this.selectedYear);\n      }\n      \n      this.loading = false;\n      this.initActiveDashboard();\n      \n    } catch (err) {\n      console.error(\"Error fetching yearly fire data:\", err);\n      this.handleDataError(\"Failed to load fire data. Please check server connection and run the preprocessor script.\");\n    }\n  }\n  \n  async fetchMonthlyData(year) {\n    if (this.error || !year) {\n      this.setEmptyMonthlyData();\n      return;\n    }\n\n    try {\n      // Only show loading indicator for initial data load, not for year changes\n      const wasEmpty = this.monthlyData.length === 0;\n      if (wasEmpty) {\n        this.loading = true;\n        this.showLoading();\n      }\n      \n      const response = await fetch(`${this.backendBaseUrl}/api/stats/monthly?dataset=firep23_1&year=${year}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.warn(\"Monthly statistics not found\");\n          this.error = \"Monthly statistics for this year not found. Please run the preprocessor script first.\";\n          this.setEmptyMonthlyData();\n          return;\n        }\n        throw new Error(`Failed to fetch monthly data: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      \n      this.monthlyData = data.monthlyData;\n      \n      // Update summary stats for the selected year\n      this.summaryStats = {\n        ...this.summaryStats,\n        yearlyAcres: data.summary.totalAcres,\n        peakMonth: data.summary.peakMonth\n      };\n      \n      this.loading = false;\n      \n      // Update the yearly dashboard if it exists\n      if (this.yearlyAnalysisDashboard) {\n        this.yearlyAnalysisDashboard.updateData(\n          this.yearlyData,\n          this.monthlyData,\n          this.selectedYear,\n          this.availableYears,\n          this.summaryStats\n        );\n      }\n      \n    } catch (err) {\n      console.error(`Error fetching monthly fire data for year ${year}:`, err);\n      this.error = `Failed to load monthly data for ${year}. Please check server connection.`;\n      this.setEmptyMonthlyData();\n    } finally {\n      if (wasEmpty) {\n        this.loading = false;\n        this.initActiveDashboard();\n      }\n    }\n  }\n  \n  handleYearChange(year) {\n    this.selectedYear = year;\n    this.fetchMonthlyData(year);\n  }\n  \n  handleDataError(errorMessage) {\n    this.yearlyData = [];\n    this.availableYears = [];\n    this.selectedYear = null;\n    this.error = errorMessage || \"Failed to load fire data. Please run the preprocessor script first.\";\n    this.showError();\n  }\n  \n  setEmptyMonthlyData() {\n    this.monthlyData = [];\n    this.summaryStats = {\n      ...this.summaryStats,\n      yearlyAcres: 0,\n      peakMonth: 'N/A'\n    };\n  }\n  \n  showLoading() {\n    if (this.yearlyData.length === 0) {\n      const content = this.container.querySelector('.dashboard-content');\n      content.innerHTML = `\n        <div class=\"loading-container\">\n          <div class=\"loading-spinner\">\n            <div class=\"spinner\"></div>\n            <div class=\"loading-text\">Loading fire data...</div>\n          </div>\n        </div>\n      `;\n    }\n  }\n  \n  showError() {\n    const content = this.container.querySelector('.dashboard-content');\n    content.innerHTML = `\n      <div class=\"error-container\">\n        <div class=\"dashboard-header\">\n          <h2 class=\"dashboard-title\">California Wildfire Dashboard</h2>\n        </div>\n        \n        <div class=\"error-message\">\n          <div class=\"flex\">\n            <div class=\"flex-shrink-0\">\n              <svg class=\"error-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clip-rule=\"evenodd\" />\n              </svg>\n            </div>\n            <div class=\"ml-3\">\n              <h3 class=\"error-title\">Data Loading Error</h3>\n              <div class=\"error-details\">\n                <p>${this.error}</p>\n              </div>\n              <div>\n                <p class=\"error-help\">To fix this issue:</p>\n                <ol class=\"error-list\">\n                  <li class=\"error-list-item\">Make sure the server is running at ${this.backendBaseUrl}</li>\n                  <li class=\"error-list-item\">Ensure your GeoJSON files are placed in the 'uploads' directory</li>\n                  <li class=\"error-list-item\">Run the preprocessor script to generate statistics files:</li>\n                </ol>\n                <div class=\"error-command\">\n                  <code>node preprocessor.js</code>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"text-center\">\n          <button id=\"retry-button\" class=\"error-retry-button\">\n            Try Again\n          </button>\n        </div>\n      </div>\n    `;\n    \n    // Add event listener for retry button\n    const retryButton = document.getElementById('retry-button');\n    if (retryButton) {\n      retryButton.addEventListener('click', () => this.fetchYearlyData());\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}