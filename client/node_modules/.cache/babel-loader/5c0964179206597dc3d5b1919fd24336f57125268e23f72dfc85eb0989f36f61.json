{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/RadialFireChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RadialFireChart = ({\n  yearlyData,\n  monthlyDataByYear,\n  availableYears,\n  selectedMetric = 'fires' // 'fires' or 'acres'\n}) => {\n  _s();\n  const radialChartRef = useRef(null);\n  const [focusYears, setFocusYears] = useState(5); // Default to showing 5 years\n\n  useEffect(() => {\n    if (monthlyDataByYear && Object.keys(monthlyDataByYear).length > 0) {\n      createRadialChart();\n    }\n  }, [monthlyDataByYear, selectedMetric, availableYears, focusYears]);\n  const formatLargeNumber = num => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num;\n  };\n  const createRadialChart = () => {\n    if (!radialChartRef.current) return;\n\n    // Clear previous chart\n    d3.select(radialChartRef.current).selectAll(\"*\").remove();\n\n    // Prepare data for the radial chart\n    const processedData = [];\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    // Get the most recent years based on focus selection\n    const sortedYears = [...availableYears].sort((a, b) => b - a);\n    const yearsToShow = sortedYears.slice(0, focusYears);\n\n    // Create data structure for the radial chart\n    yearsToShow.forEach(year => {\n      if (monthlyDataByYear[year]) {\n        months.forEach((month, i) => {\n          const monthData = monthlyDataByYear[year].find(m => m.month === month);\n          if (monthData) {\n            processedData.push({\n              year: year,\n              month: month,\n              monthIndex: i,\n              angle: i / 12 * 2 * Math.PI,\n              // position in radians\n              value: selectedMetric === 'fires' ? monthData.fires : monthData.acres\n            });\n          } else {\n            // Add empty data point if month data is missing\n            processedData.push({\n              year: year,\n              month: month,\n              monthIndex: i,\n              angle: i / 12 * 2 * Math.PI,\n              value: 0\n            });\n          }\n        });\n      }\n    });\n\n    // Set dimensions and margins\n    const margin = {\n      top: 60,\n      right: 60,\n      bottom: 60,\n      left: 60\n    };\n    const width = radialChartRef.current.clientWidth || 600;\n    const height = width; // Make it square for better radial visualization\n    const innerRadius = 80;\n    const outerRadius = Math.min(width, height) / 2 - margin.top;\n\n    // Create SVG\n    const svg = d3.select(radialChartRef.current).attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    // Define scales\n    // Angle scale for months\n    const angleScale = d3.scaleLinear().domain([0, 12]).range([0, 2 * Math.PI]);\n\n    // Radius scale for values\n    const maxValue = d3.max(processedData, d => d.value);\n    const radiusScale = d3.scaleLinear().domain([0, maxValue]).range([innerRadius, outerRadius]);\n\n    // Year scale for color - use a more visually distinguishable color scheme\n    const colorScale = d3.scaleOrdinal().domain(yearsToShow).range(['#3b82f6',\n    // blue\n    '#ef4444',\n    // red\n    '#f59e0b',\n    // amber\n    '#10b981',\n    // emerald\n    '#8b5cf6',\n    // violet\n    '#ec4899',\n    // pink\n    '#6366f1',\n    // indigo\n    '#14b8a6',\n    // teal\n    '#f97316',\n    // orange\n    '#84cc16' // lime\n    ]);\n\n    // Create month axis (circles and labels)\n    const axisCircles = svg.append(\"g\").attr(\"class\", \"axis-circles\");\n\n    // Add concentric circles for value scale\n    axisCircles.selectAll(\"circle\").data(d3.range(1, 6)) // Create 5 concentric circles\n    .enter().append(\"circle\").attr(\"r\", d => innerRadius + d * (outerRadius - innerRadius) / 5).attr(\"fill\", \"none\").attr(\"stroke\", \"#e5e7eb\").attr(\"stroke-dasharray\", \"2,2\").attr(\"stroke-width\", 0.5);\n\n    // Add value labels to circles\n    axisCircles.selectAll(\".radius-label\").data(d3.range(1, 6)).enter().append(\"text\").attr(\"class\", \"radius-label\").attr(\"y\", d => -(innerRadius + d * (outerRadius - innerRadius) / 5)).attr(\"dy\", \"0.35em\").attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"10px\").attr(\"fill\", \"#6b7280\").text(d => {\n      const value = maxValue * (d / 5);\n      return formatLargeNumber(Math.round(value));\n    });\n\n    // Add month segments and labels\n    const monthSegments = svg.append(\"g\").attr(\"class\", \"month-segments\");\n\n    // Add axis lines for months\n    monthSegments.selectAll(\"line\").data(months).enter().append(\"line\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", (d, i) => Math.cos(angleScale(i) - Math.PI / 2) * outerRadius).attr(\"y2\", (d, i) => Math.sin(angleScale(i) - Math.PI / 2) * outerRadius).attr(\"stroke\", \"#e5e7eb\").attr(\"stroke-width\", 0.5);\n\n    // Add month labels - position slightly beyond the outer radius\n    svg.selectAll(\".month-label\").data(months).enter().append(\"text\").attr(\"class\", \"month-label\").attr(\"x\", (d, i) => Math.cos(angleScale(i) - Math.PI / 2) * (outerRadius + 20)).attr(\"y\", (d, i) => Math.sin(angleScale(i) - Math.PI / 2) * (outerRadius + 20)).attr(\"dy\", \"0.35em\").attr(\"text-anchor\", (d, i) => {\n      const angle = angleScale(i);\n      if (angle === 0 || angle === Math.PI) return \"middle\";\n      return angle < Math.PI ? \"start\" : \"end\";\n    }).attr(\"font-size\", \"12px\").attr(\"font-weight\", d => {\n      // Highlight summer months to align with the yearly dashboard emphasis\n      return d === 'June' || d === 'July' || d === 'August' || d === 'September' ? \"bold\" : \"normal\";\n    }).attr(\"fill\", d => {\n      // Highlight summer months with different color\n      return d === 'June' || d === 'July' || d === 'August' || d === 'September' ? \"#d97706\" : \"#4b5563\";\n    }).text(d => d.substring(0, 3)); // Just show first 3 letters\n\n    // Highlight summer months with subtle background\n    const summerAngleStart = angleScale(5); // June (index 5)\n    const summerAngleEnd = angleScale(8); // September (index 8)\n\n    const summerArc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius).startAngle(summerAngleStart).endAngle(summerAngleEnd);\n    svg.append(\"path\").attr(\"d\", summerArc).attr(\"fill\", \"#fef3c7\") // Very light amber\n    .attr(\"stroke\", \"#f59e0b\") // Amber border\n    .attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"3,3\").attr(\"fill-opacity\", 0.2);\n\n    // Add \"PEAK FIRE SEASON\" label in the summer section\n    const summerMidAngle = (summerAngleStart + summerAngleEnd) / 2;\n    const labelRadius = innerRadius + (outerRadius - innerRadius) * 0.15;\n    svg.append(\"text\").attr(\"x\", Math.cos(summerMidAngle) * labelRadius).attr(\"y\", Math.sin(summerMidAngle) * labelRadius).attr(\"dy\", \"0.35em\").attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"10px\").attr(\"font-weight\", \"bold\").attr(\"fill\", \"#d97706\").attr(\"transform\", `rotate(${(summerMidAngle + Math.PI / 2) * (180 / Math.PI)}, ${Math.cos(summerMidAngle) * labelRadius}, ${Math.sin(summerMidAngle) * labelRadius})`).text(\"PEAK FIRE SEASON\");\n\n    // Group data by year for area/line generation\n    const dataByYear = d3.group(processedData, d => d.year);\n\n    // Create a radial area generator to show volumes better\n    const areaGenerator = d3.areaRadial().angle(d => angleScale(d.monthIndex)).innerRadius(innerRadius).outerRadius(d => radiusScale(d.value)).curve(d3.curveCardinalClosed);\n\n    // Create a line generator for outlines\n    const lineGenerator = d3.lineRadial().angle(d => angleScale(d.monthIndex) - Math.PI / 2).radius(d => radiusScale(d.value)).curve(d3.curveCardinalClosed);\n\n    // Draw areas and lines for each year\n    const yearAreas = svg.append(\"g\").attr(\"class\", \"year-areas\");\n    dataByYear.forEach((yearData, year) => {\n      // Sort by month index for proper connection\n      yearData.sort((a, b) => a.monthIndex - b.monthIndex);\n\n      // Add the area\n      yearAreas.append(\"path\").datum(yearData).attr(\"d\", areaGenerator).attr(\"fill\", colorScale(year)).attr(\"fill-opacity\", 0.25);\n\n      // Add the outline\n      yearAreas.append(\"path\").datum(yearData).attr(\"d\", lineGenerator).attr(\"fill\", \"none\").attr(\"stroke\", colorScale(year)).attr(\"stroke-width\", 2.5).attr(\"stroke-linejoin\", \"round\");\n\n      // Add dots for each month's data point\n      yearAreas.selectAll(`circle-year-${year}`).data(yearData).enter().append(\"circle\").attr(\"cx\", d => Math.cos(angleScale(d.monthIndex) - Math.PI / 2) * radiusScale(d.value)).attr(\"cy\", d => Math.sin(angleScale(d.monthIndex) - Math.PI / 2) * radiusScale(d.value)).attr(\"r\", 4).attr(\"fill\", colorScale(year)).attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5);\n    });\n\n    // Add central label\n    svg.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"dy\", \"0.35em\").attr(\"font-size\", \"14px\").attr(\"font-weight\", \"bold\").text(selectedMetric === 'fires' ? \"Fire Count\" : \"Acres Burned\");\n\n    // Create legend with year selection functionality\n    const legend = svg.append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", `translate(${-width / 2 + 20}, ${-height / 2 + 20})`);\n\n    // Add title above legend\n    legend.append(\"text\").attr(\"x\", 0).attr(\"y\", -15).attr(\"font-size\", \"12px\").attr(\"font-weight\", \"bold\").text(\"Select years to display:\");\n\n    // Create legend items with interactive selection\n    yearsToShow.forEach((year, i) => {\n      // Calculate position - when more than 5 years, make two columns\n      const column = i >= Math.ceil(yearsToShow.length / 2) ? 1 : 0;\n      const row = i % Math.ceil(yearsToShow.length / 2);\n      const legendItem = legend.append(\"g\").attr(\"transform\", `translate(${column * 80}, ${row * 20})`).attr(\"class\", \"legend-item\").style(\"cursor\", \"pointer\");\n      legendItem.append(\"rect\").attr(\"width\", 15).attr(\"height\", 15).attr(\"fill\", colorScale(year));\n      legendItem.append(\"text\").attr(\"x\", 20).attr(\"y\", 12).text(year).attr(\"font-size\", \"12px\");\n    });\n\n    // Add title\n    svg.append(\"text\").attr(\"x\", 0).attr(\"y\", -height / 2 + 20).attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"16px\").attr(\"font-weight\", \"bold\").text(`${focusYears}-Year Monthly ${selectedMetric === 'fires' ? 'Fire Counts' : 'Acres Burned'} (${yearsToShow[yearsToShow.length - 1]}-${yearsToShow[0]})`);\n\n    // Create tooltip\n    const tooltip = d3.select(\"body\").selectAll(\".tooltip\").data([null]).join(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n\n    // Add hover effects for dots\n    svg.selectAll(\"circle\").on(\"mouseover\", function (event, d) {\n      if (!d || !d.value) return; // Skip if not a data point\n\n      d3.select(this).transition().duration(200).attr(\"r\", 7);\n      tooltip.transition().duration(200).style(\"opacity\", 0.9);\n      tooltip.html(`\n          <strong>${d.month} ${d.year}</strong><br/>\n          ${selectedMetric === 'fires' ? 'Fires' : 'Acres Burned'}: ${d.value.toLocaleString()}\n        `).style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 28 + \"px\");\n    }).on(\"mouseout\", function (event, d) {\n      if (!d || !d.value) return; // Skip if not a data point\n\n      d3.select(this).transition().duration(200).attr(\"r\", 4);\n      tooltip.transition().duration(500).style(\"opacity\", 0);\n    });\n\n    // Add annotations to highlight key insights\n    const annotations = svg.append(\"g\").attr(\"class\", \"annotations\");\n\n    // Find the average max values for summer months\n    const summerMaxes = {};\n    months.slice(5, 9).forEach(month => {\n      // June, July, August, September\n      const monthIndex = months.indexOf(month);\n      const monthData = processedData.filter(d => d.monthIndex === monthIndex);\n      summerMaxes[month] = d3.max(monthData, d => d.value);\n    });\n\n    // Find the peak summer month\n    const peakMonth = Object.entries(summerMaxes).sort((a, b) => b[1] - a[1])[0][0];\n    const peakMonthIndex = months.indexOf(peakMonth);\n\n    // Add annotation for peak month\n    const peakAngle = angleScale(peakMonthIndex) - Math.PI / 2;\n    const peakRadius = radiusScale(summerMaxes[peakMonth]);\n    annotations.append(\"circle\").attr(\"cx\", Math.cos(peakAngle) * peakRadius).attr(\"cy\", Math.sin(peakAngle) * peakRadius).attr(\"r\", 8).attr(\"fill\", \"none\").attr(\"stroke\", \"#ef4444\").attr(\"stroke-width\", 2).attr(\"stroke-dasharray\", \"3,3\");\n\n    // Add text label for peak annotation\n    const labelX = Math.cos(peakAngle) * (peakRadius + 25);\n    const labelY = Math.sin(peakAngle) * (peakRadius + 25);\n    annotations.append(\"line\").attr(\"x1\", Math.cos(peakAngle) * peakRadius).attr(\"y1\", Math.sin(peakAngle) * peakRadius).attr(\"x2\", labelX).attr(\"y2\", labelY).attr(\"stroke\", \"#ef4444\").attr(\"stroke-width\", 1).attr(\"stroke-dasharray\", \"3,3\");\n    annotations.append(\"text\").attr(\"x\", labelX).attr(\"y\", labelY).attr(\"dy\", \"0.35em\").attr(\"text-anchor\", \"middle\").attr(\"font-size\", \"10px\").attr(\"font-weight\", \"bold\").attr(\"fill\", \"#ef4444\").text(\"PEAK ACTIVITY\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"section-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        className: \"section-icon\",\n        viewBox: \"0 0 20 20\",\n        fill: \"currentColor\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          fillRule: \"evenodd\",\n          d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\",\n          clipRule: \"evenodd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), \"Seasonal Fire Patterns (Radial View)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-description\",\n      children: [\"This radial chart shows the seasonal pattern of \", selectedMetric === 'fires' ? 'fire occurrences' : 'acres burned', \"across multiple years. Each colored area represents a year, with months positioned clockwise around the circle. The highlighted section shows the peak fire season (June-September), consistent with the yearly analysis dashboard.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      style: {\n        marginBottom: '15px',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          marginRight: '10px',\n          fontWeight: 'medium'\n        },\n        children: \"Years to display:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: focusYears,\n        onChange: e => setFocusYears(Number(e.target.value)),\n        style: {\n          padding: '5px 10px',\n          borderRadius: '4px',\n          border: '1px solid #d1d5db'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 3,\n          children: \"Last 3 years\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 5,\n          children: \"Last 5 years\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 10,\n          children: \"Last 10 years\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-canvas\",\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: radialChartRef,\n        width: \"100%\",\n        height: \"600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-notes\",\n      style: {\n        marginTop: '15px',\n        fontSize: '0.875rem',\n        color: '#6b7280',\n        fontStyle: 'italic'\n      },\n      children: [\"Note: This visualization highlights the summer months (June-September) when fire activity tends to peak, as shown in the yearly analysis. The distance from the center represents the number of\", selectedMetric === 'fires' ? ' fires' : ' acres burned', \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 5\n  }, this);\n};\n_s(RadialFireChart, \"sYVvKjZRV9Hf66WfhzZYCshXUek=\");\n_c = RadialFireChart;\nexport default RadialFireChart;\nvar _c;\n$RefreshReg$(_c, \"RadialFireChart\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","jsxDEV","_jsxDEV","RadialFireChart","yearlyData","monthlyDataByYear","availableYears","selectedMetric","_s","radialChartRef","focusYears","setFocusYears","Object","keys","length","createRadialChart","formatLargeNumber","num","toFixed","current","select","selectAll","remove","processedData","months","sortedYears","sort","a","b","yearsToShow","slice","forEach","year","month","i","monthData","find","m","push","monthIndex","angle","Math","PI","value","fires","acres","margin","top","right","bottom","left","width","clientWidth","height","innerRadius","outerRadius","min","svg","attr","append","angleScale","scaleLinear","domain","range","maxValue","max","d","radiusScale","colorScale","scaleOrdinal","axisCircles","data","enter","text","round","monthSegments","cos","sin","substring","summerAngleStart","summerAngleEnd","summerArc","arc","startAngle","endAngle","summerMidAngle","labelRadius","dataByYear","group","areaGenerator","areaRadial","curve","curveCardinalClosed","lineGenerator","lineRadial","radius","yearAreas","yearData","datum","legend","column","ceil","row","legendItem","style","tooltip","join","on","event","transition","duration","html","toLocaleString","pageX","pageY","annotations","summerMaxes","indexOf","filter","peakMonth","entries","peakMonthIndex","peakAngle","peakRadius","labelX","labelY","className","children","xmlns","viewBox","fill","fillRule","clipRule","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","textAlign","marginRight","fontWeight","onChange","e","Number","target","padding","borderRadius","border","display","justifyContent","ref","marginTop","fontSize","color","fontStyle","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/RadialFireChart.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\n\nexport const RadialFireChart = ({ \n  yearlyData, \n  monthlyDataByYear,\n  availableYears,\n  selectedMetric = 'fires' // 'fires' or 'acres'\n}) => {\n  const radialChartRef = useRef(null);\n  const [focusYears, setFocusYears] = useState(5); // Default to showing 5 years\n  \n  useEffect(() => {\n    if (monthlyDataByYear && Object.keys(monthlyDataByYear).length > 0) {\n      createRadialChart();\n    }\n  }, [monthlyDataByYear, selectedMetric, availableYears, focusYears]);\n  \n  const formatLargeNumber = (num) => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    } else if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num;\n  };\n  \n  const createRadialChart = () => {\n    if (!radialChartRef.current) return;\n    \n    // Clear previous chart\n    d3.select(radialChartRef.current).selectAll(\"*\").remove();\n    \n    // Prepare data for the radial chart\n    const processedData = [];\n    const months = [\n      'January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n    \n    // Get the most recent years based on focus selection\n    const sortedYears = [...availableYears].sort((a, b) => b - a);\n    const yearsToShow = sortedYears.slice(0, focusYears);\n    \n    // Create data structure for the radial chart\n    yearsToShow.forEach(year => {\n      if (monthlyDataByYear[year]) {\n        months.forEach((month, i) => {\n          const monthData = monthlyDataByYear[year].find(m => m.month === month);\n          if (monthData) {\n            processedData.push({\n              year: year,\n              month: month,\n              monthIndex: i,\n              angle: (i / 12) * 2 * Math.PI, // position in radians\n              value: selectedMetric === 'fires' ? monthData.fires : monthData.acres\n            });\n          } else {\n            // Add empty data point if month data is missing\n            processedData.push({\n              year: year,\n              month: month,\n              monthIndex: i,\n              angle: (i / 12) * 2 * Math.PI,\n              value: 0\n            });\n          }\n        });\n      }\n    });\n    \n    // Set dimensions and margins\n    const margin = { top: 60, right: 60, bottom: 60, left: 60 };\n    const width = radialChartRef.current.clientWidth || 600;\n    const height = width; // Make it square for better radial visualization\n    const innerRadius = 80;\n    const outerRadius = Math.min(width, height) / 2 - margin.top;\n    \n    // Create SVG\n    const svg = d3.select(radialChartRef.current)\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n    \n    // Define scales\n    // Angle scale for months\n    const angleScale = d3.scaleLinear()\n      .domain([0, 12])\n      .range([0, 2 * Math.PI]);\n    \n    // Radius scale for values\n    const maxValue = d3.max(processedData, d => d.value);\n    const radiusScale = d3.scaleLinear()\n      .domain([0, maxValue])\n      .range([innerRadius, outerRadius]);\n    \n    // Year scale for color - use a more visually distinguishable color scheme\n    const colorScale = d3.scaleOrdinal()\n      .domain(yearsToShow)\n      .range([\n        '#3b82f6', // blue\n        '#ef4444', // red\n        '#f59e0b', // amber\n        '#10b981', // emerald\n        '#8b5cf6', // violet\n        '#ec4899', // pink\n        '#6366f1', // indigo\n        '#14b8a6', // teal\n        '#f97316', // orange\n        '#84cc16'  // lime\n      ]);\n    \n    // Create month axis (circles and labels)\n    const axisCircles = svg.append(\"g\")\n      .attr(\"class\", \"axis-circles\");\n    \n    // Add concentric circles for value scale\n    axisCircles.selectAll(\"circle\")\n      .data(d3.range(1, 6)) // Create 5 concentric circles\n      .enter()\n      .append(\"circle\")\n      .attr(\"r\", d => innerRadius + (d * (outerRadius - innerRadius) / 5))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#e5e7eb\")\n      .attr(\"stroke-dasharray\", \"2,2\")\n      .attr(\"stroke-width\", 0.5);\n    \n    // Add value labels to circles\n    axisCircles.selectAll(\".radius-label\")\n      .data(d3.range(1, 6))\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"radius-label\")\n      .attr(\"y\", d => -(innerRadius + (d * (outerRadius - innerRadius) / 5)))\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"10px\")\n      .attr(\"fill\", \"#6b7280\")\n      .text(d => {\n        const value = maxValue * (d / 5);\n        return formatLargeNumber(Math.round(value));\n      });\n    \n    // Add month segments and labels\n    const monthSegments = svg.append(\"g\")\n      .attr(\"class\", \"month-segments\");\n    \n    // Add axis lines for months\n    monthSegments.selectAll(\"line\")\n      .data(months)\n      .enter()\n      .append(\"line\")\n      .attr(\"x1\", 0)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", (d, i) => Math.cos(angleScale(i) - Math.PI / 2) * outerRadius)\n      .attr(\"y2\", (d, i) => Math.sin(angleScale(i) - Math.PI / 2) * outerRadius)\n      .attr(\"stroke\", \"#e5e7eb\")\n      .attr(\"stroke-width\", 0.5);\n    \n    // Add month labels - position slightly beyond the outer radius\n    svg.selectAll(\".month-label\")\n      .data(months)\n      .enter()\n      .append(\"text\")\n      .attr(\"class\", \"month-label\")\n      .attr(\"x\", (d, i) => Math.cos(angleScale(i) - Math.PI / 2) * (outerRadius + 20))\n      .attr(\"y\", (d, i) => Math.sin(angleScale(i) - Math.PI / 2) * (outerRadius + 20))\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"text-anchor\", (d, i) => {\n        const angle = angleScale(i);\n        if (angle === 0 || angle === Math.PI) return \"middle\";\n        return angle < Math.PI ? \"start\" : \"end\";\n      })\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-weight\", (d) => {\n        // Highlight summer months to align with the yearly dashboard emphasis\n        return (d === 'June' || d === 'July' || d === 'August' || d === 'September') ? \"bold\" : \"normal\";\n      })\n      .attr(\"fill\", (d) => {\n        // Highlight summer months with different color\n        return (d === 'June' || d === 'July' || d === 'August' || d === 'September') ? \"#d97706\" : \"#4b5563\";\n      })\n      .text(d => d.substring(0, 3)); // Just show first 3 letters\n    \n    // Highlight summer months with subtle background\n    const summerAngleStart = angleScale(5)  // June (index 5)\n    const summerAngleEnd = angleScale(8) // September (index 8)\n    \n    const summerArc = d3.arc()\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius)\n      .startAngle(summerAngleStart)\n      .endAngle(summerAngleEnd);\n    \n    svg.append(\"path\")\n      .attr(\"d\", summerArc)\n      .attr(\"fill\", \"#fef3c7\") // Very light amber\n      .attr(\"stroke\", \"#f59e0b\") // Amber border\n      .attr(\"stroke-width\", 1)\n      .attr(\"stroke-dasharray\", \"3,3\")\n      .attr(\"fill-opacity\", 0.2);\n    \n    // Add \"PEAK FIRE SEASON\" label in the summer section\n    const summerMidAngle = (summerAngleStart + summerAngleEnd) / 2;\n    const labelRadius = innerRadius + (outerRadius - innerRadius) * 0.15;\n    \n    svg.append(\"text\")\n      .attr(\"x\", Math.cos(summerMidAngle) * labelRadius)\n      .attr(\"y\", Math.sin(summerMidAngle) * labelRadius)\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"10px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", \"#d97706\")\n      .attr(\"transform\", `rotate(${(summerMidAngle + Math.PI/2) * (180/Math.PI)}, ${Math.cos(summerMidAngle) * labelRadius}, ${Math.sin(summerMidAngle) * labelRadius})`)\n      .text(\"PEAK FIRE SEASON\");\n    \n    // Group data by year for area/line generation\n    const dataByYear = d3.group(processedData, d => d.year);\n    \n    // Create a radial area generator to show volumes better\n    const areaGenerator = d3.areaRadial()\n      .angle(d => angleScale(d.monthIndex))\n      .innerRadius(innerRadius)\n      .outerRadius(d => radiusScale(d.value))\n      .curve(d3.curveCardinalClosed);\n    \n    // Create a line generator for outlines\n    const lineGenerator = d3.lineRadial()\n      .angle(d => angleScale(d.monthIndex) - Math.PI / 2)\n      .radius(d => radiusScale(d.value))\n      .curve(d3.curveCardinalClosed);\n    \n    // Draw areas and lines for each year\n    const yearAreas = svg.append(\"g\")\n      .attr(\"class\", \"year-areas\");\n    \n    dataByYear.forEach((yearData, year) => {\n      // Sort by month index for proper connection\n      yearData.sort((a, b) => a.monthIndex - b.monthIndex);\n      \n      // Add the area\n      yearAreas\n        .append(\"path\")\n        .datum(yearData)\n        .attr(\"d\", areaGenerator)\n        .attr(\"fill\", colorScale(year))\n        .attr(\"fill-opacity\", 0.25);\n      \n      // Add the outline\n      yearAreas\n        .append(\"path\")\n        .datum(yearData)\n        .attr(\"d\", lineGenerator)\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", colorScale(year))\n        .attr(\"stroke-width\", 2.5)\n        .attr(\"stroke-linejoin\", \"round\");\n      \n      // Add dots for each month's data point\n      yearAreas\n        .selectAll(`circle-year-${year}`)\n        .data(yearData)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", d => Math.cos(angleScale(d.monthIndex) - Math.PI / 2) * radiusScale(d.value))\n        .attr(\"cy\", d => Math.sin(angleScale(d.monthIndex) - Math.PI / 2) * radiusScale(d.value))\n        .attr(\"r\", 4)\n        .attr(\"fill\", colorScale(year))\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"stroke-width\", 1.5);\n    });\n    \n    // Add central label\n    svg.append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"font-size\", \"14px\")\n      .attr(\"font-weight\", \"bold\")\n      .text(selectedMetric === 'fires' ? \"Fire Count\" : \"Acres Burned\");\n    \n    // Create legend with year selection functionality\n    const legend = svg.append(\"g\")\n      .attr(\"class\", \"legend\")\n      .attr(\"transform\", `translate(${-width/2 + 20}, ${-height/2 + 20})`);\n    \n    // Add title above legend\n    legend.append(\"text\")\n      .attr(\"x\", 0)\n      .attr(\"y\", -15)\n      .attr(\"font-size\", \"12px\")\n      .attr(\"font-weight\", \"bold\")\n      .text(\"Select years to display:\");\n    \n    // Create legend items with interactive selection\n    yearsToShow.forEach((year, i) => {\n      // Calculate position - when more than 5 years, make two columns\n      const column = i >= Math.ceil(yearsToShow.length / 2) ? 1 : 0;\n      const row = i % Math.ceil(yearsToShow.length / 2);\n      \n      const legendItem = legend.append(\"g\")\n        .attr(\"transform\", `translate(${column * 80}, ${row * 20})`)\n        .attr(\"class\", \"legend-item\")\n        .style(\"cursor\", \"pointer\");\n      \n      legendItem.append(\"rect\")\n        .attr(\"width\", 15)\n        .attr(\"height\", 15)\n        .attr(\"fill\", colorScale(year));\n      \n      legendItem.append(\"text\")\n        .attr(\"x\", 20)\n        .attr(\"y\", 12)\n        .text(year)\n        .attr(\"font-size\", \"12px\");\n    });\n    \n    // Add title\n    svg.append(\"text\")\n      .attr(\"x\", 0)\n      .attr(\"y\", -height/2 + 20)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"16px\")\n      .attr(\"font-weight\", \"bold\")\n      .text(`${focusYears}-Year Monthly ${selectedMetric === 'fires' ? 'Fire Counts' : 'Acres Burned'} (${yearsToShow[yearsToShow.length-1]}-${yearsToShow[0]})`);\n    \n    // Create tooltip\n    const tooltip = d3.select(\"body\")\n      .selectAll(\".tooltip\")\n      .data([null])\n      .join(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n    \n    // Add hover effects for dots\n    svg.selectAll(\"circle\")\n      .on(\"mouseover\", function(event, d) {\n        if (!d || !d.value) return; // Skip if not a data point\n        \n        d3.select(this)\n          .transition()\n          .duration(200)\n          .attr(\"r\", 7);\n        \n        tooltip.transition()\n          .duration(200)\n          .style(\"opacity\", 0.9);\n        \n        tooltip.html(`\n          <strong>${d.month} ${d.year}</strong><br/>\n          ${selectedMetric === 'fires' ? 'Fires' : 'Acres Burned'}: ${d.value.toLocaleString()}\n        `)\n          .style(\"left\", (event.pageX + 10) + \"px\")\n          .style(\"top\", (event.pageY - 28) + \"px\");\n      })\n      .on(\"mouseout\", function(event, d) {\n        if (!d || !d.value) return; // Skip if not a data point\n        \n        d3.select(this)\n          .transition()\n          .duration(200)\n          .attr(\"r\", 4);\n        \n        tooltip.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n      });\n    \n    // Add annotations to highlight key insights\n    const annotations = svg.append(\"g\")\n      .attr(\"class\", \"annotations\");\n    \n    // Find the average max values for summer months\n    const summerMaxes = {};\n    months.slice(5, 9).forEach(month => { // June, July, August, September\n      const monthIndex = months.indexOf(month);\n      const monthData = processedData.filter(d => d.monthIndex === monthIndex);\n      summerMaxes[month] = d3.max(monthData, d => d.value);\n    });\n    \n    // Find the peak summer month\n    const peakMonth = Object.entries(summerMaxes)\n      .sort((a, b) => b[1] - a[1])[0][0];\n    const peakMonthIndex = months.indexOf(peakMonth);\n    \n    // Add annotation for peak month\n    const peakAngle = angleScale(peakMonthIndex) - Math.PI / 2;\n    const peakRadius = radiusScale(summerMaxes[peakMonth]);\n    \n    annotations.append(\"circle\")\n      .attr(\"cx\", Math.cos(peakAngle) * peakRadius)\n      .attr(\"cy\", Math.sin(peakAngle) * peakRadius)\n      .attr(\"r\", 8)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#ef4444\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"stroke-dasharray\", \"3,3\");\n    \n    // Add text label for peak annotation\n    const labelX = Math.cos(peakAngle) * (peakRadius + 25);\n    const labelY = Math.sin(peakAngle) * (peakRadius + 25);\n    \n    annotations.append(\"line\")\n      .attr(\"x1\", Math.cos(peakAngle) * peakRadius)\n      .attr(\"y1\", Math.sin(peakAngle) * peakRadius)\n      .attr(\"x2\", labelX)\n      .attr(\"y2\", labelY)\n      .attr(\"stroke\", \"#ef4444\")\n      .attr(\"stroke-width\", 1)\n      .attr(\"stroke-dasharray\", \"3,3\");\n    \n    annotations.append(\"text\")\n      .attr(\"x\", labelX)\n      .attr(\"y\", labelY)\n      .attr(\"dy\", \"0.35em\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"10px\")\n      .attr(\"font-weight\", \"bold\")\n      .attr(\"fill\", \"#ef4444\")\n      .text(\"PEAK ACTIVITY\");\n  };\n  \n  return (\n    <div className=\"chart-container\">\n      <h3 className=\"section-title\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"section-icon\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z\" clipRule=\"evenodd\" />\n        </svg>\n        Seasonal Fire Patterns (Radial View)\n      </h3>\n      <div className=\"chart-description\">\n        This radial chart shows the seasonal pattern of {selectedMetric === 'fires' ? 'fire occurrences' : 'acres burned'} \n        across multiple years. Each colored area represents a year, with months positioned clockwise around the circle.\n        The highlighted section shows the peak fire season (June-September), consistent with the yearly analysis dashboard.\n      </div>\n      \n      <div className=\"control-panel\" style={{ marginBottom: '15px', textAlign: 'center' }}>\n        <label style={{ marginRight: '10px', fontWeight: 'medium' }}>\n          Years to display:\n        </label>\n        <select \n          value={focusYears} \n          onChange={(e) => setFocusYears(Number(e.target.value))}\n          style={{ \n            padding: '5px 10px', \n            borderRadius: '4px', \n            border: '1px solid #d1d5db' \n          }}\n        >\n          <option value={3}>Last 3 years</option>\n          <option value={5}>Last 5 years</option>\n          <option value={10}>Last 10 years</option>\n        </select>\n      </div>\n      \n      <div className=\"chart-canvas\" style={{ display: 'flex', justifyContent: 'center' }}>\n        <svg ref={radialChartRef} width=\"100%\" height=\"600\"></svg>\n      </div>\n      \n      <div className=\"chart-notes\" style={{ marginTop: '15px', fontSize: '0.875rem', color: '#6b7280', fontStyle: 'italic' }}>\n        Note: This visualization highlights the summer months (June-September) when fire activity tends to peak,\n        as shown in the yearly analysis. The distance from the center represents the number of \n        {selectedMetric === 'fires' ? ' fires' : ' acres burned'}.\n      </div>\n    </div>\n  );\n};\n\nexport default RadialFireChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}