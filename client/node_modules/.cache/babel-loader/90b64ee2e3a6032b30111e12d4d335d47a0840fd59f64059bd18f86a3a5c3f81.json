{"ast":null,"code":"var _jsxFileName = \"/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/Fileupload.jsx\",\n  _s = $RefreshSig$();\n// FileUpload.jsx - Component for uploading data files with original filenames\nimport React, { useState } from 'react';\nimport './FileUpload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = ({\n  onUploadSuccess,\n  uploadSuccess,\n  setUploadSuccess\n}) => {\n  _s();\n  const [files, setFiles] = useState({\n    csv: null,\n    geojson: null,\n    shapefile: []\n  });\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const [datasetName, setDatasetName] = useState('');\n  const handleFileChange = e => {\n    const {\n      name,\n      files: selectedFiles\n    } = e.target;\n    if (name === 'shapefile') {\n      // Handle multiple shapefile components (.shp, .dbf, .shx)\n      const fileArray = Array.from(selectedFiles);\n      setFiles(prev => ({\n        ...prev,\n        [name]: fileArray\n      }));\n    } else {\n      // Handle single file types (CSV, GeoJSON)\n      setFiles(prev => ({\n        ...prev,\n        [name]: selectedFiles[0] || null\n      }));\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError(null);\n    setUploading(true);\n    setUploadSuccess(false);\n\n    // Validate that at least one file is selected\n    if (!files.csv && !files.geojson && files.shapefile.length === 0) {\n      setError('Please select at least one file to upload');\n      setUploading(false);\n      return;\n    }\n\n    // Create form data\n    const formData = new FormData();\n\n    // Use the dataset name or derive it from the file if not provided\n    let derivedDatasetName = datasetName;\n    if (files.csv) {\n      formData.append('csv', files.csv);\n      if (!derivedDatasetName) {\n        derivedDatasetName = files.csv.name.replace(/\\.[^/.]+$/, \"\"); // Remove extension\n      }\n    }\n    if (files.geojson) {\n      formData.append('geojson', files.geojson);\n      if (!derivedDatasetName) {\n        derivedDatasetName = files.geojson.name.replace(/\\.[^/.]+$/, \"\");\n      }\n    }\n\n    // Add all shapefile components\n    files.shapefile.forEach(file => {\n      formData.append('shapefile', file);\n      // If no dataset name is provided, use the first shapefile name (without extension)\n      if (!derivedDatasetName && file.name.toLowerCase().endsWith('.shp')) {\n        derivedDatasetName = file.name.replace(/\\.[^/.]+$/, \"\");\n      }\n    });\n\n    // Add dataset name (either user-provided or derived from filename)\n    formData.append('name', derivedDatasetName || 'Unnamed Dataset');\n\n    // Add a flag to preserve original filenames\n    formData.append('preserveFilenames', 'true');\n    try {\n      const response = await fetch('http://localhost:8000/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to upload files');\n      }\n\n      // Handle success\n      onUploadSuccess(data.datasetId);\n\n      // Reset form\n      setFiles({\n        csv: null,\n        geojson: null,\n        shapefile: []\n      });\n      setDatasetName('');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setUploading(false);\n    }\n  };\n  const renderFileList = fileType => {\n    if (fileType === 'shapefile' && files.shapefile.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"file-list\",\n        children: files.shapefile.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"file-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-icon\",\n            children: \"\\uD83D\\uDCC1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-name\",\n            children: file.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"file-size\",\n            children: [\"(\", formatFileSize(file.size), \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this);\n    } else if (fileType !== 'shapefile' && files[fileType]) {\n      const file = files[fileType];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-icon\",\n          children: \"\\uD83D\\uDCC1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-name\",\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-size\",\n          children: [\"(\", formatFileSize(file.size), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this);\n    }\n    return null;\n  };\n  const formatFileSize = bytes => {\n    if (bytes < 1024) return bytes + ' B';else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';else return (bytes / 1048576).toFixed(1) + ' MB';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Data Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), uploadSuccess ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"success-icon\",\n        children: \"\\u2713\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Files uploaded successfully! Redirecting to dashboard...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"upload-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dataset-name\",\n          children: \"Dataset Name (optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"dataset-name\",\n          value: datasetName,\n          onChange: e => setDatasetName(e.target.value),\n          placeholder: \"Enter a name or leave blank to use filename\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"help-text\",\n          children: \"If left blank, the dataset will be named after your file.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-sections\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Tabular Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"file-description\",\n            children: \"Upload a CSV file with data to be visualized in charts and tables. Make sure it has header rows and consistent data formats.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-upload-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"csv-upload\",\n              className: \"file-upload-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"upload-icon\",\n                children: \"\\uD83D\\uDCCA\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Select CSV File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"csv-upload\",\n                name: \"csv\",\n                accept: \".csv\",\n                onChange: handleFileChange,\n                className: \"file-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 33\n            }, this), renderFileList('csv')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Geographic Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"file-description\",\n            children: \"Upload GeoJSON or Shapefile with geographic boundaries and properties. For Shapefiles, upload .shp, .dbf, and .shx files together.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-upload-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"geojson-upload\",\n              className: \"file-upload-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"upload-icon\",\n                children: \"\\uD83C\\uDF0D\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Select GeoJSON File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"geojson-upload\",\n                name: \"geojson\",\n                accept: \".json,.geojson\",\n                onChange: handleFileChange,\n                className: \"file-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 33\n            }, this), renderFileList('geojson')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"file-upload-area\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"shapefile-upload\",\n              className: \"file-upload-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"upload-icon\",\n                children: \"\\uD83D\\uDDFA\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Select Shapefile Components\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                id: \"shapefile-upload\",\n                name: \"shapefile\",\n                accept: \".shp,.dbf,.shx,.prj\",\n                onChange: handleFileChange,\n                className: \"file-input\",\n                multiple: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 33\n            }, this), renderFileList('shapefile')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: uploading,\n          children: uploading ? 'Uploading...' : 'Upload Files'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-instructions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File Requirements\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"CSV files:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this), \" Must have headers in the first row. Numeric columns will be used for calculations.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"GeoJSON files:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), \" Must follow the GeoJSON specification with valid features.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Shapefiles:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 25\n          }, this), \" Upload the .shp, .dbf, and .shx files together.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Note:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), \" For best results, ensure that your CSV data and geographic data share common identifier columns for proper joining of the datasets.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n};\n_s(FileUpload, \"3R7C38QOR18ux0xhcQ/3JXbmwNI=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FileUpload","onUploadSuccess","uploadSuccess","setUploadSuccess","_s","files","setFiles","csv","geojson","shapefile","uploading","setUploading","error","setError","datasetName","setDatasetName","handleFileChange","e","name","selectedFiles","target","fileArray","Array","from","prev","handleSubmit","preventDefault","length","formData","FormData","derivedDatasetName","append","replace","forEach","file","toLowerCase","endsWith","response","fetch","method","body","data","json","ok","Error","datasetId","err","message","renderFileList","fileType","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","formatFileSize","size","bytes","toFixed","onSubmit","htmlFor","type","id","value","onChange","placeholder","accept","multiple","disabled","_c","$RefreshReg$"],"sources":["/Users/hongtenglee/Documents/geoviz-dashboard/client/src/components/Fileupload.jsx"],"sourcesContent":["// FileUpload.jsx - Component for uploading data files with original filenames\nimport React, { useState } from 'react';\nimport './FileUpload.css';\n\nconst FileUpload = ({ onUploadSuccess, uploadSuccess, setUploadSuccess }) => {\n    const [files, setFiles] = useState({\n        csv: null,\n        geojson: null,\n        shapefile: []\n    });\n    const [uploading, setUploading] = useState(false);\n    const [error, setError] = useState(null);\n    const [datasetName, setDatasetName] = useState('');\n\n    const handleFileChange = (e) => {\n        const { name, files: selectedFiles } = e.target;\n\n        if (name === 'shapefile') {\n            // Handle multiple shapefile components (.shp, .dbf, .shx)\n            const fileArray = Array.from(selectedFiles);\n            setFiles(prev => ({\n                ...prev,\n                [name]: fileArray\n            }));\n        } else {\n            // Handle single file types (CSV, GeoJSON)\n            setFiles(prev => ({\n                ...prev,\n                [name]: selectedFiles[0] || null\n            }));\n        }\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setError(null);\n        setUploading(true);\n        setUploadSuccess(false);\n\n        // Validate that at least one file is selected\n        if (!files.csv && !files.geojson && files.shapefile.length === 0) {\n            setError('Please select at least one file to upload');\n            setUploading(false);\n            return;\n        }\n\n        // Create form data\n        const formData = new FormData();\n\n        // Use the dataset name or derive it from the file if not provided\n        let derivedDatasetName = datasetName;\n        \n        if (files.csv) {\n            formData.append('csv', files.csv);\n            if (!derivedDatasetName) {\n                derivedDatasetName = files.csv.name.replace(/\\.[^/.]+$/, \"\"); // Remove extension\n            }\n        }\n\n        if (files.geojson) {\n            formData.append('geojson', files.geojson);\n            if (!derivedDatasetName) {\n                derivedDatasetName = files.geojson.name.replace(/\\.[^/.]+$/, \"\");\n            }\n        }\n\n        // Add all shapefile components\n        files.shapefile.forEach(file => {\n            formData.append('shapefile', file);\n            // If no dataset name is provided, use the first shapefile name (without extension)\n            if (!derivedDatasetName && file.name.toLowerCase().endsWith('.shp')) {\n                derivedDatasetName = file.name.replace(/\\.[^/.]+$/, \"\");\n            }\n        });\n\n        // Add dataset name (either user-provided or derived from filename)\n        formData.append('name', derivedDatasetName || 'Unnamed Dataset');\n        \n        // Add a flag to preserve original filenames\n        formData.append('preserveFilenames', 'true');\n\n        try {\n            const response = await fetch('http://localhost:8000/api/upload', {\n                method: 'POST',\n                body: formData,\n            });\n\n            const data = await response.json();\n\n            if (!response.ok) {\n                throw new Error(data.error || 'Failed to upload files');\n            }\n\n            // Handle success\n            onUploadSuccess(data.datasetId);\n\n            // Reset form\n            setFiles({\n                csv: null,\n                geojson: null,\n                shapefile: []\n            });\n            setDatasetName('');\n\n        } catch (err) {\n            setError(err.message);\n        } finally {\n            setUploading(false);\n        }\n    };\n\n    const renderFileList = (fileType) => {\n        if (fileType === 'shapefile' && files.shapefile.length > 0) {\n            return (\n                <ul className=\"file-list\">\n                    {files.shapefile.map((file, index) => (\n                        <li key={index} className=\"file-item\">\n                            <span className=\"file-icon\">📁</span>\n                            <span className=\"file-name\">{file.name}</span>\n                            <span className=\"file-size\">({formatFileSize(file.size)})</span>\n                        </li>\n                    ))}\n                </ul>\n            );\n        } else if (fileType !== 'shapefile' && files[fileType]) {\n            const file = files[fileType];\n            return (\n                <div className=\"file-item\">\n                    <span className=\"file-icon\">📁</span>\n                    <span className=\"file-name\">{file.name}</span>\n                    <span className=\"file-size\">({formatFileSize(file.size)})</span>\n                </div>\n            );\n        }\n        return null;\n    };\n\n    const formatFileSize = (bytes) => {\n        if (bytes < 1024) return bytes + ' B';\n        else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';\n        else return (bytes / 1048576).toFixed(1) + ' MB';\n    };\n\n    return (\n        <div className=\"upload-container\">\n            <h1>Upload Data Files</h1>\n\n            {uploadSuccess ? (\n                <div className=\"success-message\">\n                    <span className=\"success-icon\">✓</span>\n                    <p>Files uploaded successfully! Redirecting to dashboard...</p>\n                </div>\n            ) : (\n                <form onSubmit={handleSubmit} className=\"upload-form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"dataset-name\">Dataset Name (optional)</label>\n                        <input\n                            type=\"text\"\n                            id=\"dataset-name\"\n                            value={datasetName}\n                            onChange={(e) => setDatasetName(e.target.value)}\n                            placeholder=\"Enter a name or leave blank to use filename\"\n                            className=\"form-control\"\n                        />\n                        <small className=\"help-text\">\n                            If left blank, the dataset will be named after your file.\n                        </small>\n                    </div>\n\n                    <div className=\"upload-sections\">\n                        <div className=\"upload-section\">\n                            <h2>Tabular Data</h2>\n                            <p className=\"file-description\">\n                                Upload a CSV file with data to be visualized in charts and tables.\n                                Make sure it has header rows and consistent data formats.\n                            </p>\n\n                            <div className=\"file-upload-area\">\n                                <label htmlFor=\"csv-upload\" className=\"file-upload-label\">\n                                    <div className=\"upload-icon\">📊</div>\n                                    <div>Select CSV File</div>\n                                    <input\n                                        type=\"file\"\n                                        id=\"csv-upload\"\n                                        name=\"csv\"\n                                        accept=\".csv\"\n                                        onChange={handleFileChange}\n                                        className=\"file-input\"\n                                    />\n                                </label>\n\n                                {renderFileList('csv')}\n                            </div>\n                        </div>\n\n                        <div className=\"upload-section\">\n                            <h2>Geographic Data</h2>\n                            <p className=\"file-description\">\n                                Upload GeoJSON or Shapefile with geographic boundaries and properties.\n                                For Shapefiles, upload .shp, .dbf, and .shx files together.\n                            </p>\n\n                            <div className=\"file-upload-area\">\n                                <label htmlFor=\"geojson-upload\" className=\"file-upload-label\">\n                                    <div className=\"upload-icon\">🌍</div>\n                                    <div>Select GeoJSON File</div>\n                                    <input\n                                        type=\"file\"\n                                        id=\"geojson-upload\"\n                                        name=\"geojson\"\n                                        accept=\".json,.geojson\"\n                                        onChange={handleFileChange}\n                                        className=\"file-input\"\n                                    />\n                                </label>\n\n                                {renderFileList('geojson')}\n                            </div>\n\n                            <div className=\"file-upload-area\">\n                                <label htmlFor=\"shapefile-upload\" className=\"file-upload-label\">\n                                    <div className=\"upload-icon\">🗺️</div>\n                                    <div>Select Shapefile Components</div>\n                                    <input\n                                        type=\"file\"\n                                        id=\"shapefile-upload\"\n                                        name=\"shapefile\"\n                                        accept=\".shp,.dbf,.shx,.prj\"\n                                        onChange={handleFileChange}\n                                        className=\"file-input\"\n                                        multiple\n                                    />\n                                </label>\n\n                                {renderFileList('shapefile')}\n                            </div>\n                        </div>\n                    </div>\n\n                    {error && <div className=\"error-message\">{error}</div>}\n\n                    <div className=\"form-actions\">\n                        <button\n                            type=\"submit\"\n                            className=\"submit-button\"\n                            disabled={uploading}\n                        >\n                            {uploading ? 'Uploading...' : 'Upload Files'}\n                        </button>\n                    </div>\n                </form>\n            )}\n\n            <div className=\"upload-instructions\">\n                <h3>File Requirements</h3>\n                <ul>\n                    <li>\n                        <strong>CSV files:</strong> Must have headers in the first row. Numeric columns will be used for calculations.\n                    </li>\n                    <li>\n                        <strong>GeoJSON files:</strong> Must follow the GeoJSON specification with valid features.\n                    </li>\n                    <li>\n                        <strong>Shapefiles:</strong> Upload the .shp, .dbf, and .shx files together.\n                    </li>\n                </ul>\n                <p>\n                    <strong>Note:</strong> For best results, ensure that your CSV data and geographic data\n                    share common identifier columns for proper joining of the datasets.\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default FileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}